{"version":3,"sources":["webpack://examples-webgl/webpack/universalModuleDefinition","webpack://examples-webgl/webpack/bootstrap","webpack://examples-webgl/./kotlin-dce/wrapper.js","webpack://examples-webgl/./kotlin-dce/misc.js","webpack://examples-webgl/./kotlin-dce/polyfills.js","webpack://examples-webgl/./kotlin-dce/core.js","webpack://examples-webgl/./kotlin-dce/markerFunctions.js","webpack://examples-webgl/./kotlin-dce/arrayUtils.js","webpack://examples-webgl/./kotlin-dce/callableReferenceUtils.js","webpack://examples-webgl/./kotlin-dce/conversions.js","webpack://examples-webgl/./kotlin-dce/long.js","webpack://examples-webgl/./kotlin-dce/rtti.js","webpack://examples-webgl/./kotlin-dce/runtime/Enum.kt","webpack://examples-webgl/./kotlin-dce/runtime/arrayUtils.kt","webpack://examples-webgl/primitiveCompanionObjects.kt","webpack://examples-webgl/./kotlin-dce/generated/_Arrays.kt","webpack://examples-webgl/./kotlin-dce/generated/_Ranges.kt","webpack://examples-webgl/./kotlin-dce/kotlin/UByte.kt","webpack://examples-webgl/./kotlin-dce/kotlin/UInt.kt","webpack://examples-webgl/./kotlin-dce/kotlin/UShort.kt","webpack://examples-webgl/./kotlin-dce/Ranges.kt","webpack://examples-webgl/./kotlin-dce/collections/Collections.kt","webpack://examples-webgl/./kotlin-dce/collections/Maps.kt","webpack://examples-webgl/./kotlin-dce/collections/Sets.kt","webpack://examples-webgl/./kotlin-dce/text/StringNumberConversions.kt","webpack://examples-webgl/./kotlin-dce/collections/Iterables.kt","webpack://examples-webgl/./kotlin-dce/collections/Sequences.kt","webpack://examples-webgl/./kotlin-dce/generated/_Collections.kt","webpack://examples-webgl/./kotlin-dce/generated/_Sequences.kt","webpack://examples-webgl/./kotlin-dce/util/Preconditions.kt","webpack://examples-webgl/./kotlin-dce/generated/_Strings.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/string.kt","webpack://examples-webgl/./kotlin-dce/Iterators.kt","webpack://examples-webgl/./kotlin-dce/ProgressionIterators.kt","webpack://examples-webgl/./kotlin-dce/Progressions.kt","webpack://examples-webgl/./kotlin-dce/kotlin/UnsignedUtils.kt","webpack://examples-webgl/./kotlin-dce/Collections.kt","webpack://examples-webgl/./kotlin-dce/Range.kt","webpack://examples-webgl/./kotlin-dce/Unit.kt","webpack://examples-webgl/./kotlin-dce/internal/progressionUtil.kt","webpack://examples-webgl/./kotlin-dce/kotlin/builtins.kt","webpack://examples-webgl/./kotlin-dce/kotlin/coroutines/CoroutineImpl.kt","webpack://examples-webgl/./kotlin-dce/util/Standard.kt","webpack://examples-webgl/./kotlin-dce/util/Result.kt","webpack://examples-webgl/./kotlin-dce/coroutines/Continuation.kt","webpack://examples-webgl/./kotlin-dce/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://examples-webgl/./kotlin-dce/kotlin/exceptions.kt","webpack://examples-webgl/./kotlin-dce/generated/_ArraysJs.kt","webpack://examples-webgl/./kotlin-dce/generated/_CollectionsJs.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections.kt","webpack://examples-webgl/./kotlin-dce/kotlin/kotlin.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/AbstractMutableCollection.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/AbstractMutableList.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/AbstractMutableMap.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/AbstractMutableSet.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/ArrayList.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/ArraySorting.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/EqualityComparator.kt","webpack://examples-webgl/./kotlin-dce/kotlin/Comparator.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/HashMap.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/HashSet.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/InternalHashCodeMap.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/InternalStringMap.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/LinkedHashMap.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/LinkedHashSet.kt","webpack://examples-webgl/./kotlin-dce/kotlin/console.kt","webpack://examples-webgl/./kotlin-dce/kotlin/coroutines/SafeContinuationJs.kt","webpack://examples-webgl/./kotlin-dce/kotlin/dom/ItemArrayLike.kt","webpack://examples-webgl/./kotlin-dce/kotlin/exceptionUtils.kt","webpack://examples-webgl/./kotlin-dce/kotlin/math.kt","webpack://examples-webgl/./kotlin-dce/kotlin/numbers_js-v1.kt","webpack://examples-webgl/./kotlin-dce/kotlin/numbers.kt","webpack://examples-webgl/./kotlin-dce/kotlin/random/PlatformRandom.kt","webpack://examples-webgl/./kotlin-dce/kotlin/reflect/KClassImpl.kt","webpack://examples-webgl/./kotlin-dce/kotlin/collections/InternalMap.kt","webpack://examples-webgl/./kotlin-dce/kotlin/jsOperators.kt","webpack://examples-webgl/./kotlin-dce/kotlin/reflect/primitives.kt","webpack://examples-webgl/./kotlin-dce/kotlin/reflect/reflection.kt","webpack://examples-webgl/./kotlin-dce/kotlin/regexp.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/StringBuilderJs.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/char.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/numberConversions.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/regex.kt","webpack://examples-webgl/./kotlin-dce/text/Strings.kt","webpack://examples-webgl/./kotlin-dce/generated/_ComparisonsJs.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/stringsCode.kt","webpack://examples-webgl/./kotlin-dce/kotlin/throwableExtensions.kt","webpack://examples-webgl/./kotlin-dce/collections/AbstractCollection.kt","webpack://examples-webgl/./kotlin-dce/collections/AbstractList.kt","webpack://examples-webgl/./kotlin-dce/collections/AbstractMap.kt","webpack://examples-webgl/./kotlin-dce/collections/AbstractSet.kt","webpack://examples-webgl/./kotlin-dce/collections/IndexedValue.kt","webpack://examples-webgl/./kotlin-dce/collections/MapWithDefault.kt","webpack://examples-webgl/./kotlin-dce/collections/MutableCollections.kt","webpack://examples-webgl/./kotlin-dce/collections/ReversedViews.kt","webpack://examples-webgl/./kotlin-dce/collections/SequenceBuilder.kt","webpack://examples-webgl/./kotlin-dce/coroutines/ContinuationInterceptor.kt","webpack://examples-webgl/./kotlin-dce/coroutines/CoroutineContext.kt","webpack://examples-webgl/./kotlin-dce/coroutines/CoroutineContextImpl.kt","webpack://examples-webgl/./kotlin-dce/coroutines/intrinsics/Intrinsics.kt","webpack://examples-webgl/./kotlin-dce/random/Random.kt","webpack://examples-webgl/./kotlin-dce/random/XorWowRandom.kt","webpack://examples-webgl/./kotlin-dce/ranges/Ranges.kt","webpack://examples-webgl/./kotlin-dce/text/Appendable.kt","webpack://examples-webgl/./kotlin-dce/text/Char.kt","webpack://examples-webgl/./kotlin-dce/text/Indent.kt","webpack://examples-webgl/./kotlin-dce/text/regex/MatchResult.kt","webpack://examples-webgl/./kotlin-dce/util/Lazy.kt","webpack://examples-webgl/./kotlin-dce/util/Tuples.kt","webpack://examples-webgl/./kotlin-dce/kotlin/MathH.kt","webpack://examples-webgl/./kotlin-dce/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://examples-webgl/./kotlin-dce/kotlin/text/utf8Encoding.kt","webpack://examples-webgl/./kotlin-dce/util/DeepRecursive.kt","webpack://examples-webgl/./kotlin-dce/comparisons/Comparisons.kt","webpack://examples-webgl/./kotlin-dce/generated/_Maps.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Color.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Colors.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Command.kt","webpack://examples-webgl/./kotlin-dce/text/regex/RegexExtensions.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/DependencyBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/Container.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/BufferedList.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/File.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/FloatBuffer.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Instrumentation.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Logger.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Property.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/PropertyDelegate.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Scope.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/EventListener.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/jvm/src/common/Properties.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Stack.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/String.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/SystemTarget.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Tokenizer.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Tuples.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/Device.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/File.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/Logger.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/TargetOs.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/Thread.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Collections.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/Time.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/PropertiesParser.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Task.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/common/Types.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/utils/src/js/Instrumentation.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ComponentRegistry.kt","webpack://examples-webgl/util/Preconditions.kt","webpack://examples-webgl/collections/Collections.kt","webpack://examples-webgl/util/Standard.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/Component.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ComponentProvider.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ContainerBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ContainerProvider.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ContainerRegistry.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/Dependency.kt","webpack://examples-webgl/collections/Maps.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/DependencyRegistry.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ContainerListener.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/Module.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ModuleBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ModulePlugin.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ModuleProvider.kt","webpack://examples-webgl/kotlin/text/string.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/Proxy.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/ProxyScope.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/Runtime.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/RuntimeBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/runtime/src/RuntimeState.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/jvm/src/common/System.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/Content.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ContentType.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ContentTypeRegistry.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/Resource.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ResourceAttribute.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ResourceSchema.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ResourceTag.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ResourceReader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ResourceWriter.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/content/src/ResourceExtension.kt","webpack://examples-webgl/../src/JsKeyboard.kt","webpack://examples-webgl/../src/JsUtils.kt","webpack://examples-webgl/./kotlin-dce/org.w3c/org.w3c.dom.kt","webpack://examples-webgl/../src/Collections.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Angle.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Math.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Matrix4.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Precision.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Rectangle.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Size.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Surface.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Transform.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Vector2.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/math/src/Vector3.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/js/src/js/ProgressView.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/js/src/js/RootElement.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/js/src/js/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/js/src/js/JsUtils.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/include/js/src/js/MainWindowLauncher.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/Application.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/ApplicationBootstrap.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/ApplicationBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/ApplicationComponent.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/ApplicationController.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/ApplicationDelegate.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/js/ApplicationRuntime.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/app/src/common/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml-reader/src/RmlContent.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml-reader/src/RmlFile.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml-reader/src/RmlParser.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml-reader/src/RmlReader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml-reader/src/package.kt","webpack://examples-webgl/./kotlin-dce/text/StringBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/common/Window.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/common/WindowCoordinates.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/common/WindowListener.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/common/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/js/MainView.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/js/WindowDelegate.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/window/src/js/package.kt","webpack://examples-webgl/../../../../../common/src/Delay.kt","webpack://examples-webgl/../../../../../common/src/EventLoop.common.kt","webpack://examples-webgl/../../../../../common/src/flow/SharedFlow.kt","webpack://examples-webgl/../../../../../common/src/internal/LockFreeTaskQueue.kt","webpack://examples-webgl/../../../../../js/src/JSDispatcher.kt","webpack://examples-webgl/../../../../../common/src/AbstractCoroutine.kt","webpack://examples-webgl/../../../../../common/src/Builders.common.kt","webpack://examples-webgl/../../../../../common/src/CancellableContinuation.kt","webpack://examples-webgl/../../../../../common/src/CancellableContinuationImpl.kt","webpack://examples-webgl/../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://examples-webgl/../../../../../common/src/CompletionState.kt","webpack://examples-webgl/../../../../../common/src/CoroutineDispatcher.kt","webpack://examples-webgl/../../../../../common/src/CoroutineExceptionHandler.kt","webpack://examples-webgl/../../../../../common/src/CompletableDeferred.kt","webpack://examples-webgl/../../../../../common/src/CoroutineName.kt","webpack://examples-webgl/../../../../../common/src/CoroutineScope.kt","webpack://examples-webgl/../../../../../common/src/CoroutineStart.kt","webpack://examples-webgl/../../../../../common/src/Job.kt","webpack://examples-webgl/../../../../../common/src/JobSupport.kt","webpack://examples-webgl/../../../../../common/src/MainCoroutineDispatcher.kt","webpack://examples-webgl/../../../../../common/src/NonCancellable.kt","webpack://examples-webgl/../../../../../common/src/Supervisor.kt","webpack://examples-webgl/../../../../../common/src/channels/AbstractChannel.kt","webpack://examples-webgl/../../../../../js/src/internal/LinkedList.kt","webpack://examples-webgl/../../../../../common/src/Timeout.kt","webpack://examples-webgl/../../../../../common/src/flow/terminal/Reduce.kt","webpack://examples-webgl/../../../../../common/src/internal/ThreadSafeHeap.kt","webpack://examples-webgl/../../../../../common/src/selects/Select.kt","webpack://examples-webgl/../../../../../common/src/internal/ConcurrentLinkedList.kt","webpack://examples-webgl/../../../../../common/src/internal/DispatchedContinuation.kt","webpack://examples-webgl/../../../../../common/src/internal/InlineList.kt","webpack://examples-webgl/../../../../../common/src/internal/OnUndeliveredElement.kt","webpack://examples-webgl/../../../../../common/src/internal/Scopes.kt","webpack://examples-webgl/../../../../../common/src/intrinsics/Undispatched.kt","webpack://examples-webgl/../../../../../js/src/Runnable.kt","webpack://examples-webgl/../../../../../common/src/sync/Semaphore.kt","webpack://examples-webgl/../../../../../common/src/channels/Channels.common.kt","webpack://examples-webgl/../../../../../common/src/flow/Channels.kt","webpack://examples-webgl/../../../../../common/src/flow/operators/Limit.kt","webpack://examples-webgl/../../../../../common/src/flow/operators/Zip.kt","webpack://examples-webgl/../../../../../common/src/flow/terminal/Collection.kt","webpack://examples-webgl/../../../../../common/src/flow/terminal/Collect.kt","webpack://examples-webgl/../../../../../common/src/flow/terminal/Count.kt","webpack://examples-webgl/../../../../../common/src/internal/ArrayQueue.kt","webpack://examples-webgl/../../../../../common/src/internal/Atomic.kt","webpack://examples-webgl/../../../../../common/src/intrinsics/Cancellable.kt","webpack://examples-webgl/../../../../../common/src/sync/Mutex.kt","webpack://examples-webgl/../../../../../js/src/CompletionHandler.kt","webpack://examples-webgl/../../../../../js/src/CoroutineContext.kt","webpack://examples-webgl/./kotlin-dce/kotlin/jsTypeOf.kt","webpack://examples-webgl/../../../../../js/src/CoroutineExceptionHandlerImpl.kt","webpack://examples-webgl/../../../../../js/src/Debug.kt","webpack://examples-webgl/../../../../../js/src/Dispatchers.kt","webpack://examples-webgl/../../../../../js/src/EventLoop.kt","webpack://examples-webgl/../../../../../js/src/Promise.kt","webpack://examples-webgl/../../../../../js/src/Window.kt","webpack://examples-webgl/../../../../../js/src/internal/CopyOnWriteList.kt","webpack://examples-webgl/../../../../../js/src/Exceptions.kt","webpack://examples-webgl/../../../../../js/src/flow/internal/FlowExceptions.kt","webpack://examples-webgl/../../../../../js/src/flow/internal/SafeCollector.kt","webpack://examples-webgl/../../../../../common/src/flow/internal/FlowCoroutine.kt","webpack://examples-webgl/../src/draggable-resizable-dialog.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/text/src/TextContent.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/text/src/TextContentType.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/text/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/layout/src/Layout.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/layout/src/Orientation.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/layout/src/Camera.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/build/js/node_modules/process/browser.js","webpack://examples-webgl/../../../../../core/commonMain/src/DateTimePeriod.kt","webpack://examples-webgl/./kotlin-dce/time/Duration.kt","webpack://examples-webgl/../../../../../core/commonMain/src/DateTimeUnit.kt","webpack://examples-webgl/../../../../../core/commonMain/src/Instant.kt","webpack://examples-webgl/../../../../../core/commonMain/src/math.kt","webpack://examples-webgl/../../../../../core/jsMain/src/DayOfWeek.kt","webpack://examples-webgl/../../../../../core/jsMain/src/Month.kt","webpack://examples-webgl/../../../../../core/commonMain/src/DayOfWeek.kt","webpack://examples-webgl/../../../../../core/commonMain/src/Month.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/src/commonMain/kotlin/attributes.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/src/commonMain/kotlin/generated/gen-enums.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/src/commonMain/kotlin/api.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/src/commonMain/kotlin/generated/gen-attributes.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/src/commonMain/kotlin/stream.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/RmlContentType.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/RmlResource.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/RmlResourceBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/RmlResourceReader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/RmlTag.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/rml/src/RmlContentBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/Script.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptCall.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptCallContext.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptExpression.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptFunction.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptInterpreter.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptOperator.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptParser.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/ScriptResult.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/script/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/loader/src/Loader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/loader/src/LoaderController.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/loader/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/common/Buffer.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/common/Opengl.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/common/Program.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/common/Sampling.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/common/Uniforms.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/common/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/js/OpenglProvider.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/js/Openglmpl.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/opengl/src/js/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader-reader/src/ShaderAttribute.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader-reader/src/ShaderReader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader-reader/src/ShaderTranspiler.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader-reader/src/export.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader-reader/src/package.kt","webpack://examples-webgl/../../../../../include/featurea/include/featurea/libraries/runtime/src/DependencyBuilder.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/examples/tutorials/learnwebgl/build/generated/bootstrap/kotlin/featurea/examples/webgl/js/Bootstrap.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/examples/tutorials/learnwebgl/src/setup/bootstrap.kt","webpack://examples-webgl/../../../../../include/featurea/include/featurea/libraries/runtime/src/Component.kt","webpack://examples-webgl/../../../../../include/featurea/include/featurea/libraries/runtime/src/Module.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/examples/tutorials/learnwebgl/src/setup/delegate.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/examples/tutorials/learnwebgl/src/setup/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/examples/tutorials/learnwebgl/src/test1.kt","webpack://examples-webgl/../../../../../include/featurea/examples/tutorials/learnwebgl/build/js/collections/Maps.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/build/js/node_modules/@js-joda/core/dist/js-joda.esm.js","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/text-reader/src/TextReader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/text-reader/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/formula/src/Formula.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/formula/src/FormulaExpression.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/formula/src/FormulaOperand.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/formula/src/FormulaOperator.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/formula/src/FormulaParser.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/config/src/Config.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/config/src/ConfigContent.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/config/src/ConfigContentType.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/config/src/ConfigFile.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/config/src/ConfigReader.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/config/src/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/common/Input.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/common/InputEvent.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/common/InputListener.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/common/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/js/MouseEventProducer.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/js/TouchEventProducer.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/input/src/js/package.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader/src/ShaderContent.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader/src/ShaderContentType.kt","webpack://examples-webgl//Users/dmitrykolesnikovich/workspace/lcontrol/include/featurea/libraries/shader/src/package.kt"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Kotlin","buf","bufFloat64","bufFloat32","bufInt32","lowIndex","highIndex","_","getObjectHashCode","obj","hash","Math","random","throwMarkerError","Error","imul","a","b","isBooleanArray","Array","isArray","Int8Array","$type$","isByteArray","isShortArray","Int16Array","isCharArray","Uint16Array","isIntArray","Int32Array","isFloatArray","Float32Array","isDoubleArray","Float64Array","isLongArray","isArrayish","ArrayBuffer","isView","arrayToString","toString","String","fromCharCode","map","e","join","getCallableRef","f","callableName","toShort","toByte","toChar","numberToLong","Long","fromNumber","numberToInt","toInt","doubleToInt","numberToDouble","toBoxedChar","BoxedChar","unboxChar","equals","obj1","obj2","hashCode","objType","numberHashCode","Number","str","length","code","charCodeAt","getStringHashCode","identityHashCode","low_","low","high_","high","$metadata$","IntCache_","fromInt","cachedObj","isNaN","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","charAt","substring","indexOf","radixToPower","pow","result","size","min","parseInt","power","multiply","add","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEqualsLong","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","valueOf","unaryPlus","unaryMinus","inv","rangeTo","kotlin","ranges","LongRange","defineInlineFunction","fun","wrapFunction","apply","arguments","suspendCall","coroutineResult","coroutineReceiver","setCoroutineResult","compareTo","typeA","doubleCompareTo","primitiveCompareTo","ia","imulEmulated","doubleToRawBits","doubleFromBits","floatToBits","floatToRawBits","NaN","ensureNotNull","x","throwNPE","startsWith","searchString","position","lastIndexOf","endsWith","subjectString","undefined","lastIndex","sign","trunc","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","abs","y","exp","y1","isFinite","cosh","tanh","Infinity","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","clz32","asUint","__proto__","fill","TypeError","O","len","start","relativeStart","k","end","relativeEnd","finalValue","normalizeOffset","offset","typedArraySlice","begin","constructor","subarray","arrays","TypedArray","slice","Function","self","array","callback","totalOrderComparator","sort","compareFunction","Kind","callGetter","thisObject","klass","propertyName","propertyDescriptor","getOwnPropertyDescriptor","getPrototypeOf","isType","proto","kind","OBJECT","klassMetadata","INTERFACE","isInheritanceFromInterface","ctor","iface","metadata","interfaces","superPrototype","superConstructor","isNumber","isChar","isCharSequence","CharSequence","ordinal","charArray","init","initValue","fillArrayVal","element","index","NoSuchElementException","IntRange","destination","item","iterator","hasNext","next","single","j","emptyList","listOf","optimizeReadOnlyList","emptySet","setOf","optimizeReadOnlySet","separator","prefix","postfix","limit","truncated","transform","buffer","count","to","last","first","step","EMPTY","minimumValue","maximumValue","CharIterator","IntIterator","LongIterator","getProgressionLastElement","endInclusive","NotImplementedError","nextByte","nextChar","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","CharProgressionIterator","isEmpty","CharProgression","rangeStart","rangeEnd","IntProgressionIterator","IntProgression","LongProgressionIterator","LongProgression","CharRange","mod","differenceModulo","BooleanIterator","ByteIterator","ShortIterator","FloatIterator","DoubleIterator","context","current","v","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","CoroutineImpl","receiver","cause","message","Exception","RuntimeException","ArrayList","midPoint","reverseIndex","tmp","toArray","copyToArrayImpl","collection","push","list","copyToArray","comparator","collectionsSort","throwIndexOverflow","expectedSize","AbstractCollection","AbstractMutableCollection","AbstractMutableList","toIndex","AbstractMap","AbstractMutableSet","initialCapacity","elements","_stableSortingIsSupported","comparison","getStableSortingIsSupported","median","left","leftIndex","rightIndex","right","leftValue","rightValue","target","mergeSort","checkIsMutable","remove","modified","it","_index","changed","fromIndex","times","hasPrevious","newValue","oldValue","entries","clear","from","iter","entry","modCount","splice","concat","pop","value1","value2","internalMap","equality","InternalHashCodeMap","loadFactor","createJsMap","keys","BaseOutput","BufferedOutput","initialResult","AbstractList","ClassCastException","NEGATIVE_INFINITY","toRawBits","bits","POSITIVE_INFINITY","isInfinite","hi26","INV_2_26","low27","INV_2_53","KClassImpl","jClass","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","state","lastEntry","_head","_tail","node","old","newEntry","build","println","outputStream","write","messageString","flush","console","cur","IndexOutOfBoundsException","simpleName","jsClass","PrimitiveKClassImpl","functionClasses","arity","getKClassM","getKClass1","jClasses","ErrorKClass","stringClass","SimpleKClassImpl","kClass","content","matches","toUpperCase","uppercase","MIN_HIGH_SURROGATE","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","MAX_LOW_SURROGATE","char","pattern","options","collectionSizeOrDefault","RegExp","match","startIndex","endIndex","reversed","isLowSurrogate","isHighSurrogate","concatToString","string","toInsert","newLength","destinationOffset","dstIndex","stringCsq","reset","exec","input","test","findNext","Regex","replace","replacement","lastStart","sb","foundMatch","range","nonGlobalOptions","subSequence","literal","ignoreCase","n1","n2","s1","s2","toLowerCase","regionMatches","suffix","regex","regionMatchesImpl","thisOffset","otherOffset","ExceptionTraceBuilder","_suppressed","MatchGroup","indent","qualifier","shortInfo","stack","stackStart","lineSequence","suppressed","suppressedIndent","commonFrames","lastBreak","preLastBreak","pos","previous","nextIndex","otherIterator","elem","elemOther","AbstractSet","ourValue","ArrayAsCollection","ArithmeticException","values","contains","isVarargs","pairs","putAll","filterInPlace","predicate","predicateResultToRemove","writeIndex","readIndex","removeIndex","SequenceBuilderIterator","nextStep","block","SequenceScope","reverseElementIndex","reversePositionIndex","sequence","throwOnFailure","GeneratorSequence","seedFunction","nextFunction","FlatteningSequence","itemIterator","nextItemIterator","emptySequence","SubSequence","TakeSequence","nextItem","nextState","toCollection","safe","getOrThrow","acc","removed","interceptor","CombinedContext","baseKey","operation","initial","newLeft","Random","defaultPlatformRandom","accumulator","until","checkRangeBounds","fastLog2","bitCount","nLow","nHigh","rnd","doubleFromParts","r1","nextDown","steps","remainder","vr","seed","boundsErrorMessage","seed1","seed2","uppercaseChar","newIndent","lines","isBlank","line","checkIndexOverflow","isWhitespace","int","checkRadix","firstChar","limitBeforeMul","digitOf","digit","limitForMaxRadix","NumberFormatException","chars","indices","indexOfAny","charArrayOf","currentStartIndex","strings","findAnyOf","currentIndex","second","DelimitedRangesSequence","asList","delimiters","splitToSequence","v0","takeUpperBits","nextSearchIndex","groupValues","initializer","isInitialized","InitializedLazyImpl","Pair","that","sortWith","type","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","instance","UnsafeLazyImpl","source","rangeSize","set","subrange","output","delegate","NullPointerException","round","intClass","doubleClass","booleanClass","functionClass","booleanArrayClass","charArrayClass","byteArrayClass","shortArrayClass","intArrayClass","longArrayClass","floatArrayClass","doubleArrayClass","arrayClass","anyClass","throwableClass","toByteOrNull","numberFormatError","toIntOrNull","toLongOrNull","error","stackTraceToString","emptyMap","ReversedList","createCoroutineUnintercepted","replaceIndent","startFound","missingDelimiterValue","delimiter","lastIndexOfAny","currentOffset","isLimited","isNode","NodeJsOutput","BufferedOutputToConsoleLog","Comparator","specifier","rgba","backBuffer","swap","action","existingColor","Color","color","lazy","runBlocking","Scope","alwaysCheckMediumPrecision","MEDIUM_PRECISION_FLOAT_MAX","isEnable","tag","notifyWatchers","watcher","printStackTrace","properties","toBoolean","toLong","toDouble","List","split","defaultValue","system","asIterable","prefixes","suffixes","arrayListOf","trim","trimmed","firstIndexOfDelimiterPattern","delimiterToRegex","shouldBreak","matchResult","removePrefix","lastToken","nextToken","tokens","wrappers","token","wrapper","System","XMLHttpRequest","request","open","onload","readyState","status","responseText","onerror","send","continuation","dependencyRegistry","canonicalName","staticComponent","contentRoots","window","location","href","contentRoot","requestTextOrNull","text","workingDir","extensions","substringBeforeLast","substringAfterLast","splitAndTrim","removeSuffix","toPath","lineCounter","indexOfDelimiter","lineKey","lineValue","original","repeat","trailingChar","oldSuffix","newSuffix","task","elapsedTime","newDelay","MutablePair","defaultSecondValue","decimalRegex","integerRegex","booleanRegex","primitiveClasses","lastIndexOfDot","mapOf","Artifact","includeExternals","createCanonicalName","dependency","moduleComponents","componentConstructor","addCanonicalName","navigator","userAgent","ComponentRegistry","ContainerBuilder","builder","registry","existingContainer","includes","Dependency","id","DependencyBuilder","useConfig","resources","artifacts","addAll","staticBlocks","distinct","artifactId","simpleNames","componentProvidersToken","canonicalNames","componentKey","component","components","CONTAINER_COMPONENT_KEY","MODULE_COMPONENT_KEY","listeners","existingComponent","runtime","containerProvider","proxyType","ModuleNotFoundException","existingModule","includedModule","destroy","features","plugin","feature","containerComponents","containerComponentConstructor","containerComponent","awaitProxies","proxy","container","Container","newContainer","artifact","staticBlock","containers","componentProviders","DefaultArtifact","DependencyRegistry","namespaces","namespace","pluginDependency","featureCanonicalNames","providersFirstComparator","ModuleBuilder","runtimeScope","moduleProvider","toMutableList","onCreateComponent","primaryModule","includedModules","includedComponent","componentProvider","destroyModuleBlock","onDeleteComponent","destroyListeners","destroyListener","dependencyBuilder","lastCanonicalName","Module","newModule","DefaultContainer","DefaultModule","ModuleProvider","complete","initContainerBlock","initModuleBlock","completeModuleBlock","isDefaultConfigPackage","RuntimeBuilder","runtimeBuilder","proxyScope","ContainerRegistry","Runtime","feature2","feature1","toMap","path","Content","resourceCanonicalName","writer","resource","ResourceNotFoundException","isInstrumentationEnabled","reader","existingResources","existingResource","resourceTag","parseQueue","contentType","ContentTypeNotFoundException","manifest","divide","rmlTagName","attributeName","currentRmlTagName","canonicalClassNameByKey","simpleClassNameByKey","superCanonicalClassNameByKey","rmlTagNameByCanonicalClassName","attributesByTagName","rmlTagType","canonicalClassName","superCanonicalClassName","toSimpleName","isClassPrimitive","simpleClassName","superRmlTagName","superRmlTagNames","superAttributes","superAttribute","attributeType","INTERNAL","tagName","ResourceAttribute","attribute","attributes","parent","filePath","children","manifestFile","props","Resource","files","child","idOrNull","childId","UNDEFINED_RESOURCE_PATH","PropertyDelegate","SystemPropertyDelegate","isUserAgentMobile","devicePixelRatio","document","querySelector","mainCanvas","parentElement","titleBarHeight","innerHeight","screen","height","width","fullscreenElement","style","outerHeight","pxToInt","outerWidth","keyboardHeight","cssText","epsilon","top","bottom","roundToInt","glWidth","glHeight","currentElement","toRadians","degree","cos","radians","sin","PI","assignIdentity","cosDeg","sinDeg","IdentityMatrixArray16","ZeroMatrixArray16","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","translation","z","tx","ty","tz","dx","dy","dz","scale","sx","sy","sfactor","sz","far","near","ox","oy","oz","fovy","aspectRatio","t2","matrix0","vertex0","direction","up","vertex1","vertex2","vertex3","vectorZ","normalize","vectorX","vectorY","angle","ROTATION_MATRIX","ANGLE","axis","trimIndent","epsilonMediumPrecision","Size","rectangle","x1","y2","Transform","Vector2","point","vector","temp","isRectangleValid","toBits","Unit","origin","viewport","matrix","update","scalar","w","h","ratio","point1","point2","len2","toPixelPerfectFloat","p1","p2","z1","z2","float","array16","body","Delegate","loadBody","registerEscapeListener","Property","delegateProperty","BufferedList","frameCount","oldTasks","oldTask","newTasks","newTask","applicationScopeModule","controllers","controller","tasksToRepeatOnUpdateApplication","updateTasksWithDelay","tasksWithPeriodToRepeatOnUpdate","tasksWithPeriodToRepeatOnUpdateInitial","tasksToRunOnUpdate","tasksWithDelayToRunOnUpdate","listener","acceptEvent","onCreateApplication","onStartApplication","onResumeApplication","onPauseApplication","onStopApplication","onDestroyApplication","tasksToRepeatOnStartLoading","tasksToRunOnCompleteLoading","tasksToRepeatOnBuildApplication","delay","period","readRmlResource","rmlContent","rmlResource","initRmlBuilder","rmlTag","simpleKey","ApplicationComponent","appModule","RootElementProxy","rootElement","HTMLCanvasElementProxy","loaderLabel","LoaderLabelProxy","titlebar","TitlebarProxy","closeButton","CloseButtonProxy","splashImage","SplashImageProxy","dialogContent","addEventListener","setupFullScreenSize","onChangeCssProperty","setup","entering","ResourceSchema","clearCaches","configPackages","configPackage","toConfigPath","textContent","configPath","parseProperties","packageId","RmlFile","readTextOrNull","rootRmlTag","currentRmlTag","attributeKey","RmlParserState","toCharArray","rmlSource","isDefault","toTagOpen","isTagOpen","isAttributeKey","toAttributeValue","isAttributeValue","RmlParserException","toAttributeKey","attributeValue","toDefault","parentRmlTag","RmlContent","RmlReader","consumeString","useBackSlashChar","shouldAppendChar","hasExtension","resourcePath","Layout","Surface","sizeProperty","titleProperty","invalidate","toGlobalCoordinates","camera","Rectangle","resolveTransform","useCamera","localX","cameraX","localY","cameraY","globalX","globalY","surface","HtmlElementProxy","answer","WindowPlugin","updateControllers","isActive","updateDelegate","updateTasks","layout","views","layoutViews","view","replaceWith","newOrientation","WindowInvalidateListener","setHtmlCanvasSize","clientWidth","clientHeight","updateLayout","provide","requestAnimationFrame","isUserAgentNotMobile","keep","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","launch","GlobalScope","jsScreen","getBoundingClientRect","setPosition","htmlElement","setSize","viewType","existingElement","classList","event","containsRecursively","changedTouches","touch","clientX","clientY","display","applyCssAttribute","getPropertyValue","setProperty","currentKey","setTimeout","currentValue","innerWidth","title","TextContent","existingText","loadingQueue","releaseQueue","contentTypes","coordinates","rectangleResult","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","args","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","thisRef","encoder","Attribute","trueValue","falseValue","BooleanEncoder","tickerEncode","EnumEncoder","realValue","valuesMap","joinToString","stringSetDecode","StringAttribute","StringSetAttribute","BooleanAttribute","TickerAttribute","EnumAttribute","buttonFormEncTypeValues","buttonFormMethodValues","buttonTypeValues","commandTypeValues","dirValues","draggableValues","formEncTypeValues","formMethodValues","iframeSandboxValues","inputFormEncTypeValues","inputFormMethodValues","inputTypeValues","keyGenKeyTypeValues","runAtValues","textAreaWrapValues","thScopeValues","coerceAtLeast","mapCapacity","capacity","mappings","maxOrNull","maxCode","rmlFile","rmlSchema","link","linkRmlTag","findPropertyByIdPathOrNull","idPath","currentProperty","ancestor","toFilePath","Inner","findLinkOrNull","Super","rmlTagEndObject","appendChildResourceTag","startObject","scope","nest","childEndObject","removeChildResourceTag","endObject","rmlTagByEndObject","endObjectByRmlTag","propertyEndObject","rmlTagStartObject","docketKey","docketName","toIdPath","findPropertyByIdPath","RmlResource","forEachResourceAttribute","builderCanonicalName","interpreter","imports","script","localVariables","isNotEmpty","splitWithWrappers","ScriptLeftOperator","ScriptRightOperator","ScriptOperator","firstIndexOfOpenBrace","lastIndexOfCloseBrace","actionId","lastDotIndex","ScriptSyntaxException","scriptLine","functionRegex","addFunction","replaceFirst","ScriptExpression","expressions","actionDirective","functionSignature","indexOfOpenBracket","indexOfCloseBracket","indexOfOpenCurlyBracket","functions","ScriptFunction","argsList","functionId","ScriptResult","findScriptOrNull","parseSource","expressionRegex","matchResults","executeResult","ScriptCall","eval","importKey","docketAction","localVariable","scriptResultOf","math","scriptCall","localVariableName","Formula","calculate","validateVarName","varName","findScript","primitiveValue","isWrapped","isInteger","isDouble","ScriptInterpreter","ApplicationController","resourcesThatAreNotReallyLoaded","resourcesThatAreLoadedIndeed","buildApplication","providedResources","mainProject","mainDocument","resourcePaths","resourcesToLoad","resourcesToRelease","FloatBuffer","isMedium","Logger","logger","Uniforms","Attributes","program","isDirty","data","vertexCount","drawCallLimit","drawCallSize","Colors","blackColor","red","green","blue","alpha","usage","toFloatArray","isSmooth","toScissorRectangle","disableScissor","scissor","localRectangle","precision","Precision","lastOrNull","prevRectangle","prevLeft","prevTop","prevRight","prevBottom","IntRectangle","vertexSizeInBytes","stride","verticesPerDraw","vertexSize","vertexShaderSource","pixelShaderSource","vertexShader","shaderPath","withLineNumbers","exitProcess","pixelShader","offsetOf","sampling","Sampling","texture","uniforms","slot","wrappingFunction","minificationFilter","magnificationFilter","b1","i1","f1","f2","f3","f4","rect","sampler","existingLocation","OpenglImpl","gl","getContext","dynamicMapOf","OpenglProxy","Buffer","Program","Opengl","skippedCapabilities","capability","provideOpenglProxy","activeTexture","createProgram","ProgramImpl","bindAttribLocation","attachShader","shader","linkProgram","toIntCode","getProgramParameter","parameter","getShaderParameter","getParameter","shaderSource","compileShader","getProgramInfoLog","emptyString","getShaderInfoLog","useProgram","enableVertexAttribArray","vertexAttribPointer","disableVertexAttribArray","uniformMatrix4fv","copyToArray16","uniform1f","uniform1i","uniform2f","float1","float2","uniform3f","float3","uniform4f","float4","UniformLocation","getUniformLocation","getAttribLocation","drawArrays","drawElements","createTexture","Texture","hasCapability","enable","cullFace","blendFunc","sourceFactor","destinationFactor","blendFuncSeparate","srcRgb","dstRgb","srcAlpha","dstAlpha","blendEquationSeparate","modeRGB","modeAlpha","blendColor","blendEquation","bindTexture","texParameteri","generateMipmap","disable","deleteTexture","deleteBuffer","bindBuffer","bufferData","bufferSubData","mask","clearColor","depthFunc","createShader","Shader","deleteShader","lineWidth","pixelStorei","createBuffer","BufferImpl","ShaderReader","sum","shaderExtension","bundle","replaceSuffix","existsFile","transpiledResourcePath","updateStep","commonBlock","vertexDefinesBlock","vertexUniformsBlock","declaration","vertexAttributes","ShaderAttribute","sizeOf","vertexAttributesBlock","vertexBodyBlock","bodyLine","pixelDefinesBlock","pixelUniformsBlock","varyingAttributes","varyingBlock","pixelBodyBlock","vertexSource","glslBlock","isStandardShaderLibraryIncluded","uniformsBlock","uniformsMediumPrecisionBlock","pixelSource","ShaderSource","ensureLength","exportProperties","linkedMapOf","test1","loadRootElementAsBody","applicationScope","loader","bootstrapResources","bootstrapApplication","ApplicationContext","featureaDir","Context","projectionMatrix","notifyResize","shaderContent","test1Shader","app","bootstrapTest","createErrorType","superErrorClass","JsJodaException","DateTimeException","msg","DateTimeParseException","parsedString","errorIndex","UnsupportedTemporalTypeException","IllegalArgumentException","IllegalStateException","_inheritsLoose","subClass","superClass","_assertThisInitialized","ReferenceError","assert","assertion","requireNonNull","parameterName","requireInstance","_class","abstractMethodFail","methodName","assert$1","freeze","MathUtil","intDiv","roundDown","safeZero","intMod","floorDiv","floorMod","safeAdd","verifyInt","safeToInt","safeSubtract","safeMultiply","_parseInt","_x","compareNumbers","smi","number","_len","numbers","_key","_i","_numbers","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","Enum","_name","_proto","toJSON","TemporalAmount","unit","units","addTo","temporal","subtractFrom","TemporalUnit","duration","isDurationEstimated","isDateBased","isTimeBased","isSupportedBy","dateTime","periodToAdd","between","temporal1","temporal2","Duration","_TemporalAmount","seconds","nanos","_this","_seconds","_nanos","ofDays","days","_create","LocalTime","SECONDS_PER_DAY","ofHours","hours","SECONDS_PER_HOUR","ofMinutes","minutes","SECONDS_PER_MINUTE","ofSeconds","nanoAdjustment","secs","NANOS_PER_SECOND","nos","ofMillis","millis","mos","ofNanos","of","amount","plus","forEach","startInclusive","endExclusive","ChronoUnit","SECONDS","isSupported","ChronoField","NANO_OF_SECOND","startNos","getLong","adjustedEnd","with","parse","dayMatch","hourMatch","minuteMatch","secondMatch","fractionMatch","daysAsSecs","_parseNumber","hoursAsSecs","minsAsSecs","negativeSecs","_parseFraction","ex","parsed","multiplier","errorText","parseFloat","_createSecondsNanos","_createNegateDaysHoursMinutesSecondsNanos","negated","NANOS","nano","withSeconds","withNanos","nanoOfSecond","checkValidIntValue","plusDuration","durationOrNumber","unitOrNumber","plusAmountUnit","plusSecondsNanos","amountToAdd","DAYS","plusNanos","MICROS","MILLIS","plusMillis","plusSeconds","multipliedBy","plusDays","daysToAdd","plusHours","hoursToAdd","plusMinutes","minutesToAdd","secondsToAdd","millisToAdd","nanosToAdd","epochSec","minus","minusDuration","minusAmountUnit","secsToSubtract","nanosToSubtract","amountToSubtract","minusDays","daysToSubtract","minusHours","hoursToSubtract","minusMinutes","minutesToSubtract","minusSeconds","secondsToSubtract","minusMillis","millisToSubtract","minusNanos","multiplicand","dividedBy","divisor","secsMod","toDays","toHours","toMinutes","toMillis","toNanos","totalNanos","otherDuration","cmp","nanoString","rval","YearConstants","_TemporalUnit","estimatedDuration","_duration","FOREVER","e2","TemporalField","baseUnit","rangeUnit","rangeRefinedBy","getFrom","adjustInto","displayName","ValueRange","minSmallest","minLargest","maxSmallest","maxLargest","_minSmallest","_minLargest","_maxLargest","_maxSmallest","isFixed","minimum","largestMinimum","maximum","smallestMaximum","isValidValue","checkValidValue","field","isValidIntValue","isIntValue","_TemporalField","_baseUnit","_rangeUnit","_range","byName","fieldName","prop","DAY_OF_WEEK","ALIGNED_DAY_OF_WEEK_IN_MONTH","ALIGNED_DAY_OF_WEEK_IN_YEAR","DAY_OF_MONTH","DAY_OF_YEAR","EPOCH_DAY","ALIGNED_WEEK_OF_MONTH","ALIGNED_WEEK_OF_YEAR","MONTH_OF_YEAR","YEAR_OF_ERA","YEAR","ERA","NANO_OF_DAY","MICRO_OF_SECOND","MICRO_OF_DAY","MILLI_OF_SECOND","MILLI_OF_DAY","SECOND_OF_MINUTE","SECOND_OF_DAY","MINUTE_OF_HOUR","MINUTE_OF_DAY","HOUR_OF_AMPM","CLOCK_HOUR_OF_AMPM","HOUR_OF_DAY","CLOCK_HOUR_OF_DAY","AMPM_OF_DAY","TemporalQueries","zoneId","ZONE_ID","chronology","CHRONO","PRECISION","zone","ZONE","OFFSET","localDate","LOCAL_DATE","localTime","LOCAL_TIME","TemporalAccessor","query","_query","queryFrom","TemporalQuery","_Enum","createTemporalQuery","queryFromFunction","ExtendedTemporalQuery","_TemporalQuery","ENUMS","DayOfWeek","_TemporalAccessor","_ordinal","dayOfWeek","locale","MONTHS","Month","_value","months","newMonthVal","leapYear","FEBRUARY","APRIL","JUNE","SEPTEMBER","NOVEMBER","minLength","maxLength","firstDayOfYear","leap","JANUARY","MARCH","MAY","JULY","AUGUST","OCTOBER","DECEMBER","firstMonthOfQuarter","IsoChronology","INSTANCE","month","PATTERN","Period","years","_years","_months","_days","ofYears","ofMonths","ofWeeks","weeks","unitAmount","YEARS","startDate","endDate","LocalDate","_parse","yearMatch","monthMatch","weekMatch","withYears","withMonths","withDays","plusYears","yearsToAdd","plusMonths","monthsToAdd","minusYears","yearsToSubtract","minusMonths","monthsToSubtract","normalized","totalMonths","toTotalMonths","splitYears","splitMonths","ParsePosition","_errorIndex","getIndex","setIndex","getErrorIndex","setErrorIndex","EnumMap","_map","otherMap","containsKey","put","retainAll","keyList","keyName","keySet","ResolverStyle","STRICT","SMART","LENIENT","TemporalAdjuster","Temporal","minusAmount","plusAmount","endTemporal","withAdjuster","withFieldValue","adjuster","DefaultInterfaceTemporal","_Temporal","ChronoLocalDate","_DefaultInterfaceTemp","fieldOrUnit","ofEpochDay","toEpochDay","format","formatter","DateTimeFormatter","StringUtil","ZoneId","systemDefault","getAvailableZoneIds","ofOffset","rules","isFixedOffset","Instant","EPOCH","ZoneRules","Fixed","instantOrLocalDateTime","offsetOfInstant","offsetOfLocalDateTime","instant","offsetOfEpochMilli","epochMilli","localDateTime","validOffsets","transition","standardOffset","daylightSavings","isDaylightSavings","isValidOffset","nextTransition","previousTransition","transitions","transitionRules","_ZoneRules","_offset","_proto2","SECONDS_CACHE","ID_CACHE","ZoneOffset","_ZoneId","totalSeconds","_validateTotalSeconds","_totalSeconds","_rules","_id","_buildId","absTotalSeconds","absHours","absMinutes","MINUTES_PER_HOUR","absSeconds","MAX_SECONDS","_validate","offsetId","ofHoursMinutesSeconds","precededByColon","ch1","ch2","ofHoursMinutes","ofTotalSeconds","ofTotalMinutes","totalMinutes","totalSecs","OFFSET_SECONDS","DateTimeBuilder","fieldValues","chrono","date","time","leapSecond","excessDays","dtb","_addFieldValue","getFieldValue0","_putFieldValue0","resolve","resolverStyle","resolverFields","_mergeDate","_mergeTime","_resolveTimeInferZeroes","_resolveInstant","_checkDate","resolveDate","_addObject","val1","val2","ch","_ch","ap","hap","nod","cod","lod","sod","los","_nos","_cos","_los","hod","moh","som","hodVal","mohVal","somVal","nosVal","_hodVal","ofNanoOfDay","_excessDays","ofSecondOfDay","_excessDays2","dateOrTime","offsetSecs","atTime","atZone","INSTANT_SECONDS","_instant","DateTimeParseContext","_constructorSelf","_constructorFormatter","_constructorParam","_caseSensitive","_strict","_parsed","Parsed","symbols","_locale","_symbols","_overrideChronology","decimalStyle","_overrideZone","copy","isStrict","setStrict","strict","setLocale","startOptional","currentParsed","endOptional","successful","isCaseSensitive","setCaseSensitive","caseSensitive","subSequenceEquals","cs1","offset1","cs2","offset2","charEquals","charEqualsIgnoreCase","c1","c2","setParsedField","errorPos","successPos","currentParsedFieldValues","setParsedZone","getParsed","toParsed","setParsedLeapSecond","getEffectiveChronology","dateTimeParseContext","cloned","toBuilder","overrideZone","DateTimePrintContext","localeOrFormatter","_temporal","adjust","_optional","getValueQuery","getValue","setDateTime","IsoFields","QUARTER_DAYS","Field","_isIso","_getWeekRangeByLocalDate","wby","_getWeekBasedYear","_getWeekRangeByYear","THURSDAY","WEDNESDAY","isLeapYear","_getWeek","dow0","doy0","dayOfYear","doyThu0","firstMonDoy0","withDayOfYear","week","year","doy","_dow","DAY_OF_QUARTER_FIELD","_Field","QUARTER_YEARS","qoy","QUARTER_OF_YEAR","moy","curValue","partialTemporal","yearLong","qoyLong","doq","DAY_OF_QUARTER","_qoy","QUARTER_OF_YEAR_FIELD","_Field2","_proto3","WEEK_OF_WEEK_BASED_YEAR_FIELD","_Field3","_proto4","WEEKS","WEEK_BASED_YEARS","wbyLong","WEEK_BASED_YEAR","dowLong","wowby","WEEK_OF_WEEK_BASED_YEAR","dow","plusWeeks","_dow2","WEEK_BASED_YEAR_FIELD","_Field4","_proto5","newWby","resolved","_proto6","added","DecimalStyle","zeroChar","positiveSignChar","negativeSignChar","decimalPointChar","_zeroDigit","_zeroDigitCharCode","_positiveSign","_negativeSign","_decimalSeparator","positiveSign","withPositiveSign","negativeSign","withNegativeSign","zeroDigit","withZeroDigit","decimalSeparator","withDecimalSeparator","convertToDigit","convertNumberToI18N","numericText","diff","convertedText","availableLocales","STANDARD","SignStyle","positive","fixedWidth","NORMAL","ALWAYS","EXCEEDS_PAD","NEVER","NOT_NEGATIVE","TextStyle","isStandalone","FULL_STANDALONE","SHORT_STANDALONE","NARROW_STANDALONE","asStandalone","FULL","SHORT","NARROW","asNormal","CharLiteralPrinterParser","_literal","print","append","CompositePrinterParser","printerParsers","optional","_printerParsers","withOptional","setLength","FractionPrinterParser","minWidth","maxWidth","decimalPoint","fraction","convertToFraction","outputScale","substr","effectiveMin","effectiveMax","minEndPos","maxEndPos","total","moveLeft","convertFromFraction","_min","decimal","EXCEED_POINTS","NumberPrinterParser","signStyle","subsequentWidth","_field","_minWidth","_maxWidth","_signStyle","_subsequentWidth","withFixedWidth","withSubsequentWidth","_isFixedWidth","contextValue","_getValue","negative","effMinWidth","effMaxWidth","pass","parseLen","_parseLen","_setValue","ReducedPrinterParser","_NumberPrinterParser","baseValue","baseDate","_baseValue","_baseDate","absValue","basePart","isFixedWidth","PATTERNS","OffsetIdPrinterParser","noOffsetText","_checkPattern","bufPos","appendChar","noOffsetLen","arrayIndex","parseText","required","converted","INSTANCE_ID","PadPrinterParserDecorator","printerParser","padWidth","padChar","_printerParser","_padWidth","_padChar","preLen","insert","endPos","resultPos","SettingsParser","SENSITIVE","INSENSITIVE","StringLiteralPrinterParser","ZoneRulesProvider","getRules","ZoneRegion","ofId","ZoneIdPrinterParser","description","newContext","nextNextChar","_parsePrefixedOffset","UTC","availableZoneIds","zoneIdTree","ZoneIdTree","createTreeMap","maxParseLength","treeMap","parsedZoneId","parseLength","parsedSubZoneId","isLeaf","prefixPos","sortedZoneIds","ZoneIdTreeMap","_treeMap","idLength","subZoneId","subTreeMap","DateTimeFormatterBuilder","_active","_parent","_padNextWidth","_padNextChar","_valueParserIndex","_of","dtFormatterBuilder","parseCaseSensitive","_appendInternalPrinterParser","parseCaseInsensitive","parseStrict","parseLenient","appendValue","_appendValue1","_appendValue2","_appendValue4","_appendValuePrinterParser","pp","appendValueReduced","_appendValueReducedFieldWidthMaxWidthBaseDate","_appendValueReducedFieldWidthMaxWidthBaseValue","activeValueParser","basePP","_appendInternal","appendFraction","appendInstant","fractionalDigits","InstantPrinterParser","appendOffsetId","appendOffset","appendZoneId","appendPattern","_parsePattern","appendZoneText","appendText","appendLocalizedOffset","appendWeekField","FIELD_MAP","pad","padNext","_parseField","zero","_start","appendLiteral","optionalStart","optionalEnd","BASE_DATE","_padNext1","_padNext2","cpp","_toPrinterParser","toFormatter","inSecs","inNanos","inSec","inNano","zeroSecs","hi","lo","ldt","LocalDateTime","ofEpochSecond","_zeroSecs","_hi","_lo","_ldt","minDigits","maxDigits","ISO_LOCAL_DATE","instantSecs","yearParsed","day","hour","secVal","nanoVal","sec","toEpochSecond","StringBuilder","_str","_decimalStyle","_resolverStyle","_resolverFields","_chrono","_zone","parsedExcessDays","PARSED_EXCESS_DAYS","parsedLeapSecond","PARSED_LEAP_SECOND","ofPattern","withChronology","withLocale","withResolverStyle","_formatTo","appendable","parse1","parse2","_parseToBuilder","_createError","abbr","_parseUnresolved0","parseUnresolved","PARSER","MonthDay","dayOfMonth","_month","_day","now","zoneIdOrClock","now0","nowZoneId","nowClock","Clock","systemDefaultZone","clock","monthOrNumber","ofMonthNumber","ofNumberNumber","parseString","parseStringFormatter","FROM","monthValue","isValidYear","Year","isLeap","withMonth","withDayOfMonth","atYear","isAfter","isBefore","PARSER$1","YearMonth","_year","ofNumberMonth","isSupportedField","isSupportedUnit","PROLEPTIC_MONTH","DECADES","CENTURIES","MILLENNIA","ERAS","_getProlepticMonth","isValidDay","lengthOfMonth","lengthOfYear","adjusterOrField","withYear","newYear","calcMonths","monthsUntil","atDay","atEndOfMonth","PARSER$2","isoYear","parseTextFormatter","isValidMonthDay","monthDay","ofYearDay","atMonth","atMonthMonth","atMonthNumber","atMonthDay","yearsUntil","TemporalAdjusters","firstDayOfMonth","Impl","FIRST_DAY_OF_MONTH","lastDayOfMonth","LAST_DAY_OF_MONTH","firstDayOfNextMonth","FIRST_DAY_OF_NEXT_MONTH","FIRST_DAY_OF_YEAR","lastDayOfYear","LAST_DAY_OF_YEAR","firstDayOfNextYear","FIRST_DAY_OF_NEXT_YEAR","firstInMonth","DayOfWeekInMonth","lastInMonth","dayOfWeekInMonth","RelativeDayOfWeek","nextOrSame","previousOrSame","_TemporalAdjuster","_TemporalAdjuster2","_this2","_dowValue","curDow","dowDiff","_temp","_curDow","daysDiff","_TemporalAdjuster3","relative","_this3","_relative","calDow","_daysDiff","prolepticYear","_updateResolveMap","prolepticMonth","yoeLong","era","dom","_y","_y2","_days2","aw","ad","_y3","_weeks","_days3","_aw","_date","OffsetTime","_time","OffsetDateTime","toOffsetTime","clockOrZone","_now","ofInstant","ofTimeAndOffset","ofNumbers","minute","secsOfDay","epochSecond","ISO_OFFSET_TIME","toNanoOfDay","atDate","_toEpochNano","isEqual","_withLocalTimeOffset","toLocalTime","truncatedTo","nanosUntil","MINUTES","NANOS_PER_MINUTE","HOURS","NANOS_PER_HOUR","HALF_DAYS","withHour","withMinute","withSecond","withNano","withOffsetSameInstant","difference","withOffsetSameLocal","ChronoZonedDateTime","toLocalDate","toInstant","toSecondOfDay","toLocalDateTime","strcmp","thisEpochSec","otherEpochSec","ZonedDateTime","_ChronoZonedDateTime","_dateTime","of2","of3","of8","ofLocal","dt","preferredOffset","trans","offsetAfter","some","validOffset","ofInstant2","ofInstant3","ofStrict","isGap","ofLenient","zdt","_from","__from","ISO_ZONED_DATE_TIME","_resolveLocal","newDateTime","_resolveOffset","withEarlierOffsetAtOverlap","isOverlap","earlierOffset","offsetBefore","withLaterOffsetAtOverlap","laterOffset","withZoneSameLocal","withZoneSameInstant","withFixedOffsetZone","minusWeeks","ofDateTime","ofDateAndTime","ISO_OFFSET_DATE_TIME","atZoneSameInstant","atZoneSimilarLocal","toZonedDateTime","_withDateTimeOffset","_ChronoLocalDate","epochDay","adjustCycles","doyEst","yearEst","zeroDay","DAYS_PER_CYCLE","marchDoy0","marchMonth0","_resolvePreviousValid","_get0","_prolepticMonth","newMonth","weeksToAdd","mjDay","weeksToSubtract","until1","until2","daysUntil","_monthsUntil","packed1","packed2","calcDate","atTime1","atTime4","_atTimeOffsetTime","atStartOfDay","atStartOfDayWithZone","MIDNIGHT","dateTimeAfter","_compareTo0","otherDate","yearValue","dayValue","ChronoLocalDateTime","_ChronoLocalDateTime","_ofEpochMillis","localSecond","localEpochDay","ISO_LOCAL_DATE_TIME","_withDateTime","newDate","newTime","MICROS_PER_DAY","MILLIS_PER_DAY","_plusWithOverflow","totDays","NANOS_PER_DAY","MINUTES_PER_DAY","HOURS_PER_DAY","totNanos","curNoD","newNoD","timeUntil","endTime","atOffset","_hour","_minute","_second","_nanoOfSecond","_nano","secondOfDay","nanoOfDay","ISO_LOCAL_TIME","ham","unitDur","dur","mofd","newMofd","sofd","newSofd","nofd","newNofd","hourValue","minuteValue","secondValue","nanoValue","systemUTC","ofEpochMilli","ISO_INSTANT","MIN_SECONDS","nval","_nval","_plus","_nanosUntil","toEpochMilli","_secondsUntil","secsDiff","nanosDiff","otherInstant","SystemClock","fixed","fixedInstant","FixedClock","baseClock","OffsetClock","withZone","_Clock","Date","getTime","_Clock2","_zoneId","_Clock3","_baseClock","ZoneOffsetTransition","_transition","_offsetBefore","_offsetAfter","dateTimeBefore","durationSeconds","SystemDefaultZoneRules","offsetInMinutes","getTimezoneOffset","offsetInMinutesBeforePossibleTransition","offsetInMinutesAfterPossibleTransition","_throwNotSupported","SystemDefaultZoneId","ZoneIdFactory","SYSTEM_DEFAULT_ZONE_ID_INSTANCE","isInit","MIN","MAX","NOON","_init$k","isoWeekOfWeekyear","isoWeekyear","MONDAY","TUESDAY","FRIDAY","SATURDAY","SUNDAY","EPOCH_0","SYSTEM","BASIC_ISO_DATE","ISO_OFFSET_DATE","ISO_ORDINAL_DATE","ISO_WEEK_DATE","ToNativeJsConverter","zonedDateTime","toDate","convert","NativeJsTemporal","_epochMilli","nativeJs","jsJoda","used","jsJodaExports","use","fn","TextReader","FormulaExpression","operand","operator","markers","ValueOperand","isBoolean","VariableOperand","FormulaOperator","operatorSymbols","sortedWith","operatorPriorityComparator","sortedOperators","variables","operatorToken","currentOperator","operandToken","currentOperand","isOperatorSymbol","toOperand","rightOperand","operatorMap","exprIndex","counter","expressionOperand","sortOperators","leftOperand","updateMarkers","formula","leftHandValue","rightHandValue","Plus","Minus","Multiply","Divide","Equal","Greater","GreaterOrEqual","Less","LessOrEqual","operator1","operator2","importId","ConfigContent","configContent","ConfigReader","asReversed","file","superKey","currentCanonicalName","Config","configFilePath","configFile","initProperties","ConfigFile","propertiesExtension","ResourcePropertyDelegate","InputPlugin","inputListener","eventsFrontBuffer","inputEvent","removeEventListener","InputEvent","scrollX","scrollY","getTimeMillis","DEFAULT_DOUBLE_CLICK_DELAY","shaderProgram","transpileShaderSource","compile"],"mappings":"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zYlC,GAAS,I,GIoEV,WAA8B,EAA9B,M7C6Lc,IAAAonB,IAAmB,cAAU,OAAEthB,GAAFjL,EAAYC,GAAgB,MgFxHlD,eAAiBgC,EAAL,KAAoBA,EAAL,KAAoBA,EAAL,OpE5DjF,IAAAsU,GqEmCkC,M,K9G5HhC,iC,kQmBmFd,2C,0J0Bm0BA,+B,+RlBhxBA,6C,EA/GA,+C,EPwCA,gD,GK26BA,wCsF94BA,gB,GAAA,oBCPA,4C,uFCrCqC,oB,2CC7CF,yB,0BACG,wB,EAGP,yB,EACA,yB,EACC,uB,EAEQ,uB,EAEJ,0B,EACA,0B,EACD,yB,EAGA,yB,EACJ,uB,EAEG,sB,EACD,yB,EAIM,0B,EACL,0B,EAEC,0B,EACE,0B,EAED,uB,EACA,0B,EACH,0B,EACG,yB,EACE,0B,EAIF,0B,EACF,wB,EAIC,0B,EACE,sB,EAoCJ,wB,EAjCE,yB,GACC,yB,GACD,uB,GACA,yB,GACA,0B,GAEE,0B,GACH,yB,GACD,uB,GACE,yB,GAEJ,oB,GACA,yB,GACG,yB,GACK,sB,GAED,sB,GACH,0B,GACC,yB,GACD,yB,GACW,wB,GACV,0B,GACD,yB,GACA,uB,GACE,uB,GAEC,0B,GAEE,0B,GACH,oB,GAGN,wB,GAEC,0B,GAGM,0B,GACA,0B,GAKG,yB,GAEN,yB,GACA,uB,GACD,uB,GACG,uB,GAEJ,wB,GACF,0B,GAEM,uB,GACF,wB,GACH,yB,GACO,yB,GACJ,0B,GACI,0B,GACA,yB,GACH,uB,GACD,uB,GACL,yB,GACA,uB,GACA,yB,GACM,0B,GACJ,0B,GAEE,wB,GACC,0B,GAEE,0B,GACL,wB,GACI,wB,GAEF,sB,GACF,0B,GACA,0B,GACC,0B,GAGH,sB,GAGY,yB,GACb,yB,GAEI,yB,GACD,wB,GAGK,yB,GACN,yB,GACK,iB,GACA,yB,GACC,qB,GACA,0B,8HC1ImB,oB,yCpEKxD,iC,weoBm/BA,K,4Lcx1BA,2B,+YFpFA,+BqC3EA,kC,+pCCgCI,+C,GAAA,4C,G7E1BJ,6B,uBC6EQ,+BCsCR,oD,GAAA,kD,6F4E5DI,6DCrEJ,cAKI,mBpGoFoD,IoGnFpD,0BpGm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7BxF,W,OT6BwF,yBAAAA,S,qES5BxF,W,OT4BwF,0BAAAA,S,qES3BxF,W,OT2BwF,0BAAAA,S,oES1BxF,W,OT0BwF,yBAAAA,S,oESzBxF,W,OTyBwF,yBAAAA,S,qESxBxF,W,OTwBwF,0BAAAA,S,oESvBxF,W,OTuBwF,yBAAAA,S,gEStBxF,W,OTsBwF,qBAAAA,S,yESrBxF,W,OTqBwF,8BAAAA,S,mESpBxF,W,OToBwF,wBAAAA,S,kESnBxF,W,OTmBwF,uBAAAA,S,oESlBxF,W,OTkBwF,yBAAAA,S,mESjBxF,W,OTiBwF,wBAAAA,S,mEShBxF,W,OTgBwF,wBAAAA,S,wESfxF,W,OTewF,6BAAAA,S,mESdxF,W,OTcwF,wBAAAA,S,oESbxF,W,OTawF,yBAAAA,S,oESZxF,W,OTYwF,yBAAAA,S,sESXxF,W,OTWwF,2BAAAA,S,yESVxF,W,OTUwF,8BAAAA,S,qESTxF,W,OTSwF,0BAAAA,S,qESRxF,W,OTQwF,0BAAAA,S,kESPxF,W,OTOwF,uBAAAA,S,qESNxF,W,OTMwF,0BAAAA,S,uESLxF,W,OTKwF,4BAAAA,S,wESJxF,W,OTIwF,6BAAAA,S,wESHxF,W,OTGwF,6BAAAA,S,wESFxF,W,OTEwF,6BAAAA,S,qESDxF,W,OTCwF,0BAAAA,S,mESAxF,W,OTAwF,wBAAAA,S,sESCxF,W,OTDwF,2BAAAA,S,kESExF,W,OTFwF,uBAAAA,S,qESGxF,W,OTHwF,0BAAAA,S,oESIxF,W,OTJwF,yBAAAA,S,sESKxF,W,OTLwF,2BAAAA,S,sESMxF,W,OTNwF,2BAAAA,S,kESOxF,W,OTPwF,uBAAAA,S,oESQxF,W,OTRwF,yBAAAA,S,qESSxF,W,OTTwF,0BAAAA,S,oESUxF,W,OTVwF,yBAAAA,S,oESWxF,W,OTXwF,yBAAAA,S,oESYxF,W,OTZwF,yBAAAA,S,qESaxF,W,OTbwF,0BAAAA,S,sEScxF,W,OTdwF,2BAAAA,S,mESexF,W,OTfwF,wBAAAA,S,kESgBxF,W,OThBwF,sBAAAA,S,oESiBxF,W,OTjBwF,yBAAAA,S,iESkBxF,W,OTlBwF,sBAAAA,S,gESmBxF,W,OTnBwF,qBAAAA,S,gESoBxF,W,OTpBwF,qBAAAA,S,mESqBxF,W,OTrBwF,wBAAAA,S,wESsBxF,W,OTtBwF,6BAAAA,S,oESuBxF,W,OTvBwF,yBAAAA,S,uESwBxF,W,OTxBwF,4BAAAA,S,oESyBxF,W,OTzBwF,yBAAAA,S,qES0BxF,W,OT1BwF,0BAAAA,S,oES2BxF,W,OT3BwF,yBAAAA,S,+ES4BxF,W,OT5BwF,oCAAAA,S,qES6BxF,W,OT7BwF,0BAAAA,S,oES8BxF,W,OT9BwF,yBAAAA,S,oES+BxF,W,OT/BwF,yBAAAA,S,sESgCxF,W,OThCwF,2BAAAA,S,wESiCxF,W,OTjCwF,6BAAAA,S,uESkCxF,W,OTlCwF,4BAAAA,S,yESmCxF,W,OTnCwF,8BAAAA,S,yESoCxF,W,OTpCwF,8BAAAA,S,sESqCxF,W,OTrCwF,2BAAAA,S,+DSsCxF,W,OTtCwF,oBAAAA,S,oESuCxF,W,OTvCwF,yBAAAA,S,gESwCxF,W,OTxCwF,qBAAAA,S,kESyCxF,W,OTzCwF,uBAAAA,S,iES0CxF,W,OT1CwF,sBAAAA,S,2ES2CxF,W,OT3CwF,gCAAAA,S,qES4CxF,W,OT5CwF,0BAAAA,S,uES6CxF,W,OT7CwF,4BAAAA,S,uES8CxF,W,OT9CwF,4BAAAA,S,yES+CxF,W,OT/CwF,8BAAAA,S,0ESgDxF,W,OThDwF,+BAAAA,S,4ESiDxF,W,OTjDwF,iCAAAA,S,0ESkDxF,W,OTlDwF,+BAAAA,S,0ESmDxF,W,OTnDwF,+BAAAA,S,uESoDxF,W,OTpDwF,4BAAAA,S,oESqDxF,W,OTrDwF,yBAAAA,S,oESsDxF,W,OTtDwF,yBAAAA,S,mESuDxF,W,OTvDwF,wBAAAA,S,sESwDxF,W,OTxDwF,2BAAAA,S,+DSyDxF,W,OTzDwF,oBAAAA,S,kES0DxF,W,OT1DwF,uBAAAA,S,gES2DxF,W,OT3DwF,qBAAAA,S,oES4DxF,W,OT5DwF,yBAAAA,S,sES6DxF,W,OT7DwF,2BAAAA,S,oES8DxF,W,OT9DwF,yBAAAA,S,iES+DxF,W,OT/DwF,sBAAAA,S,wESgExF,W,OThEwF,6BAAAA,S,oESiExF,W,OTjEwF,yBAAAA,S,wESkExF,W,OTlEwF,6BAAAA,S,wESmExF,W,OTnEwF,6BAAAA,S,qESoExF,W,OTpEwF,0BAAAA,S,oESqExF,W,OTrEwF,yBAAAA,S,+DSsExF,W,OTtEwF,oBAAAA,S,+DSuExF,W,OTvEwF,oBAAAA,S,+DSwExF,W,OTxEwF,oBAAAA,S,qESyExF,W,OTzEwF,0BAAAA,S,iES0ExF,W,OT1EwF,sBAAAA,S,sES2EjE,WAAQ,WAAA6uB,GAAM,UAAAtY,YAAa,UAAAA,YAAa,UAAAA,YAAa,UAAAA,gB,mEAC5E,W,OT5EwF,wBAAAvW,S,oES6ExF,W,OT7EwF,yBAAAA,S,oES8ExF,W,OT9EwF,yBAAAA,S,sES+ExF,W,OT/EwF,2BAAAA,S,iESgFxF,W,OThFwF,sBAAAA,S,qESiFxF,W,OTjFwF,0BAAAA,S,mESkFxF,W,OTlFwF,wBAAAA,S,mESmFxF,W,OTnFwF,wBAAAA,S,iESoFxF,W,OTpFwF,sBAAAA,S,iESqFxF,W,OTrFwF,sBAAAA,S,kESsFxF,W,OTtFwF,uBAAAA,S,oESuFxF,W,OTvFwF,yBAAAA,S,oESwFxF,W,OTxFwF,yBAAAA,S,+DSyFxF,W,OTzFwF,oBAAAA,S,sES0FxF,W,OT1FwF,2BAAAA,S,oES2FxF,W,OT3FwF,yBAAAA,S,2ES4FxF,W,OT5FwF,gCAAAA,S,8DS6FxF,W,OT7FwF,mBAAAA,S,+DS8FxF,W,OT9FwF,oBAAAA,S,kES+FxF,W,OT/FwF,uBAAAA,S,iESgGxF,W,OThGwF,sBAAAA,S,2ESiGxF,W,OTjGwF,gCAAAA,S,oESkGxF,W,OTlGwF,yBAAAA,S,sESmGxF,W,OTnGwF,2BAAAA,S,gESoGxF,W,OTpGwF,qBAAAA,S,qESqGxF,W,OTrGwF,0BAAAA,S,qESsGxF,W,OTtGwF,0BAAAA,S,sESuGxF,W,OTvGwF,2BAAAA,S,sESwGxF,W,OTxGwF,2BAAAA,S,gGe9BxF,eAEW,IADP,EAAgBiO,GAAY,OAC5B,OAAyB,IAAdI,EACP,EAEAtH,GAAA,EAAU,IAAQsH,IA4CI,eAAQ,OAAmB2T,EAAnBA,EAAQ,OAAM,KAAa,IAAK,IA4D1E,eAAsB,O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WT,K,kCAJQ,W,OAA4B,WAAsB,kB,KAClD,M,oBAMS,E,WAAA,4B,iB9NzLkC,2E8N4PW,G9N5PmB,W,qD8NyP7E,QAKJ,c,uBAwFW,W,IlBxYA,K,akB2YC,WAAU,G,mDAMF,e,0BAG8B,2C,iDAyHzB,6FACb,IAAJ,IACQ,QACA,cAAK,yC,+CAgBjB,iCACJ,2CAQ0B,oBAGlB,EAHkB,WAIR,QAJQ,WAKtB,IJrlBA,wF,2DuBwMY,I,QAGI,gB,iClBjOhB,wB,WACI,M,oBAsCJ,E,WACM,oB,WAAF,InBoBR,c,mBmB/CA,c,yBAAqB,K,qBACK,W,2BAGtB,cAEJ,cAAO,E,gIO0LqB,O,4BAW5B,cAhH2C,c,iEA8H/C,iBAA+D,YAAqB,EAArB,G,0DAIhC,iC,uCAGQ,eAAiB,G,yLYpQxD,cAAuD,c,kCAQvD,W,qCCiBwB,G,KAGX,c,sFpBmCL,4BAA0C,sC,yFOuJ1C,+BACwC,MAEpC,mC,cAAiB,cAAO,sB,MAES,a,wBAArC,E,cAEI,+B,4BzNhFR,oByNoFgB,EzNpFhB,WyNoF8C,mBzNpF9C,iB,4CyN+FgB,M,oBAAZ,E,WACA,sB,WACO,MA/GkC,iC,MAgBT,8C,0EAgHqE,cAAU,MACnH,EADmH,mDAUnH,G,qCAEA,4D,4DAGA,K,6IAOI,EAAW,iB,sJAKW,M,wNY5QoD,M,4CAElF,0C,ICNa,aAAc,wBAAa,gB,aAKpC,OAJI,Y,EAAA,E,WDUR,OAF4B,QAE5B,ICVQ,SASK,aAAY,iC,wBAf4C,Y,EAe/B,E,EAAA,KAHlC,W,OAAA,EAA+D,2BAA4B,KAA3F,IAGkC,O,mHAKtC,S,gDAII,gBCzB0C,qBDyBvB,uB,oBAInB,E,uCAAQ,M,YAEZ,c,OACmB,OAAf,IACA,O,iBAMJ,QAA8D,Q,MACF,qC,WAAQ,8DE5CpE,oBAEI,EAFJ,mD,YCGI,c,OAOY,WANR,OAEI,G,6BAOoC,gB,6CCbhD,mC,uGCIA,gBAAqC,uC,oEAM8D,U,gLjD8DzE,gB,mBAI2B,I,mCACtC,Q,CAAA,gB,oKkDpCf,a,cCJyC,gCACzB,iB,cCQR,GAAO,W,yCjCnCX,S,oH4BEgE,gC,6BAEX,G,6BCfzD,gBACI,aAAiD,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","file":"examples-webgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"examples-webgl\"] = factory();\n\telse\n\t\troot[\"examples-webgl\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Object.defineProperty(Array.prototype, 'fill', {\n        value: function (value) {\n\n            // Steps 1-2.\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // Steps 3-5.\n            var len = O.length >>> 0;\n\n            // Steps 6-7.\n            var start = arguments[1];\n            var relativeStart = start >> 0;\n\n            // Step 8.\n            var k = relativeStart < 0 ?\n                    Math.max(len + relativeStart, 0) :\n                    Math.min(relativeStart, len);\n\n            // Steps 9-10.\n            var end = arguments[2];\n            var relativeEnd = end === undefined ?\n                              len : end >> 0;\n\n            // Step 11.\n            var finalValue = relativeEnd < 0 ?\n                             Math.max(len + relativeEnd, 0) :\n                             Math.min(relativeEnd, len);\n\n            // Step 12.\n            while (k < finalValue) {\n                O[k] = value;\n                k++;\n            }\n\n            // Step 13.\n            return O;\n        }\n    });\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'fill', {\n                value: Array.prototype.fill\n            });\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    if (a === null) return \"null\"\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null || !Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    if (arr === null) return 0\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.getCallableRef = function(name, f) {\n    f.callableName = name;\n    return f;\n};\n\nKotlin.getPropertyCallableRef = function(name, paramCount, getter, setter) {\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);\n};\n\nfunction getPropertyRefClass(obj, setter, cache) {\n    obj.$metadata$ = getPropertyRefMetadata(typeof setter === \"function\" ? cache.mutable : cache.immutable);\n    obj.constructor = obj;\n    return obj;\n}\n\nvar propertyRefClassMetadataCache = [\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty0 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty0 }\n        }\n    },\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty1 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty1 }\n        }\n    }\n];\n\nfunction getPropertyRefMetadata(cache) {\n    if (cache.value === null) {\n        cache.value = {\n            interfaces: [cache.implementedInterface()],\n            baseClass: null,\n            functions: {},\n            properties: {},\n            types: {},\n            staticMembers: {}\n        };\n    }\n    return cache.value;\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}",null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toInt().toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toInt().toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toInt().toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toInt().toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /**\n     * Shifts this value left by the [bitCount] number of bits.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n\n    /**\n     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(element: T?): Set<T> = if (element != null) setOf(element) else emptySet()\n\n/**\n * Returns a new read-only set only with those given elements, that are not null.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(vararg elements: T?): Set<T> {\n    return elements.filterNotNullTo(LinkedHashSet())\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n/** Returns true when it's safe to convert this collection to a set without changing contains method behavior. */\nprivate fun <T> Collection<T>.safeToConvertToSet() = size > 2 && this is ArrayList\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperationWith(source: Iterable<T>): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection ->\n            when {\n                source is Collection && source.size < 2 -> this\n                else -> if (this.safeToConvertToSet()) toHashSet() else this\n            }\n        else -> toHashSet()\n    }\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperation(): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection -> if (this.safeToConvertToSet()) toHashSet() else this\n        else -> toHashSet()\n    }\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\nimport kotlin.random.Random\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfSequences\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfLists\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n *\n * @sample samples.collections.Sequences.Transformations.unzip\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(): Sequence<T> = shuffled(Random)\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled\n * using the specified [random] instance as the source of randomness.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(random: Random): Sequence<T> = sequence<T> {\n    val buffer = toMutableList()\n    while (buffer.isNotEmpty()) {\n        val j = random.nextInt(buffer.size)\n        val last = @OptIn(ExperimentalStdlibApi::class) buffer.removeLast()\n        val value = if (j < buffer.size) buffer.set(j, last) else last\n        yield(value)\n    }\n}\n\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\ninternal fun <T, C, R> flatMapIndexed(source: Sequence<T>, transform: (Int, T) -> C, iterator: (C) -> Iterator<R>): Sequence<R> =\n    sequence {\n        var index = 0\n        for (element in source) {\n            val result = transform(checkIndexOverflow(index++), element)\n            yieldAll(iterator(result))\n        }\n    }\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence from the second time.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterable\")\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterableTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T> {\n    return mapIndexed { index, element ->\n        action(index, element)\n        element\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@runningFold) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@runningFoldIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <S, T : S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic fun <S, T : S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Sequences.Transformations.partition\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * \n * @throws NoSuchElementException if no such character is found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character,\n * and returns the char sequence itself afterwards.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S : CharSequence> S.onEachIndexed(action: (index: Int, Char) -> Unit): S {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.uppercase()\n                s2 = s2.uppercase()\n                if (s1 != s2) {\n                    s1 = s1.lowercase()\n                    s2 = s2.lowercase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement = last.toInt()\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first.toInt() else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toInt()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start.toLong(), endInclusive.toLong(), step).toLong()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\n@file:OptIn(ExperimentalUnsignedTypes::class)\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant in its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant in its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant in its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant in its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant in its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant in its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant in its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        throw NotImplementedError()\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The mutable map is invariant in its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters).\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T: Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(@Suppress(\"UNUSED_PARAMETER\") baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        // Using uncropped stack traces due to KT-37563.\n        // Precise stack traces are implemented in JS IR compiler and stdlib\n        js(\"Error\").captureStackTrace(instance);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\") // The arguments have to be slice'd here because of Rhino (see KT-16974)\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array([].slice.call(arguments))\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmName\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"success\")\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"failure\")\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n}\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@InlineOnly\ninternal actual inline fun <R, P, T> (suspend R.(P) -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    param: P,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, param, completion, false)\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError\n@SinceKotlin(\"1.4\")\nconstructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Reverses elements in the list in-place.\n */\npublic actual fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant in its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it !in elements }\n    }\n\n    actual override fun clear(): Unit {\n        checkIsMutable()\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @JsName(\"toJSON\")\n    open fun toJSON(): Any = this.toArray()\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable collection.\n     * Mutable collections that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit { }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant in its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it !in elements }\n    }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            set(last, element)\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n\n        internal override fun checkIsMutable(): Unit = list.checkIsMutable()\n    }\n\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is invariant in its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            // Should check if the map containing this entry is mutable.\n            // However, to not increase entry memory footprint it might be worthwhile not to check it here and\n            // force subclasses that implement `build()` (freezing) operation to implement their own `MutableEntry`.\n//            this@AbstractMutableMap.checkIsMutable()\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    // intermediate abstract class to workaround KT-43321\n    internal abstract class AbstractEntrySet<E : Map.Entry<K, V>, K, V> : AbstractMutableSet<E>() {\n        final override fun contains(element: E): Boolean = containsEntry(element)\n        abstract fun containsEntry(element: Map.Entry<K, V>): Boolean\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        checkIsMutable()\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        checkIsMutable()\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    // TODO: should we implement them this way? Currently it's unspecified in JVM\n                    override fun equals(other: Any?): Boolean {\n                        if (this === other) return true\n                        if (other !is Collection<*>) return false\n                        return AbstractList.orderedEquals(this, other)\n                    }\n\n                    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable map.\n     * Mutable maps that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit {}\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant in its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual constructor(initialCapacity: Int = 0) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    @PublishedApi\n    internal fun build(): List<E> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        checkIsMutable()\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        checkIsMutable()\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        checkIsMutable()\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        checkIsMutable()\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n    override fun toArray(): Array<Any?> = js(\"[]\").slice.call(array)\n\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparison: (T, T) -> Int) {\n    if (getStableSortingIsSupported()) {\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, Comparator(comparison))\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparator: Comparator<in T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> comparator.compare(a, b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, comparator)\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, fromIndex: Int, toIndex: Int, comparator: Comparator<in T>) {\n    if (fromIndex < toIndex - 1) {\n        mergeSort(array.unsafeCast<Array<T>>(), fromIndex, toIndex - 1, comparator)\n    }\n}\n\ninternal fun <T : Comparable<T>> sortArray(array: Array<out T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> a.compareTo(b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, naturalOrder())\n    }\n}\n\nprivate var _stableSortingIsSupported: Boolean? = null\nprivate fun getStableSortingIsSupported(): Boolean {\n    _stableSortingIsSupported?.let { return it }\n    _stableSortingIsSupported = false\n\n    val array = js(\"[]\").unsafeCast<Array<Int>>()\n    // known implementations may use stable sort for arrays of up to 512 elements\n    // so we create slightly more elements to test stability\n    for (index in 0 until 600) array.asDynamic().push(index)\n    val comparison = { a: Int, b: Int -> (a and 3) - (b and 3) }\n    array.asDynamic().sort(comparison)\n    for (index in 1 until array.size) {\n        val a = array[index - 1]\n        val b = array[index]\n        if ((a and 3) == (b and 3) && a >= b) return false\n    }\n    _stableSortingIsSupported = true\n    return true\n}\n\n\nprivate fun <T> mergeSort(array: Array<T>, start: Int, endInclusive: Int, comparator: Comparator<in T>) {\n    val buffer = arrayOfNulls<Any?>(array.size).unsafeCast<Array<T>>()\n    val result = mergeSort(array, buffer, start, endInclusive, comparator)\n    if (result !== array) {\n        for (i in start..endInclusive) array[i] = result[i]\n    }\n}\n\n// Both start and end are inclusive indices.\nprivate fun <T> mergeSort(array: Array<T>, buffer: Array<T>, start: Int, end: Int, comparator: Comparator<in T>): Array<T> {\n    if (start == end) {\n        return array\n    }\n\n    val median = (start + end) / 2\n    val left = mergeSort(array, buffer, start, median, comparator)\n    val right = mergeSort(array, buffer, median + 1, end, comparator)\n\n    val target = if (left === buffer) array else buffer\n\n    // Merge.\n    var leftIndex = start\n    var rightIndex = median + 1\n    for (i in start..end) {\n        when {\n            leftIndex <= median && rightIndex <= end -> {\n                val leftValue = left[leftIndex]\n                val rightValue = right[rightIndex]\n\n                if (comparator.compare(leftValue, rightValue) <= 0) {\n                    target[i] = leftValue\n                    leftIndex++\n                } else {\n                    target[i] = rightValue\n                    rightIndex++\n                }\n            }\n            leftIndex <= median -> {\n                target[i] = left[leftIndex]\n                leftIndex++\n            }\n            else /* rightIndex <= end */ -> {\n                target[i] = right[rightIndex]\n                rightIndex++\n                Unit  // TODO: Fix KT-31506\n            }\n        }\n    }\n\n    return target\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual fun interface Comparator<T> {\n    @JsName(\"compare\")\n    public actual fun compare(a: T, b: T): Int\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\n// Classes that extend HashMap and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@HashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    protected open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\n// Classes that extend HashSet and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    internal val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private inner class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n\n        override fun setValue(newValue: V): V {\n            this@LinkedHashMap.checkIsMutable()\n            return super.setValue(newValue)\n        }\n    }\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n                this@EntrySet.checkIsMutable()\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@LinkedHashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            checkIsMutable()\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n\n        override fun checkIsMutable(): Unit = this@LinkedHashMap.checkIsMutable()\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    @PublishedApi\n    internal fun build(): Map<K, V> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        checkIsMutable()\n\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    @PublishedApi\n    internal fun build(): Set<E> {\n        (map as LinkedHashMap<E, Any>).build()\n        return this\n    }\n\n    internal override fun checkIsMutable(): Unit = map.checkIsMutable()\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage org.w3c.dom\n\npublic external interface ItemArrayLike<out T> {\n    val length: Int\n    fun item(index: Int): T?\n}\n\n/**\n * Returns the view of this `ItemArrayLike<T>` collection as `List<T>`\n */\npublic fun <T> ItemArrayLike<T>.asList(): List<T> = object : AbstractList<T>() {\n    override val size: Int get() = this@asList.length\n\n    override fun get(index: Int): T = when (index) {\n        in 0..lastIndex -> this@asList.item(index).unsafeCast<T>()\n        else -> throw IndexOutOfBoundsException(\"index $index is not in range [0..$lastIndex]\")\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"DEPRECATION_ERROR\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = kotlin.js.Math.clz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal abstract class KClassImpl<T : Any>(\n    internal open val jClass: JsClass<T>\n) : KClass<T> {\n\n    override val qualifiedName: String?\n        get() = TODO()\n\n    override fun equals(other: Any?): Boolean {\n        return other is KClassImpl<*> && jClass == other.jClass\n    }\n\n    // TODO: use FQN\n    override fun hashCode(): Int = simpleName?.hashCode() ?: 0\n\n    override fun toString(): String {\n        // TODO: use FQN\n        return \"class $simpleName\"\n    }\n}\n\ninternal class SimpleKClassImpl<T : Any>(jClass: JsClass<T>) : KClassImpl<T>(jClass) {\n    override val simpleName: String? = jClass.asDynamic().`$metadata$`?.simpleName.unsafeCast<String?>()\n\n    override fun isInstance(value: Any?): Boolean {\n        return jsIsType(value, jClass)\n    }\n}\n\ninternal class PrimitiveKClassImpl<T : Any>(\n    jClass: JsClass<T>,\n    private val givenSimpleName: String,\n    private val isInstanceFunction: (Any?) -> Boolean\n) : KClassImpl<T>(jClass) {\n    override fun equals(other: Any?): Boolean {\n        if (other !is PrimitiveKClassImpl<*>) return false\n        return super.equals(other) && givenSimpleName == other.givenSimpleName\n    }\n\n    override val simpleName: String? get() = givenSimpleName\n\n    override fun isInstance(value: Any?): Boolean {\n        return isInstanceFunction(value)\n    }\n}\n\ninternal object NothingKClassImpl : KClassImpl<Nothing>(js(\"Object\")) {\n    override val simpleName: String = \"Nothing\"\n\n    override fun isInstance(value: Any?): Boolean = false\n\n    override val jClass: JsClass<Nothing>\n        get() = throw UnsupportedOperationException(\"There's no native JS class for Nothing type\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}\n\ninternal class ErrorKClass : KClass<Nothing> {\n    override val simpleName: String? get() = error(\"Unknown simpleName for ErrorKClass\")\n    override val qualifiedName: String? get() = error(\"Unknown qualifiedName for ErrorKClass\")\n\n    override fun isInstance(value: Any?): Boolean = error(\"Can's check isInstance on ErrorKClass\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"getKClass\")\ninternal fun <T : Any> getKClass(jClass: Any /* JsClass<T> | Array<JsClass<T>> */): KClass<T> {\n    return if (js(\"Array\").isArray(jClass)) {\n        getKClassM(jClass.unsafeCast<Array<JsClass<T>>>())\n    } else {\n        getKClass1(jClass.unsafeCast<JsClass<T>>())\n    }\n}\n\n@JsName(\"getKClassM\")\ninternal fun <T : Any> getKClassM(jClasses: Array<JsClass<T>>): KClass<T> = when (jClasses.size) {\n    1 -> getKClass1(jClasses[0])\n    0 -> NothingKClassImpl.unsafeCast<KClass<T>>()\n    else -> ErrorKClass().unsafeCast<KClass<T>>()\n}\n\n@JsName(\"getKClassFromExpression\")\ninternal fun <T : Any> getKClassFromExpression(e: T): KClass<T> =\n    when (jsTypeOf(e)) {\n        \"string\" -> PrimitiveClasses.stringClass\n        \"number\" -> if (jsBitwiseOr(e, 0).asDynamic() === e) PrimitiveClasses.intClass else PrimitiveClasses.doubleClass\n        \"boolean\" -> PrimitiveClasses.booleanClass\n        \"function\" -> PrimitiveClasses.functionClass(e.asDynamic().length)\n        else -> {\n            when {\n                e is BooleanArray -> PrimitiveClasses.booleanArrayClass\n                e is CharArray -> PrimitiveClasses.charArrayClass\n                e is ByteArray -> PrimitiveClasses.byteArrayClass\n                e is ShortArray -> PrimitiveClasses.shortArrayClass\n                e is IntArray -> PrimitiveClasses.intArrayClass\n                e is LongArray -> PrimitiveClasses.longArrayClass\n                e is FloatArray -> PrimitiveClasses.floatArrayClass\n                e is DoubleArray -> PrimitiveClasses.doubleArrayClass\n                e is KClass<*> -> KClass::class\n                e is Array<*> -> PrimitiveClasses.arrayClass\n                else -> {\n                    val constructor = js(\"Object\").getPrototypeOf(e).constructor\n                    when {\n                        constructor === js(\"Object\") -> PrimitiveClasses.anyClass\n                        constructor === js(\"Error\") -> PrimitiveClasses.throwableClass\n                        else -> {\n                            val jsClass: JsClass<T> = constructor\n                            getKClass1(jsClass)\n                        }\n                    }\n                }\n            }\n        }\n    }.unsafeCast<KClass<T>>()\n\n@JsName(\"getKClass1\")\ninternal fun <T : Any> getKClass1(jClass: JsClass<T>): KClass<T> {\n    if (jClass === js(\"String\")) return PrimitiveClasses.stringClass.unsafeCast<KClass<T>>()\n\n    val metadata = jClass.asDynamic().`$metadata$`\n\n    return if (metadata != null) {\n        if (metadata.`$kClass$` == null) {\n            val kClass = SimpleKClassImpl(jClass)\n            metadata.`$kClass$` = kClass\n            kClass\n        } else {\n            metadata.`$kClass$`\n        }\n    } else {\n        SimpleKClassImpl(jClass)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n        this.appendRange(value ?: \"null\", startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun append(value: CharArray): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString()\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun append(value: String): StringBuilder = append(value)\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: String?): StringBuilder {\n        this.string += value ?: \"null\"\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    actual fun capacity(): Int = length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun ensureCapacity(minimumCapacity: Int) {\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun insert(index: Int, value: String): StringBuilder = insert(index, value)\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: String?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val toInsert = value ?: \"null\"\n        this.string = this.string.substring(0, index) + toInsert + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun trimToSize() {\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n// actually \\s is enough to match all whitespace, but \\xA0 added because of different regexp behavior of Rhino used in Selenium tests\npublic actual fun Char.isWhitespace(): Boolean = toString().matches(\"[\\\\s\\\\xA0]\")\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@OptIn(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = lowercaseChar()\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercaseChar(): Char = toString().asDynamic().toLowerCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercase(): String = toString().asDynamic().toLowerCase() as String\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@OptIn(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = uppercaseChar()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic actual fun Char.uppercaseChar(): Char {\n    val uppercase = uppercase()\n    return if (uppercase.length > 1) this else uppercase[0]\n}\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.uppercase(): String = toString().asDynamic().toUpperCase() as String\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toBoolean(): Boolean = this.toBoolean()\n\n/**\n * Returns `true` if this string is not `null` and its content is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.4\")\npublic actual fun String?.toBoolean(): Boolean = this != null && this.lowercase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun String.isNaN(): Boolean = when (this.lowercase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.map { it.value }.joinToString(separator = \"\") + \"g\")\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return nativePattern.findNext(input.toString(), startIndex)\n    }\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return generateSequence({ find(input, startIndex) }, { match -> match.next() })\n    }\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[-\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmName\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\npublic expect fun String.toUpperCase(): String\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic expect fun String.uppercase(): String\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\npublic expect fun String.toLowerCase(): String\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic expect fun String.lowercase(): String\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\npublic expect fun String.capitalize(): String\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\npublic expect fun String.decapitalize(): String\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithChar\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> Char): String {\n    return if (isNotEmpty()) transform(this[0]) + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithCharSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> CharSequence): String {\n    return if (isNotEmpty()) transform(this[0]).toString() + substring(1) else this\n}\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\npublic fun String.matches(regex: String): Boolean {\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || (if (this is String) this else this.toString()).matches(\"^[\\\\s\\\\xA0]+$\")\n\n@OptIn(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean =\n    if (this == null)\n        other == null\n    else if (!ignoreCase)\n        this == other\n    else\n        other != null && this.lowercase() == other.lowercase()\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toUpperCase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toLowerCase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gi\" else \"g\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gi\" else \"g\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"i\" else \"\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"i\" else \"\"), newChar.toString())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns the detailed description of this throwable with its stack trace.\n *\n * The detailed description includes:\n * - the short description (see [Throwable.toString]) of this throwable;\n * - the complete stack trace;\n * - detailed descriptions of the exceptions that were [suppressed][suppressedExceptions] in order to deliver this exception;\n * - the detailed description of each throwable in the [Throwable.cause] chain.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.stackTraceToString(): String = ExceptionTraceBuilder().buildFor(this)\n\n/**\n * Prints the [detailed description][Throwable.stackTraceToString] of this throwable to console error output.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.printStackTrace() {\n    console.error(this.stackTraceToString())\n}\n\n/**\n * Adds the specified exception to the list of exceptions that were\n * suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun Throwable.addSuppressed(exception: Throwable) {\n    if (this !== exception) {\n        val suppressed = this.asDynamic()._suppressed.unsafeCast<MutableList<Throwable>?>()\n        if (suppressed == null) {\n            this.asDynamic()._suppressed = mutableListOf(exception)\n        } else {\n            suppressed.add(exception)\n        }\n    }\n}\n\n/**\n * Returns a list of all exceptions that were suppressed in order to deliver this exception.\n */\n@SinceKotlin(\"1.4\")\npublic actual val Throwable.suppressedExceptions: List<Throwable>\n    get() {\n        return this.asDynamic()._suppressed?.unsafeCast<List<Throwable>>() ?: emptyList()\n    }\n\n\nprivate class ExceptionTraceBuilder {\n    private val target = StringBuilder()\n    private val visited = arrayOf<Throwable>()\n    private var topStack: String = \"\"\n    private var topStackStart: Int = 0\n\n    fun buildFor(exception: Throwable): String {\n        exception.dumpFullTrace(\"\", \"\")\n        return target.toString()\n    }\n\n    private fun hasSeen(exception: Throwable): Boolean = visited.any { it === exception }\n\n    private fun Throwable.dumpFullTrace(indent: String, qualifier: String) {\n        this.dumpSelfTrace(indent, qualifier) || return\n\n        var cause = this.cause\n        while (cause != null) {\n            cause.dumpSelfTrace(indent, \"Caused by: \") || return\n            cause = cause.cause\n        }\n    }\n\n    private fun Throwable.dumpSelfTrace(indent: String, qualifier: String): Boolean {\n        target.append(indent).append(qualifier)\n        val shortInfo = this.toString()\n        if (hasSeen(this)) {\n            target.append(\"[CIRCULAR REFERENCE, SEE ABOVE: \").append(shortInfo).append(\"]\\n\")\n            return false\n        }\n        visited.asDynamic().push(this)\n\n        var stack = this.asDynamic().stack as String?\n        if (stack != null) {\n            val stackStart = stack.indexOf(shortInfo).let { if (it < 0) 0 else it + shortInfo.length }\n            if (stackStart == 0) target.append(shortInfo).append(\"\\n\")\n            if (topStack.isEmpty()) {\n                topStack = stack\n                topStackStart = stackStart\n            } else {\n                stack = dropCommonFrames(stack, stackStart)\n            }\n            if (indent.isNotEmpty()) {\n                // indent stack, but avoid indenting exception message lines\n                val messageLines = if (stackStart == 0) 0 else 1 + shortInfo.count { c -> c == '\\n' }\n                stack.lineSequence().forEachIndexed { index: Int, line: String ->\n                    if (index >= messageLines) target.append(indent)\n                    target.append(line).append(\"\\n\")\n                }\n            } else {\n                target.append(stack).append(\"\\n\")\n            }\n        } else {\n            target.append(shortInfo).append(\"\\n\")\n        }\n\n        val suppressed = suppressedExceptions\n        if (suppressed.isNotEmpty()) {\n            val suppressedIndent = indent + \"    \"\n            for (s in suppressed) {\n                s.dumpFullTrace(suppressedIndent, \"Suppressed: \")\n            }\n        }\n        return true\n    }\n\n    private fun dropCommonFrames(stack: String, stackStart: Int): String {\n        var commonFrames: Int = 0\n        var lastBreak: Int = 0\n        var preLastBreak: Int = 0\n        for (pos in 0 until minOf(topStack.length - topStackStart, stack.length - stackStart)) {\n            val c = stack[stack.lastIndex - pos]\n            if (c != topStack[topStack.lastIndex - pos]) break\n            if (c == '\\n') {\n                commonFrames += 1\n                preLastBreak = lastBreak\n                lastBreak = pos\n            }\n        }\n        if (commonFrames <= 1) return stack\n        while (preLastBreak > 0 && stack[stack.lastIndex - (preLastBreak - 1)] == ' ')\n            preLastBreak -= 1\n\n        // leave 1 common frame to ease matching with the top exception stack\n        return stack.dropLast(preLastBreak) + \"... and ${commonFrames - 1} more common stack frames skipped\"\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is covariant in its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Data class representing a value from a collection or sequence, along with its index in that collection or sequence.\n *\n * @property value the underlying value.\n * @property index the index of the value in the collection or sequence.\n */\npublic data class IndexedValue<out T>(public val index: Int, public val value: T)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nprivate open class ReversedListReadOnly<out T>(private val delegate: List<T>) : AbstractList<T>() {\n    override val size: Int get() = delegate.size\n    override fun get(index: Int): T = delegate[reverseElementIndex(index)]\n}\n\nprivate class ReversedList<T>(private val delegate: MutableList<T>) : AbstractMutableList<T>() {\n    override val size: Int get() = delegate.size\n    override fun get(index: Int): T = delegate[reverseElementIndex(index)]\n\n    override fun clear() = delegate.clear()\n    override fun removeAt(index: Int): T = delegate.removeAt(reverseElementIndex(index))\n\n    override fun set(index: Int, element: T): T = delegate.set(reverseElementIndex(index), element)\n    override fun add(index: Int, element: T) {\n        delegate.add(reversePositionIndex(index), element)\n    }\n}\n\nprivate fun List<*>.reverseElementIndex(index: Int) =\n    if (index in 0..lastIndex) lastIndex - index else throw IndexOutOfBoundsException(\"Element index $index must be in range [${0..lastIndex}].\")\n\nprivate fun List<*>.reversePositionIndex(index: Int) =\n    if (index in 0..size) size - index else throw IndexOutOfBoundsException(\"Position index $index must be in range [${0..size}].\")\n\n\n/**\n * Returns a reversed read-only view of the original List.\n * All changes made in the original list will be reflected in the reversed one.\n * @sample samples.collections.ReversedViews.asReversedList\n */\npublic fun <T> List<T>.asReversed(): List<T> = ReversedListReadOnly(this)\n\n/**\n * Returns a reversed mutable view of the original mutable List.\n * All changes made in the original list will be reflected in the reversed one and vice versa.\n * @sample samples.collections.ReversedViews.asReversedMutableList\n */\n@kotlin.jvm.JvmName(\"asReversedMutable\")\npublic fun <T> MutableList<T>.asReversed(): MutableList<T> = ReversedList(this)\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n@file:OptIn(ExperimentalTypeInference::class)\n\npackage kotlin.sequences\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Builds a [Sequence] lazily yielding values one by one.\n *\n * @see kotlin.sequences.generateSequence\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(block) }\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'sequence { }' function instead.\", ReplaceWith(\"sequence(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildSequence(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(builderAction) }\n\n/**\n * Builds an [Iterator] lazily yielding values one by one.\n *\n * @sample samples.collections.Sequences.Building.buildIterator\n * @sample samples.collections.Iterables.Building.iterable\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T> {\n    val iterator = SequenceBuilderIterator<T>()\n    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)\n    return iterator\n}\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'iterator { }' function instead.\", ReplaceWith(\"iterator(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildIterator(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Iterator<T> = iterator(builderAction)\n\n/**\n * The scope for yielding values of a [Sequence] or an [Iterator], provides [yield] and [yieldAll] suspension functions.\n *\n * @see sequence\n * @see iterator\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.3\")\npublic abstract class SequenceScope<in T> internal constructor() {\n    /**\n     * Yields a value to the [Iterator] being built and suspends\n     * until the next value is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n     */\n    public abstract suspend fun yield(value: T)\n\n    /**\n     * Yields all values from the `iterator` to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence of values returned by the given iterator can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public abstract suspend fun yieldAll(iterator: Iterator<T>)\n\n    /**\n     * Yields a collections of values to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(elements: Iterable<T>) {\n        if (elements is Collection && elements.isEmpty()) return\n        return yieldAll(elements.iterator())\n    }\n\n    /**\n     * Yields potentially infinite sequence of values  to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(sequence: Sequence<T>) = yieldAll(sequence.iterator())\n}\n\n@Deprecated(\"Use SequenceScope class instead.\", ReplaceWith(\"SequenceScope<T>\"), level = DeprecationLevel.ERROR)\npublic typealias SequenceBuilder<T> = SequenceScope<T>\n\nprivate typealias State = Int\n\nprivate const val State_NotReady: State = 0\nprivate const val State_ManyNotReady: State = 1\nprivate const val State_ManyReady: State = 2\nprivate const val State_Ready: State = 3\nprivate const val State_Done: State = 4\nprivate const val State_Failed: State = 5\n\nprivate class SequenceBuilderIterator<T> : SequenceScope<T>(), Iterator<T>, Continuation<Unit> {\n    private var state = State_NotReady\n    private var nextValue: T? = null\n    private var nextIterator: Iterator<T>? = null\n    var nextStep: Continuation<Unit>? = null\n\n    override fun hasNext(): Boolean {\n        while (true) {\n            when (state) {\n                State_NotReady -> {}\n                State_ManyNotReady ->\n                    if (nextIterator!!.hasNext()) {\n                        state = State_ManyReady\n                        return true\n                    } else {\n                        nextIterator = null\n                    }\n                State_Done -> return false\n                State_Ready, State_ManyReady -> return true\n                else -> throw exceptionalState()\n            }\n\n            state = State_Failed\n            val step = nextStep!!\n            nextStep = null\n            step.resume(Unit)\n        }\n    }\n\n    override fun next(): T {\n        when (state) {\n            State_NotReady, State_ManyNotReady -> return nextNotReady()\n            State_ManyReady -> {\n                state = State_ManyNotReady\n                return nextIterator!!.next()\n            }\n            State_Ready -> {\n                state = State_NotReady\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextValue as T\n                nextValue = null\n                return result\n            }\n            else -> throw exceptionalState()\n        }\n    }\n\n    private fun nextNotReady(): T {\n        if (!hasNext()) throw NoSuchElementException() else return next()\n    }\n\n    private fun exceptionalState(): Throwable = when (state) {\n        State_Done -> NoSuchElementException()\n        State_Failed -> IllegalStateException(\"Iterator has failed.\")\n        else -> IllegalStateException(\"Unexpected state of the iterator: $state\")\n    }\n\n\n    override suspend fun yield(value: T) {\n        nextValue = value\n        state = State_Ready\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    override suspend fun yieldAll(iterator: Iterator<T>) {\n        if (!iterator.hasNext()) return\n        nextIterator = iterator\n        state = State_ManyReady\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    // Completion continuation implementation\n    override fun resumeWith(result: Result<Unit>) {\n        result.getOrThrow() // just rethrow exception if it is there\n        state = State_Done\n    }\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element if it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n}\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     *\n     * @sample samples.random.Randoms.nextBits\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextInt\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextLong\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + nextInt()\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     *\n     * @sample samples.random.Randoms.nextBoolean\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextDouble\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextFloat\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random() {\n\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray = defaultRandom.nextBytes(array, fromIndex, toIndex)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\n@OptIn(ExperimentalStdlibApi::class)\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom\ninternal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random() {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than or equal to [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : Iterable<T>, R : ClosedRange<T> =\n    element != null && contains(element)\n\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T : Appendable> T.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this Appendable. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(): Appendable = append('\\n')\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: CharSequence?): Appendable = append(value).appendLine()\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: Char): Appendable = append(value).appendLine()\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Returns the numeric value of the decimal digit that this Char represents.\n * Throws an exception if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if the Char is one of the ASCII decimal digits '0' through '9'.\n * In this case, `this.code - '0'.code` is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@ExperimentalStdlibApi\n@SinceKotlin(\"1.4\")\npublic fun Char.digitToInt(): Int {\n    if (this in '0'..'9') {\n        return this - '0'\n    }\n    throw IllegalArgumentException(\"Char $this is not a decimal digit\")\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this Char is not a valid digit in the specified [radix].\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - The Char is one of the ASCII decimal digits '0' through '9' and its [code] is less than `radix + '0'.code`. In this case, `this.code - '0'.code` is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@ExperimentalStdlibApi\n@SinceKotlin(\"1.4\")\npublic fun Char.digitToInt(radix: Int): Int {\n    return digitToIntOrNull(radix) ?: throw IllegalArgumentException(\"Char $this is not a digit in the given radix=$radix\")\n}\n\n/**\n *\n * Returns the numeric value of the decimal digit that this Char represents, or `null` if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if the Char is one of the ASCII decimal digits '0' through '9'.\n * In this case, `this.code - '0'.code` is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@ExperimentalStdlibApi\n@SinceKotlin(\"1.4\")\npublic fun Char.digitToIntOrNull(): Int? {\n    if (this in '0'..'9') {\n        return this - '0'\n    }\n    return null\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix], or `null` if this Char is not a valid digit in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36`.\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - The Char is one of the ASCII decimal digits '0' through '9' and its [code] is less than `radix + '0'.code`. In this case, `this.code - '0'.code` is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@ExperimentalStdlibApi\n@SinceKotlin(\"1.4\")\npublic fun Char.digitToIntOrNull(radix: Int): Int? {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"Invalid radix: $radix. Valid radix values are in range 2..36\")\n    }\n    if (this in '0'..'9') {\n        val digit = this - '0'\n        return if (digit < radix) digit else null\n    }\n    val a = if (this <= 'Z') 'A' else 'a'\n    val digit = 10 + (this - a)\n    return if (digit in 10 until radix) digit else null\n}\n\n/**\n * Returns the Char that represents this decimal digit.\n * Throws an exception if this value is not in the range `0..9`.\n *\n * If this value is in `0..9`, the decimal digit Char with code `'0'.code + this` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@ExperimentalStdlibApi\n@SinceKotlin(\"1.4\")\npublic fun Int.digitToChar(): Char {\n    if (this in 0..9) {\n        return '0' + this\n    }\n    throw IllegalArgumentException(\"Int $this is not a decimal digit\")\n}\n\n/**\n * Returns the Char that represents this numeric digit value in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this value is not in the range `0 until radix`.\n *\n * If this value is less than `10`, the decimal digit Char with code `'0'.code + this` is returned.\n * Otherwise, the uppercase Latin letter with code `'A'.code + this - 10` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@ExperimentalStdlibApi\n@SinceKotlin(\"1.4\")\npublic fun Int.digitToChar(radix: Int): Char {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"Invalid radix: $radix. Valid radix values are in range 2..36\")\n    }\n    if (this < 0 || this >= radix) {\n        throw IllegalArgumentException(\"Digit $this does not represent a valid digit in radix $radix\")\n    }\n    return if (this < 10) {\n        '0' + this\n    } else {\n        'A' + this - 10\n    }\n}\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\npublic expect fun Char.toLowerCase(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic expect fun Char.lowercaseChar(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic expect fun Char.lowercase(): String\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\npublic expect fun Char.toUpperCase(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic expect fun Char.uppercaseChar(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic expect fun Char.uppercase(): String\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [uppercaseChar] to each character produces the same result\n *   - Applying the method [lowercaseChar] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.uppercaseChar() == other.uppercaseChar()) return true\n    if (this.lowercaseChar() == other.lowercaseChar()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Trims leading whitespace characters followed by [marginPrefix] from every line of a source string and removes\n * the first and the last lines if they are blank (notice difference blank vs empty).\n *\n * Doesn't affect a line if it doesn't contain [marginPrefix] except the first and the last blank lines.\n *\n * Doesn't preserve the original line endings.\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n *\n * @sample samples.text.Strings.trimMargin\n * @see trimIndent\n * @see kotlin.text.isWhitespace\n */\npublic fun String.trimMargin(marginPrefix: String = \"|\"): String =\n    replaceIndentByMargin(\"\", marginPrefix)\n\n/**\n * Detects indent by [marginPrefix] as it does [trimMargin] and replace it with [newIndent].\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n */\npublic fun String.replaceIndentByMargin(newIndent: String = \"\", marginPrefix: String = \"|\"): String {\n    require(marginPrefix.isNotBlank()) { \"marginPrefix must be non-blank string.\" }\n    val lines = lines()\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line ->\n        val firstNonWhitespaceIndex = line.indexOfFirst { !it.isWhitespace() }\n\n        when {\n            firstNonWhitespaceIndex == -1 -> null\n            line.startsWith(marginPrefix, firstNonWhitespaceIndex) -> line.substring(firstNonWhitespaceIndex + marginPrefix.length)\n            else -> null\n        }\n    })\n}\n\n/**\n * Detects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last\n * lines if they are blank (notice difference blank vs empty).\n *\n * Note that blank lines do not affect the detected indent level.\n *\n * In case if there are non-blank lines with no leading whitespace characters (no indent at all) then the\n * common indent is 0, and therefore this function doesn't change the indentation.\n *\n * Doesn't preserve the original line endings.\n *\n * @sample samples.text.Strings.trimIndent\n * @see trimMargin\n * @see kotlin.text.isBlank\n */\npublic fun String.trimIndent(): String = replaceIndent(\"\")\n\n/**\n * Detects a common minimal indent like it does [trimIndent] and replaces it with the specified [newIndent].\n */\npublic fun String.replaceIndent(newIndent: String = \"\"): String {\n    val lines = lines()\n\n    val minCommonIndent = lines\n        .filter(String::isNotBlank)\n        .map(String::indentWidth)\n        .minOrNull() ?: 0\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line -> line.drop(minCommonIndent) })\n}\n\n/**\n * Prepends [indent] to every line of the original string.\n *\n * Doesn't preserve the original line endings.\n */\npublic fun String.prependIndent(indent: String = \"    \"): String =\n    lineSequence()\n        .map {\n            when {\n                it.isBlank() -> {\n                    when {\n                        it.length < indent.length -> indent\n                        else -> it\n                    }\n                }\n                else -> indent + it\n            }\n        }\n        .joinToString(\"\\n\")\n\nprivate fun String.indentWidth(): Int = indexOfFirst { !it.isWhitespace() }.let { if (it == -1) length else it }\n\nprivate fun getIndentFunction(indent: String) = when {\n    indent.isEmpty() -> { line: String -> line }\n    else -> { line: String -> indent + line }\n}\n\nprivate inline fun List<String>.reindent(\n    resultSizeEstimate: Int,\n    indentAddFunction: (String) -> String,\n    indentCutFunction: (String) -> String?\n): String {\n    val lastIndex = lastIndex\n    return mapIndexedNotNull { index, value ->\n        if ((index == 0 || index == lastIndex) && value.isBlank())\n            null\n        else\n            indentCutFunction(value)?.let(indentAddFunction) ?: value\n    }\n        .joinTo(StringBuilder(resultSizeEstimate), \"\\n\")\n        .toString()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MathKt\")\n\n\npackage kotlin.math\n\n\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Double): Double\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Double): Double\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Double): Double\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Double): Double\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Double): Double\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Double): Double\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Double, x: Double): Double\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Double): Double\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Double): Double\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Double): Double\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Double, y: Double): Double\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Double): Double\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Double): Double\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Double): Double\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Double, base: Double): Double\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Double): Double\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Double): Double\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Double): Double\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Double): Double\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Double): Double\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Double): Double\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Double): Double\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Double, b: Double): Double\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Double, b: Double): Double\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(x: Double): Double\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(n: Int): Double\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.absoluteValue: Double\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.sign: Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Double): Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Int): Double\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.ulp: Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextUp(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextDown(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextTowards(to: Double): Double\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToInt(): Int\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToLong(): Long\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Float): Float\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Float): Float\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Float): Float\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Float): Float\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Float): Float\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Float): Float\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Float, x: Float): Float\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Float): Float\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Float): Float\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Float): Float\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Float, y: Float): Float\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Float): Float\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Float): Float\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Float): Float\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Float, base: Float): Float\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Float): Float\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Float): Float\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Float): Float\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Float): Float\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Float): Float\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Float): Float\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Float): Float\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Float, b: Float): Float\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Float, b: Float): Float\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(x: Float): Float\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(n: Int): Float\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.absoluteValue: Float\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.sign: Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Float): Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Int): Float\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToInt(): Int\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToLong(): Long\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Int): Int\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Int, b: Int): Int\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Int, b: Int): Int\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.absoluteValue: Int\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.sign: Int\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Long): Long\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Long, b: Long): Long\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Long, b: Long): Long\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.absoluteValue: Long\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.sign: Int\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].toInt()\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].toInt()\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\n\n/**\n * Defines deep recursive function that keeps its stack on the heap,\n * which allows very deep recursive computations that do not use the actual call stack.\n * To initiate a call to this deep recursive function use its [invoke] function.\n * As a rule of thumb, it should be used if recursion goes deeper than a thousand calls.\n *\n * The [DeepRecursiveFunction] takes one parameter of type [T] and returns a result of type [R].\n * The [block] of code defines the body of a recursive function. In this block\n * [callRecursive][DeepRecursiveScope.callRecursive] function can be used to make a recursive call\n * to the declared function. Other instances of [DeepRecursiveFunction] can be called\n * in this scope with `callRecursive` extension, too.\n *\n * For example, take a look at the following recursive tree class and a deeply\n * recursive instance of this tree with 100K nodes:\n *\n * ```\n * class Tree(val left: Tree? = null, val right: Tree? = null)\n * val deepTree = generateSequence(Tree()) { Tree(it) }.take(100_000).last()\n * ```\n *\n * A regular recursive function can be defined to compute a depth of a tree:\n *\n * ```\n * fun depth(t: Tree?): Int =\n *     if (t == null) 0 else max(depth(t.left), depth(t.right)) + 1\n * println(depth(deepTree)) // StackOverflowError\n * ```\n *\n * If this `depth` function is called for a `deepTree` it produces [StackOverflowError] because of deep recursion.\n * However, the `depth` function can be rewritten using `DeepRecursiveFunction` in the following way, and then\n * it successfully computes [`depth(deepTree)`][DeepRecursiveFunction.invoke] expression:\n *\n * ```\n * val depth = DeepRecursiveFunction<Tree?, Int> { t ->\n *     if (t == null) 0 else max(callRecursive(t.left), callRecursive(t.right)) + 1\n * }\n * println(depth(deepTree)) // Ok\n * ```\n *\n * Deep recursive functions can also mutually call each other using a heap for the stack via\n * [callRecursive][DeepRecursiveScope.callRecursive] extension. For example, the\n * following pair of mutually recursive functions computes the number of tree nodes at even depth in the tree.\n *\n * ```\n * val mutualRecursion = object {\n *     val even: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else odd.callRecursive(t.left) + odd.callRecursive(t.right) + 1\n *     }\n *     val odd: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else even.callRecursive(t.left) + even.callRecursive(t.right)\n *     }\n * }\n * ```\n *\n * @param [T] the function parameter type.\n * @param [R] the function result type.\n * @param block the function body.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic class DeepRecursiveFunction<T, R>(\n    internal val block: suspend DeepRecursiveScope<T, R>.(T) -> R\n)\n\n/**\n * Initiates a call to this deep recursive function, forming a root of the call tree.\n *\n * This operator should not be used from inside of [DeepRecursiveScope] as it uses the call stack slot for\n * initial recursive invocation. From inside of [DeepRecursiveScope] use\n * [callRecursive][DeepRecursiveScope.callRecursive].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(value: T): R =\n    DeepRecursiveScopeImpl<T, R>(block, value).runCallLoop()\n\n/**\n * A scope class for [DeepRecursiveFunction] function declaration that defines [callRecursive] methods to\n * recursively call this function or another [DeepRecursiveFunction] putting the call activation frame on the heap.\n *\n * @param [T] function parameter type.\n * @param [R] function result type.\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic sealed class DeepRecursiveScope<T, R> {\n    /**\n     * Makes recursive call to this [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular recursive call.\n     */\n    public abstract suspend fun callRecursive(value: T): R\n\n    /**\n     * Makes call to the specified [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular call.\n     */\n    public abstract suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S\n\n    @Deprecated(\n        level = DeprecationLevel.ERROR,\n        message =\n        \"'invoke' should not be called from DeepRecursiveScope. \" +\n                \"Use 'callRecursive' to do recursion in the heap instead of the call stack.\",\n        replaceWith = ReplaceWith(\"this.callRecursive(value)\")\n    )\n    @Suppress(\"UNUSED_PARAMETER\")\n    public operator fun DeepRecursiveFunction<*, *>.invoke(value: Any?): Nothing =\n        throw UnsupportedOperationException(\"Should not be called from DeepRecursiveScope\")\n}\n\n// ================== Implementation ==================\n\n@ExperimentalStdlibApi\nprivate typealias DeepRecursiveFunctionBlock = suspend DeepRecursiveScope<*, *>.(Any?) -> Any?\n\nprivate val UNDEFINED_RESULT = Result.success(COROUTINE_SUSPENDED)\n\n@Suppress(\"UNCHECKED_CAST\")\n@ExperimentalStdlibApi\nprivate class DeepRecursiveScopeImpl<T, R>(\n    block: suspend DeepRecursiveScope<T, R>.(T) -> R,\n    value: T\n) : DeepRecursiveScope<T, R>(), Continuation<R> {\n    // Active function block\n    private var function: DeepRecursiveFunctionBlock = block as DeepRecursiveFunctionBlock\n\n    // Value to call function with\n    private var value: Any? = value\n\n    // Continuation of the current call\n    private var cont: Continuation<Any?>? = this as Continuation<Any?>\n\n    // Completion result (completion of the whole call stack)\n    private var result: Result<Any?> = UNDEFINED_RESULT\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<R>) {\n        this.cont = null\n        this.result = result\n    }\n\n    override suspend fun callRecursive(value: T): R = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling the same function that is currently active\n        this.cont = cont as Continuation<Any?>\n        this.value = value\n        COROUTINE_SUSPENDED\n    }\n\n    override suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling another recursive function\n        val function = block as DeepRecursiveFunctionBlock\n        with(this@DeepRecursiveScopeImpl) {\n            val currentFunction = this.function\n            if (function !== currentFunction) {\n                // calling a different function -- create a trampoline to restore function ref\n                this.function = function\n                this.cont = crossFunctionCompletion(currentFunction, cont as Continuation<Any?>)\n            } else {\n                // calling the same function -- direct\n                this.cont = cont as Continuation<Any?>\n            }\n            this.value = value\n        }\n        COROUTINE_SUSPENDED\n    }\n\n    private fun crossFunctionCompletion(\n        currentFunction: DeepRecursiveFunctionBlock,\n        cont: Continuation<Any?>\n    ): Continuation<Any?> = Continuation(EmptyCoroutineContext) {\n        this.function = currentFunction\n        // When going back from a trampoline we cannot just call cont.resume (stack usage!)\n        // We delegate the cont.resumeWith(it) call to runCallLoop\n        this.cont = cont\n        this.result = it\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun runCallLoop(): R {\n        while (true) {\n            // Note: cont is set to null in DeepRecursiveScopeImpl.resumeWith when the whole computation completes\n            val result = this.result\n            val cont = this.cont\n                ?: return (result as Result<R>).getOrThrow() // done -- final result\n            // The order of comparison is important here for that case of rogue class with broken equals\n            if (UNDEFINED_RESULT == result) {\n                // call \"function\" with \"value\" using \"cont\" as completion\n                val r = try {\n                    // This is block.startCoroutine(this, value, cont)\n                    function.startCoroutineUninterceptedOrReturn(this, value, cont)\n                } catch (e: Throwable) {\n                    cont.resumeWithException(e)\n                    continue\n                }\n                // If the function returns without suspension -- calls its continuation immediately\n                if (r !== COROUTINE_SUSPENDED)\n                    cont.resume(r as R)\n            } else {\n                // we returned from a crossFunctionCompletion trampoline -- call resume here\n                this.result = UNDEFINED_RESULT // reset result back\n                cont.resumeWith(result)\n            }\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Maps.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapNotNull\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxByOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOf(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfOrNull(selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.maxOfWith(comparator, selector)\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.maxOfWithOrNull(comparator, selector)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minByOrNull(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minByOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Double): Double {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> Float): Float {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOf(selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOf(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Double): Double? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> Float): Float? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minOfOrNull(selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfOrNull(selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map.\n * \n * @throws NoSuchElementException if the map is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWith(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R {\n    return entries.minOfWith(comparator, selector)\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each entry in the map or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R> Map<out K, V>.minOfWithOrNull(comparator: Comparator<in R>, selector: (Map.Entry<K, V>) -> R): R? {\n    return entries.minOfWithOrNull(comparator, selector)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.minWithOrNull(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWithOrNull(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each entry, providing sequential index with the entry,\n * and returns the map itself afterwards.\n * @param [action] function that takes the index of an entry and the entry itself\n * and performs the action on the entry.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEachIndexed(action: (index: Int, Map.Entry<K, V>) -> Unit): M {\n    return apply { entries.forEachIndexed(action) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","package featurea.utils\n\nimport kotlin.native.concurrent.ThreadLocal\n\ndata class Color(val red: Float, val green: Float, val blue: Float, val alpha: Float, val specifier: String? = null) {\n    constructor(value: Float) : this(value, value, value, value)\n}\n\nfun Color.toResource(): String {\n    return \"#${red.toHexString(255)}${green.toHexString(255)}${blue.toHexString(255)}${alpha.toHexString(255)}\"\n}\n\nfun String.isValidColorResource(): Boolean {\n    val rgba: String = replace(\"#\", \"\")\n    try {\n        rgba.toLong(16)\n        val success: Boolean = rgba.length == 8\n        return success\n    } catch (skip: Throwable) {\n        return false\n    }\n}\n\nfun String.toColor(): Color {\n    return removePrefix(\"#\").toLong(16).toColor()\n}\n\nfun Number.toColor(specifier: String? = null): Color {\n    val rgba: Long = toLong()\n    return ColorCache[rgba, specifier]\n}\n\n/*internals*/\n\n@ThreadLocal\nprivate object ColorCache {\n\n    private val existingColors: MutableMap<Long, Color> = mutableMapOf()\n\n    operator fun get(rgba: Long, specifier: String?): Color {\n        // existing\n        val existingColor: Color? = existingColors[rgba]\n        if (existingColor != null) {\n            return existingColor\n        }\n\n        // newly created\n        val red: Float = (rgba shr 24 and 0xFF).toFloat() / 255f\n        val green: Float = (rgba shr 16 and 0xFF).toFloat() / 255f\n        val blue: Float = (rgba shr 8 and 0xFF).toFloat() / 255f\n        val alpha: Float = (rgba and 0xFF).toFloat() / 255f\n        @Suppress(\"NAME_SHADOWING\")\n        val specifier: String? = if (isInstrumentationEnabled) specifier else null\n        val color: Color = Color(red, green, blue, alpha, specifier)\n        existingColors[rgba] = color\n        return color\n    }\n\n    fun clear() {\n        existingColors.clear()\n    }\n\n}\n","package featurea.utils\n\nimport kotlin.random.Random.Default.nextFloat\n\nobject Colors {\n    val aliceblue: Color by lazy { 0xF0F8FFFF.toColor(\"aliceblue\") }\n    val antiquewhite: Color by lazy { 0xFAEBD7FF.toColor(\"antiquewhite\") }\n    val aqua: Color by lazy { 0x00FFFFFF.toColor(\"aqua\") }\n    val aquamarine: Color by lazy { 0x7FFFD4FF.toColor(\"aquamarine\") }\n    val azure: Color by lazy { 0xF0FFFFFF.toColor(\"azure\") }\n    val beige: Color by lazy { 0xF5F5DCFF.toColor(\"beige\") }\n    val bisque: Color by lazy { 0xFFE4C4FF.toColor(\"bisque\") }\n    val blackColor: Color by lazy { 0x000000FF.toColor(\"black\") }\n    val blanchedalmond: Color by lazy { 0xFFEBCDFF.toColor(\"blanchedalmond\") }\n    val blueColor: Color by lazy { 0x0000FFFF.toColor(\"blue\") }\n    val blueviolet: Color by lazy { 0x8A2BE2FF.toColor(\"blueviolet\") }\n    val brownColor: Color by lazy { 0xA52A2AFF.toColor(\"brown\") }\n    val burlywood: Color by lazy { 0xDEB887FF.toColor(\"burlywood\") }\n    val cadetblue: Color by lazy { 0x5F9EA0FF.toColor(\"cadetblue\") }\n    val chartreuse: Color by lazy { 0x7FFF00FF.toColor(\"chartreuse\") }\n    val chocolate: Color by lazy { 0xD2691EFF.toColor(\"chocolate\") }\n    val coral: Color by lazy { 0xFF7F50FF.toColor(\"coral\") }\n    val cornflowerblue: Color by lazy { 0x6495EDFF.toColor(\"cornflowerblue\") }\n    val cornsilk: Color by lazy { 0xFFF8DCFF.toColor(\"cornsilk\") }\n    val crimson: Color by lazy { 0xDC143CFF.toColor(\"crimson\") }\n    val cyanColor: Color by lazy { 0x00FFFFFF.toColor(\"cyan\") }\n    val darkblue: Color by lazy { 0x00008BFF.toColor(\"darkblue\") }\n    val darkcyan: Color by lazy { 0x008B8BFF.toColor(\"darkcyan\") }\n    val darkgoldenrod: Color by lazy { 0xB8860BFF.toColor(\"darkgoldenrod\") }\n    val darkgray: Color by lazy { 0xA9A9A9FF.toColor(\"darkgray\") }\n    val darkgreen: Color by lazy { 0x006400FF.toColor(\"darkgreen\") }\n    val darkkhaki: Color by lazy { 0xBDB76BFF.toColor(\"darkkhaki\") }\n    val darkmagenta: Color by lazy { 0x8B008BFF.toColor(\"darkmagenta\") }\n    val darkolivegreen: Color by lazy { 0x556B2FFF.toColor(\"darkolivegreen\") }\n    val darkorange: Color by lazy { 0xFF8C00FF.toColor(\"darkorange\") }\n    val darkorchid: Color by lazy { 0x9932CCFF.toColor(\"darkorchid\") }\n    val darkred: Color by lazy { 0x8B0000FF.toColor(\"darkred\") }\n    val darksalmon: Color by lazy { 0xE9967AFF.toColor(\"darksalmon\") }\n    val darkseagreen: Color by lazy { 0x8FBC8FFF.toColor(\"darkseagreen\") }\n    val darkslateblue: Color by lazy { 0x483D8BFF.toColor(\"darkslateblue\") }\n    val darkslategray: Color by lazy { 0x2F4F4FFF.toColor(\"darkslategray\") }\n    val darkturquoise: Color by lazy { 0x00CED1FF.toColor(\"darkturquoise\") }\n    val darkviolet: Color by lazy { 0x9400D3FF.toColor(\"darkviolet\") }\n    val deeppink: Color by lazy { 0xFF1493FF.toColor(\"deeppink\") }\n    val deepskyblue: Color by lazy { 0x00BFFFFF.toColor(\"deepskyblue\") }\n    val dimgray: Color by lazy { 0x696969FF.toColor(\"dimgray\") }\n    val dodgerblue: Color by lazy { 0x1E90FFFF.toColor(\"dodgerblue\") }\n    val firebrick: Color by lazy { 0xB22222FF.toColor(\"firebrick\") }\n    val floralwhite: Color by lazy { 0xFFFAF0FF.toColor(\"floralwhite\") }\n    val forestgreen: Color by lazy { 0x228B22FF.toColor(\"forestgreen\") }\n    val fuchsia: Color by lazy { 0xFF00FFFF.toColor(\"fuchsia\") }\n    val gainsboro: Color by lazy { 0xDCDCDCFF.toColor(\"gainsboro\") }\n    val ghostwhite: Color by lazy { 0xF8F8FFFF.toColor(\"ghostwhite\") }\n    val goldColor: Color by lazy { 0xFFD700FF.toColor(\"gold\") }\n    val goldenrod: Color by lazy { 0xDAA520FF.toColor(\"goldenrod\") }\n    val grayColor: Color by lazy { 0x808080FF.toColor(\"gray\") }\n    val greenColor: Color by lazy { 0x008000FF.toColor(\"green\") }\n    val greenyellow: Color by lazy { 0xADFF2FFF.toColor(\"greenyellow\") }\n    val honeydew: Color by lazy { 0xF0FFF0FF.toColor(\"honeydew\") }\n    val hotpink: Color by lazy { 0xFF69B4FF.toColor(\"hotpink\") }\n    val indianred: Color by lazy { 0xCD5C5CFF.toColor(\"indianred\") }\n    val indigo: Color by lazy { 0x4B0082FF.toColor(\"indigo\") }\n    val ivory: Color by lazy { 0xFFFFF0FF.toColor(\"ivory\") }\n    val khaki: Color by lazy { 0xF0E68CFF.toColor(\"khaki\") }\n    val lavender: Color by lazy { 0xE6E6FAFF.toColor(\"lavender\") }\n    val lavenderblush: Color by lazy { 0xFFF0F5FF.toColor(\"lavenderblush\") }\n    val lawngreen: Color by lazy { 0x7CFC00FF.toColor(\"lawngreen\") }\n    val lemonchiffon: Color by lazy { 0xFFFACDFF.toColor(\"lemonchiffon\") }\n    val lightblue: Color by lazy { 0xADD8E6FF.toColor(\"lightblue\") }\n    val lightcoral: Color by lazy { 0xF08080FF.toColor(\"lightcoral\") }\n    val lightcyan: Color by lazy { 0xE0FFFFFF.toColor(\"lightcyan\") }\n    val lightgoldenrodyellow: Color by lazy { 0xFAFAD2FF.toColor(\"lightgoldenrodyellow\") }\n    val lightgreen: Color by lazy { 0x90EE90FF.toColor(\"lightgreen\") }\n    val lightgrey: Color by lazy { 0xD3D3D3FF.toColor(\"lightgrey\") }\n    val lightpink: Color by lazy { 0xFFB6C1FF.toColor(\"lightpink\") }\n    val lightsalmon: Color by lazy { 0xFFA07AFF.toColor(\"lightsalmon\") }\n    val lightseagreen: Color by lazy { 0x20B2AAFF.toColor(\"lightseagreen\") }\n    val lightskyblue: Color by lazy { 0x87CEFAFF.toColor(\"lightskyblue\") }\n    val lightslategray: Color by lazy { 0x778899FF.toColor(\"lightslategray\") }\n    val lightsteelblue: Color by lazy { 0xB0C4DEFF.toColor(\"lightsteelblue\") }\n    val lightyellow: Color by lazy { 0xFFFFE0FF.toColor(\"lightyellow\") }\n    val lime: Color by lazy { 0x00FF00FF.toColor(\"lime\") }\n    val limegreen: Color by lazy { 0x32CD32FF.toColor(\"limegreen\") }\n    val linen: Color by lazy { 0xFAF0E6FF.toColor(\"linen\") }\n    val magenta: Color by lazy { 0xFF00FFFF.toColor(\"magenta\") }\n    val maroon: Color by lazy { 0x800000FF.toColor(\"maroon\") }\n    val mediumaquamarine: Color by lazy { 0x66CDAAFF.toColor(\"mediumaquamarine\") }\n    val mediumblue: Color by lazy { 0x0000CDFF.toColor(\"mediumblue\") }\n    val mediumorchid: Color by lazy { 0xBA55D3FF.toColor(\"mediumorchid\") }\n    val mediumpurple: Color by lazy { 0x9370DBFF.toColor(\"mediumpurple\") }\n    val mediumseagreen: Color by lazy { 0x3CB371FF.toColor(\"mediumseagreen\") }\n    val mediumslateblue: Color by lazy { 0x7B68EEFF.toColor(\"mediumslateblue\") }\n    val mediumspringgreen: Color by lazy { 0x00FA9AFF.toColor(\"mediumspringgreen\") }\n    val mediumturquoise: Color by lazy { 0x48D1CCFF.toColor(\"mediumturquoise\") }\n    val mediumvioletred: Color by lazy { 0xC71585FF.toColor(\"mediumvioletred\") }\n    val midnightblue: Color by lazy { 0x191970FF.toColor(\"midnightblue\") }\n    val mintcream: Color by lazy { 0xF5FFFAFF.toColor(\"mintcream\") }\n    val mistyrose: Color by lazy { 0xFFE4E1FF.toColor(\"mistyrose\") }\n    val moccasin: Color by lazy { 0xFFE4B5FF.toColor(\"moccasin\") }\n    val navajowhite: Color by lazy { 0xFFDEADFF.toColor(\"navajowhite\") }\n    val navy: Color by lazy { 0x000080FF.toColor(\"navy\") }\n    val oldlace: Color by lazy { 0xFDF5E6FF.toColor(\"oldlace\") }\n    val olive: Color by lazy { 0x808000FF.toColor(\"olive\") }\n    val olivedrab: Color by lazy { 0x6B8E23FF.toColor(\"olivedrab\") }\n    val orangeColor: Color by lazy { 0xFFA500FF.toColor(\"orange\") }\n    val orangered: Color by lazy { 0xFF4500FF.toColor(\"orangered\") }\n    val orchid: Color by lazy { 0xDA70D6FF.toColor(\"orchid\") }\n    val palegoldenrod: Color by lazy { 0xEEE8AAFF.toColor(\"palegoldenrod\") }\n    val palegreen: Color by lazy { 0x98FB98FF.toColor(\"palegreen\") }\n    val paleturquoise: Color by lazy { 0xAFEEEEFF.toColor(\"paleturquoise\") }\n    val palevioletred: Color by lazy { 0xDB7093FF.toColor(\"palevioletred\") }\n    val papayawhip: Color by lazy { 0xFFEFD5FF.toColor(\"papayawhip\") }\n    val peachpuff: Color by lazy { 0xFFDAB9FF.toColor(\"peachpuff\") }\n    val peru: Color by lazy { 0xCD853FFF.toColor(\"peru\") }\n    val pink: Color by lazy { 0xFFC0CBFF.toColor(\"pink\") }\n    val plum: Color by lazy { 0xDDA0DDFF.toColor(\"plum\") }\n    val powderblue: Color by lazy { 0xB0E0E6FF.toColor(\"powderblue\") }\n    val purple: Color by lazy { 0x800080FF.toColor(\"purple\") }\n    val randomColor: Color get() = Color(nextFloat(), nextFloat(), nextFloat(), nextFloat())\n    val redColor: Color by lazy { 0xFF0000FF.toColor(\"red\") }\n    val rosybrown: Color by lazy { 0xBC8F8FFF.toColor(\"rosybrown\") }\n    val royalblue: Color by lazy { 0x4169E1FF.toColor(\"royalblue\") }\n    val saddlebrown: Color by lazy { 0x8B4513FF.toColor(\"saddlebrown\") }\n    val salmon: Color by lazy { 0xFA8072FF.toColor(\"salmon\") }\n    val sandybrown: Color by lazy { 0xFAA460FF.toColor(\"sandybrown\") }\n    val seagreen: Color by lazy { 0x2E8B57FF.toColor(\"seagreen\") }\n    val seashell: Color by lazy { 0xFFF5EEFF.toColor(\"seashell\") }\n    val sienna: Color by lazy { 0xA0522DFF.toColor(\"sienna\") }\n    val silver: Color by lazy { 0xC0C0C0FF.toColor(\"silver\") }\n    val skyblue: Color by lazy { 0x87CEEBFF.toColor(\"skyblue\") }\n    val slateblue: Color by lazy { 0x6A5ACDFF.toColor(\"slateblue\") }\n    val slategray: Color by lazy { 0x708090FF.toColor(\"slategray\") }\n    val snow: Color by lazy { 0xFFFAFAFF.toColor(\"snow\") }\n    val springgreen: Color by lazy { 0x00FF7FFF.toColor(\"springgreen\") }\n    val steelblue: Color by lazy { 0x4682B4FF.toColor(\"steelblue\") }\n    val studioPanelColor: Color by lazy { 0xF6F6F6FF.toColor(\"studioPanel\") }\n    val tan: Color by lazy { 0xD2B48CFF.toColor(\"tan\") }\n    val teal: Color by lazy { 0x008080FF.toColor(\"teal\") }\n    val thistle: Color by lazy { 0xD8BFD8FF.toColor(\"thistle\") }\n    val tomato: Color by lazy { 0xFF6347FF.toColor(\"tomato\") }\n    val transparentColor: Color by lazy { 0x00000000.toColor(\"transparent\") }\n    val turquoise: Color by lazy { 0x40E0D0FF.toColor(\"turquoise\") }\n    val violetColor: Color by lazy { 0xEE82EEFF.toColor(\"violet\") }\n    val wheat: Color by lazy { 0xF5DEB3FF.toColor(\"wheat\") }\n    val whiteColor: Color by lazy { 0xFFFFFFFF.toColor(\"white\") }\n    val whitesmoke: Color by lazy { 0xF5F5F5FF.toColor(\"whitesmoke\") }\n    val yellowColor: Color by lazy { 0xFFFF00FF.toColor(\"yellow\") }\n    val yellowgreen: Color by lazy { 0x9ACD32FF.toColor(\"yellowgreen\") }\n}\n","package featurea.utils\n\nimport kotlin.jvm.JvmName\n\ndata class Options(val name: String?, val workingDir: String?  = null, val args: Map<String, String> = emptyMap())\n\nclass CommandNotFoundException(command: String) : RuntimeException(command)\n\nsuspend fun runCommand(command: String, name: String? = null, log: StringBlock = {}): Int {\n    return runCommand(command, Options(name), timeout = 600_000L, log)\n}\n\nexpect suspend fun runCommand(command: String, options: Options, timeout: Long, log: StringBlock): Int\n\nexpect suspend fun <T> executeAsyncJsAction(action: String, vararg args: String): T\n\n@JvmName(\"parseCommandOptionsVarargs\")\nfun parseCommandOptions(vararg args: String, run: (command: String, options: Array<String>) -> Unit) {\n    parseCommandOptions(args.toList().toTypedArray(), run)\n}\n\nfun parseCommandOptions(args: Array<String>, run: (command: String, options: Array<String>) -> Unit) {\n    if (args.isEmpty()) error(\"args not found\")\n    val command = args[0]\n    val options = if (args.size == 1) emptyArray() else args.copyOfRange(1, args.size)\n    return run(command, options)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage featurea.runtime\n\nimport kotlin.jvm.JvmName\nimport kotlin.reflect.KClass\n\nclass DependencyBuilder(val dependency: Dependency) {\n\n    fun includeContentRoot(contentRoot: () -> String) {\n        dependency.contentRoots.add(contentRoot)\n    }\n\n    fun includeContentRootWithConfig(contentRoot: () -> String) {\n        includeContentRoot(contentRoot)\n        dependency.useConfig = true\n    }\n\n    fun includeContentRootWithDefaultConfig(contentRoot: () -> String) {\n        includeContentRootWithConfig(contentRoot)\n        dependency.isDefaultConfigPackage = true\n    }\n\n    fun include(artifact: Dependency) {\n        dependency.artifacts.add(artifact)\n        if (artifact.useConfig) {\n            dependency.resources.add(artifact)\n        }\n    }\n\n    @JvmName(\"toModule\")\n    infix fun String.to(builder: () -> ModuleBuilder) {\n        val canonicalName = createCanonicalName(this)\n        dependency.modules[canonicalName] = builder\n    }\n\n    @JvmName(\"toContainer\")\n    infix fun String.to(builder: () -> ContainerBuilder) {\n        val canonicalName = createCanonicalName(this)\n        dependency.containers[canonicalName] = builder\n    }\n\n    @JvmName(\"toComponent\")\n    inline infix fun <reified T : Any> String.to(noinline componentConstructor: ComponentConstructor<T>) {\n        val canonicalName = createCanonicalName(this)\n        dependency.moduleComponents[canonicalName] = componentConstructor\n        addCanonicalName(T::class, canonicalName)\n    }\n\n    @JvmName(\"toComponentProvider\")\n    inline infix fun <reified T : Any> String.to(noinline componentProvider: () -> ComponentProvider<T>) {\n        // 1. register as dependency constructor\n        this to { module -> componentProvider().apply { provideComponent(module) } }\n\n        // 2. register as component provider\n        val proxy = T::class\n        dependency.componentProviders[proxy] = dependency.componentProvidersToken.toString()\n    }\n\n    @JvmName(\"toProxy\")\n    inline infix fun <reified T : Any> String.to(proxy: KClass<T>) {\n        val canonicalName = createCanonicalName(this)\n        addCanonicalName(T::class, canonicalName)\n    }\n\n    @Deprecated(\"Component constructor expected but default constructor used\", ReplaceWith(\"Pair(this, that)\"))\n    infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n    fun static(block: StaticBlock) {\n        dependency.staticBlocks.add(0, block) // quickfix todo improve\n    }\n\n}\n\n/*convenience*/\n\ninline fun <reified T : Any> DependencyBuilder.addComponent(simpleName: String, noinline component: ContainerBlock<T>) {\n    val canonicalName = createCanonicalName(simpleName)\n    dependency.containerComponents[canonicalName] = component\n    addCanonicalName(T::class, canonicalName)\n}\n\nfun DependencyBuilder.createCanonicalName(simpleName: String): String {\n    val canonicalName = \"${dependency.artifactId}.${simpleName}\"\n    check(dependency.simpleNames.add(simpleName)) { \"$canonicalName was created already\" }\n    return canonicalName\n}\n\nfun DependencyBuilder.addCanonicalName(type: KClass<*>, canonicalName: String) {\n    dependency.componentProvidersToken.apply {\n        clear()\n        append(canonicalName)\n    }\n    dependency.canonicalNames[type] = canonicalName\n}\n\n// todo refactor `install(plugin)` to `plugin.install()`\ninline fun <reified T : Any> DependencyBuilder.install(plugin: Plugin<T>) {\n    ModulePlugin(this, T::class).plugin()\n}\n","package featurea.runtime\n\nimport kotlin.reflect.KClass\n\ntypealias ContainerBlock<T> = (Container) -> T\n\nclass ContainerNotFoundException(canonicalName: String) : RuntimeException(canonicalName)\n\nclass Container(val dependencyRegistry: DependencyRegistry) {\n\n    lateinit var registry: ContainerRegistry\n    lateinit var key: String\n    lateinit var runtime: Runtime\n    internal var isStaticBlocksInitialized: Boolean = false\n    val listeners = mutableListOf<ContainerListener>()\n    val modules = ComponentRegistry<Module>()\n    val components = ComponentRegistry<Any>()\n\n    fun injectModule(canonicalName: String, module: Module) {\n        check(!modules.contains(module))\n        check(!modules.containsKey(canonicalName))\n        modules.inject(canonicalName, module)\n    }\n\n    fun appendModule(canonicalName: String, module: Module) {\n        check(!modules.contains(module))\n        modules.append(canonicalName, module)\n    }\n\n    fun removeModule(module: Module) {\n        removeModule(module.key)\n    }\n\n    fun removeModule(key: String) {\n        val module: Module? = modules.remove(key)\n        if (module != null) {\n            module.onDestroy()\n        }\n    }\n\n    fun provideComponent(component: Any) {\n        val type: KClass<out Any> = component::class\n        val canonicalName: String = dependencyRegistry.findCanonicalName(type)\n        components.inject(canonicalName, component)\n        for (listener in listeners) {\n            listener.provideComponent(canonicalName, component)\n        }\n        installPlugin(plugin = type)\n    }\n\n    inline fun <reified T : Any> findStaticOrNull(): T? {\n        val canonicalName: String = dependencyRegistry.findCanonicalName(T::class)\n        return findStaticOrNull(canonicalName)\n    }\n\n    fun <T : Any> findStaticOrNull(canonicalName: String): T? {\n        val existingComponent: T? = components.getOrNull(canonicalName)\n        if (existingComponent != null) {\n            return existingComponent\n        }\n\n        for (include in runtime.containerProvider.includes) {\n            val component: T? = include.findStaticOrNull(canonicalName)\n            if (component != null) {\n                return component\n            }\n        }\n\n        return null\n    }\n\n    inline fun <reified T : Any> import(): T {\n        val staticComponent: T? = findStaticOrNull()\n        if (staticComponent == null) {\n            throw DependencyNotFoundException(T::class)\n        }\n        return staticComponent\n    }\n\n    fun <T : Any> import(delegate: Delegate<T>): T {\n        val proxyType: KClass<out Proxy<T>> = delegate.proxyType\n        val canonicalName: String = dependencyRegistry.findCanonicalName(proxyType)\n        val staticComponent: Proxy<T>? = findStaticOrNull(canonicalName)\n        if (staticComponent == null) {\n            throw DependencyNotFoundException(proxyType)\n        }\n        return staticComponent.delegate\n    }\n\n    fun findModule(canonicalName: String): Module {\n        val module: Module? = findModuleOrNull(canonicalName)\n        if (module == null) {\n            throw ModuleNotFoundException(canonicalName)\n        }\n        return module\n    }\n\n    fun findModuleOrNull(canonicalName: String): Module? {\n        val existingModule: Module? = modules.getOrNull(canonicalName)\n        if (existingModule != null) {\n            return existingModule\n        }\n\n        for (includedContainer in runtime.containerProvider.includes) {\n            val includedModule: Module? = includedContainer.findModuleOrNull(canonicalName)\n            if (includedModule != null) {\n                return includedModule\n            }\n        }\n\n        return null\n    }\n\n    fun destroy() {\n        registry.removeContainer(this)\n    }\n\n    /*internals*/\n\n    internal fun onDestroy() {\n        runtime.containerProvider.builder.onDestroyBlock?.invoke(this)\n        for (module in modules) {\n            module.destroy()\n        }\n    }\n\n    private fun installPlugin(plugin: KClass<*>) {\n        val features: List<String>? = dependencyRegistry.features[plugin]\n        if (features != null) {\n            for (feature in features) {\n                val containerComponentConstructor = dependencyRegistry.containerComponents[feature]\n                if (containerComponentConstructor != null) {\n                    val containerComponent = containerComponentConstructor(this)\n                    components.inject(feature, containerComponent)\n                }\n            }\n        }\n    }\n\n}\n\n// constructor\nfun Container(init: ContainerBuilder.() -> Unit = {}): ContainerBuilder = ContainerBuilder().apply(init)\n\n// constructor\nfun DefaultContainer() = Container()\n\n/*convenience*/\n\nval Container.artifact: Dependency get() = dependencyRegistry.artifact\n","package featurea.utils\n\n// quickfix todo improve\n// it's not thread safe but it solves \"modifying while iterating\" issue\n// for now used by Application.tasks, Input.events and Keyboard.events\nclass BufferedList<T : Any?> {\n\n    private var frontBuffer: MutableList<T> = mutableListOf()\n    var backBuffer: MutableList<T> = mutableListOf()\n        private set\n\n    fun add(element: T): Boolean {\n        return backBuffer.add(element)\n    }\n\n    fun addAll(elements: List<T>): Boolean {\n        return backBuffer.addAll(elements)\n    }\n\n    fun swap(): MutableList<T> {\n        with(backBuffer) {\n            backBuffer = frontBuffer\n            frontBuffer = this@with\n        }\n        return frontBuffer\n    }\n\n    // >>  quickfix todo improve\n    fun poll(action: (oldBuffer: List<T>, newBuffer: List<T>) -> Unit) {\n        try {\n            swap()\n            action(frontBuffer, ArrayList(backBuffer))\n        } finally {\n            frontBuffer.clear()\n        }\n    }\n    // <<\n\n    fun clear() {\n        frontBuffer.clear()\n        backBuffer.clear()\n    }\n\n}\n","package featurea.utils\n\nimport featurea.System\n\nexpect fun existsFile(filePath: String): Boolean\n\nexpect fun System.existsFile(filePath: String): Boolean\n\nexpect fun System.findAbsolutePathOrNull(filePath: String): String?\n\nexpect suspend fun System.readTextOrNull(filePath: String, limit: Int = -1): String?\n\nval String.parent: String\n    get() {\n        val lastIndex = lastIndexOf(\"/\")\n        return if (lastIndex == -1) {\n            this\n        } else {\n            substring(0 until lastIndex)\n        }\n    }\n\nval String.name: String\n    get() {\n        val lastIndex = lastIndexOf(\"/\")\n        return if (lastIndex == -1) {\n            this\n        } else {\n            substring(lastIndex + 1)\n        }\n    }\n\nfun String.withExtension(fileExtension: String) = if (endsWith(\".${fileExtension}\")) {\n    this\n} else {\n    val dotIndex = lastIndexOf(\".\")\n    if (dotIndex == -1) {\n        \"${this}.${fileExtension}\"\n    } else {\n        \"${pathWithoutExtension}.${fileExtension}\"\n    }\n}\n\nfun String.hasExtension(vararg extensions: String): Boolean {\n    return hasExtension(extensions.asIterable())\n}\n\nfun String.hasExtension(extensions: Iterable<String>): Boolean {\n    for (extension in extensions) {\n        if (endsWith(\".${extension}\")) {\n            return true\n        }\n    }\n    return false\n}\n\nval String.pathWithoutExtension get() = substringBeforeLast(\".\")\n\nval String.nameWithoutExtension get() = substringBeforeLast(\".\").substringAfterLast(\"/\")\n\nval String.extension: String get() = substringAfterLast(\".\").toLowerCase()\n\nval String.normalizedPath: String get() = replace(\"\\\\\", \"/\").replace(\":\", \"\")\n\nfun String.truncatePath(maxCount: Int, truncateSymbol: String = \".../\"): String {\n    var result: String = \"\"\n    var currentLength: Int = 0\n\n    val tokens = normalizedPath.splitAndTrim(\"/\")\n    for (token in tokens.reversed()) {\n        if (currentLength + token.length >= maxCount) break\n\n        result = \"$token/$result\"\n        currentLength += token.length\n    }\n\n    return \"$truncateSymbol${result.removeSuffix(\"/\")}\"\n}\n\n/*\npath=locationPath:idPath\npath=/Users/dmitrykolesnikovich/workspace/Test.rml:/id1/id2/id3\nlocationPath=/Users/dmitrykolesnikovich/workspace/Test.rml\nidPath=/id1/id2/id3\n*/\nfun String.toFilePath(): String {\n    val tokens = splitAndTrim(\":\")\n    val filePath = if (tokens.size == 1) {\n        split(\":\")[0] // ~/workspace/project: -> ~/workspace/project\n    } else if (tokens.size == 2) {\n        if (tokens[0].length != 1) {\n            tokens[0] // ~/workspace/project:featurea.project -> ~/workspace/project\n        } else {\n            this // D:/workspace/project -> D:/workspace/project\n        }\n    } else {\n        tokens[0] + \":\" + tokens[1] // D:/workspace/project:featurea.project -> D:/workspace/project\n    }\n    return filePath.removeSuffix(\"/\") // ~/workspace/test.mdb/ -> ~/workspace/test.mdb\n}\n\nfun String.toIdPath(): String? {\n    if (startsWith(\":\")) return removePrefix(\":\") // quickfix todo improve\n    val tokens = splitAndTrim(\":\")\n    if (tokens.size == 1) {\n        return null // ~/workspace/project: -> null\n    } else if (tokens.size == 2) {\n        if (tokens[0].length != 1) {\n            return tokens[1] // ~/workspace/project:featurea.project -> featurea.project\n        } else {\n            return null // D:/workspace/project -> null\n        }\n    } else {\n        return tokens[2] // D:/workspace/project:featurea.project -> featurea.project\n    }\n}\n\nfun String.toConfigPath(): String = when {\n    this == \"\" -> \"config\"\n    else -> \"${toPath()}/config\"\n}\n\nfun String.toPath() = replace(\".\", \"/\")\n\nfun String.toPackage() = removePrefix(\"/\").removeSuffix(\"/\").replace(\"/\", \".\")\n\nfun String.isValidFilePath() = !contains(\",\") // quickfix todo improve\n","package featurea.utils\n\nprivate const val MEDIUM_PRECISION_FLOAT_MAX: Float = 65504f // quickfix todo find better place\n\n// used by VertexBuffer: pushAll -> toFloatArray -> clear\nclass FloatBuffer(val limit: Int, private val isMedium: Boolean) {\n\n    private val array: FloatArray = FloatArray(limit)\n    var size: Int = 0\n        private set\n\n    fun pushAll(values: FloatArray) {\n        for (value in values) {\n            push(value)\n        }\n    }\n\n    fun push(value: Float) {\n        if (size >= limit) {\n            error(\"limit exceeded: $limit\")\n        }\n        if (isMedium || alwaysCheckMediumPrecision) {\n            if (value > MEDIUM_PRECISION_FLOAT_MAX) {\n                error(\"precision exceeded: $value\")\n            }\n        }\n        array[size] = value\n        size++\n    }\n\n    fun toFloatArray(): FloatArray {\n        return array\n    }\n\n    fun clear() {\n        size = 0\n    }\n\n}\n","package featurea.utils\n\nimport featurea.utils.Tools.registerTool\n\nconst val GIF_CACHE_PATH: String = \".featurea/cache/gifs\"\nconst val FONT_CACHE_PATH: String = \".featurea/cache/fonts\"\nconst val SHADER_CACHE_PATH: String = \".featurea/cache/shaders\"\n\nvar isInstrumentationEnabled: Boolean = false\n    private set\n\nvar workingDir: String? = null\n    private set\n\nexpect val featureaDir: String // todo replace `featureaDir` with `workingDir`\n\nvar alwaysCheckMediumPrecision: Boolean = false\nvar isStandardShaderLibraryIncluded: Boolean = true\nvar isPointOfInterestGained: Boolean = false // just for debug todo delete this\n\nexpect fun exitProcess(status: Int): Nothing\n\nexpect fun systemProperty(key: String): String?\n\nfun breakpoint() {\n    log(\"breakpoint\")\n}\n\nfun enableInstrumentation(workingDir: String? = null) {\n    isInstrumentationEnabled = true\n    featurea.utils.workingDir = workingDir\n    // >> quickfix todo improve\n    registerTool(\"createFont\")\n    registerTool(\"extractGif\")\n    registerTool(\"packTextures\")\n    // <<\n}\n","package featurea.utils\n\nimport featurea.System\n\nclass Logger(val tag: String) {\n\n    var isEnable: Boolean = false\n\n    fun log(message: String) {\n        if (isEnable) {\n            featurea.utils.log(\"[$tag] $message\")\n        }\n    }\n\n}\n\nfun failure(message: Any?, exit: String? = null) {\n    log(message, isFailure = true)\n    if (exit != null) {\n        error(exit)\n    }\n}\n\nexpect fun log(message: Any?, isFailure: Boolean = false)\n\nfun log(message: Any?, included: SystemTarget) {\n    if (System.target == included) {\n        log(message)\n    }\n}\n\ninline fun <T> logElapsedTime(tag: String, min: Double = 0.0, block: () -> T): T {\n    val startTime = getTimeMillis()\n    val result = block()\n    val finishTime = getTimeMillis()\n    val elapsedTime = finishTime - startTime\n    if (elapsedTime >= min) {\n        log(\"[${tag}] elapsedTime: $elapsedTime\")\n    }\n    return result\n}\n\nprivate var lastMessage: String? = null\n\nfun log(message: String, allowDuplicates: Boolean) {\n    if (allowDuplicates) {\n        log(message)\n    } else if (lastMessage != message) {\n        lastMessage = message\n        log(message)\n    }\n}\n","package featurea.utils\n\nimport kotlin.reflect.KProperty\n\ntypealias PropertyWatcher<T> = (value: T?) -> Unit\n\nclass Property<T>(private var value: T? = null) {\n\n    private val watchers = mutableListOf<PropertyWatcher<T>>()\n\n    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        if (this.value == null && value == null) return\n        if (this.value != value) {\n            this.value = value\n            notifyWatchers()\n        }\n    }\n\n    operator fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        @Suppress(\"UNCHECKED_CAST\")\n        val result: T = value as T\n        return result\n    }\n\n    fun watch(watcher: PropertyWatcher<T>) {\n        watchers.add(watcher)\n    }\n\n    fun watchBlocking(watcher: suspend () -> Unit) {\n        watch {\n            runBlocking {\n                watcher()\n            }\n        }\n    }\n\n    fun notifyWatchers() {\n        for (watcher in watchers) {\n            try {\n                watcher(value)\n            } catch (e: Throwable) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n}\n","package featurea.utils\n\nimport featurea.Bundle\nimport featurea.Properties\nimport featurea.System\nimport kotlin.reflect.KProperty\n\nclass PropertyDelegate<T : Any>(val key: String, val defaultValue: () -> T) {\n\n    inline operator fun <reified T : Any> getValue(properties: Properties, property: KProperty<*>): T {\n        return properties[key] ?: defaultValue() as T\n    }\n\n    inline operator fun <reified T : Any> setValue(properties: Properties, property: KProperty<*>, value: T) {\n        properties[key] = value\n    }\n\n}\n\nclass PropertyDelegateOrNull(val key: String) {\n\n    inline operator fun <reified T : Any> getValue(properties: Properties, property: KProperty<*>): T? {\n        return properties[key]\n    }\n\n    inline operator fun <reified T : Any> setValue(properties: Properties, property: KProperty<*>, value: T?) {\n        properties[key] = value\n    }\n\n}\n\nclass BundlePropertyDelegate<T : Any>(val key: String, val defaultValue: () -> T) {\n\n    inline operator fun <reified T : Any> getValue(bundle: Bundle, property: KProperty<*>): T {\n        return bundle.manifest[key] ?: defaultValue() as T\n    }\n\n    inline operator fun <reified T : Any> setValue(bundle: Bundle, property: KProperty<*>, value: T) {\n        bundle.manifest[key] = value\n    }\n\n}\n\nclass SystemPropertyDelegate<T : Any>(val key: String, val defaultValue: () -> T) {\n\n    inline operator fun <reified T : Any> getValue(system: System, property: KProperty<*>): T {\n        return system.properties[key] ?: defaultValue() as T\n    }\n\n    inline operator fun <reified T : Any> setValue(system: System, property: KProperty<*>, value: T) {\n        system.properties[key] = value\n    }\n\n}\n\nclass SystemPropertyDelegateOrNull(val key: String) {\n\n    inline operator fun <reified T : Any> getValue(system: System, property: KProperty<*>): T? {\n        return system.properties[key]\n    }\n\n    inline operator fun <reified T : Any> setValue(system: System, property: KProperty<*>, value: T?) {\n        system.properties[key] = value\n    }\n\n}\n","package featurea.utils\n\nsealed class Scope {\n\n    abstract val nest: Scope\n\n    object Inner : Scope() {\n        override val nest = Inner\n    }\n\n    object Super : Scope() {\n        override val nest = Outer\n    }\n\n    object Outer : Scope() {\n        override val nest = Outer\n    }\n\n}\n","package featurea.utils\n\ninterface EventListener {\n    fun acceptEvent(): Boolean = true\n}\n\ninline fun <T : EventListener> Iterable<T>.forEachEvent(action: (T) -> Unit) {\n    for (listener in this) if (listener.acceptEvent()) action(listener)\n}\n\ninline fun <T : EventListener> Iterable<T>.acceptFirst(predicate: (T) -> Boolean) {\n    for (listener in this) if (listener.acceptEvent() && predicate(listener)) break\n}\n","package featurea\n\n// quickfix todo replace to Standard Library\nclass Properties : Iterable<Map.Entry<String, Any?>> {\n\n    val map = linkedMapOf<String, Any?>() // it is not private because `get` operator is inline todo make private\n\n    constructor() {\n        // no op\n    }\n\n    constructor(original: Map<String, Any?>) {\n        putAll(original)\n    }\n\n    constructor(vararg original: Pair<String, Any?>) {\n        putAll(*original)\n    }\n\n    fun putAll(original: Map<String, Any?>) {\n        original.toMap(map)\n    }\n\n    fun putAll(vararg original: Pair<String, Any?>) {\n        original.toMap(map)\n    }\n\n    override fun iterator(): Iterator<Map.Entry<String, Any?>> {\n        return map.iterator()\n    }\n\n    inline operator fun <reified T : Any?> get(key: String): T? {\n        val value = map[key] ?: return null\n        return when (T::class) {\n            Boolean::class -> value.toString().toBoolean() as T\n            Byte::class -> value.toString().toByte() as T\n            Int::class -> value.toString().toInt() as T\n            Long::class -> value.toString().toLong() as T\n            Float::class -> value.toString().toFloat() as T\n            Double::class -> value.toString().toDouble() as T\n            String::class -> value as T\n            List::class -> {\n                when (value) {\n                    is List<*> -> value as T\n                    is String -> value.split(\", \") as T\n                    else -> error(\"key: $key, value: $value\")\n                }\n            }\n            else -> error(\"key: $key, value: $value\")\n        }\n    }\n\n    operator fun set(key: String, value: Any?) {\n        map[key] = value\n    }\n\n\n    fun remove(key: String): Any? {\n        return map.remove(key)\n    }\n\n}\n","package featurea.utils\n\nopen class Stack<T> {\n\n    private val data: MutableList<T> = mutableListOf()\n\n    constructor()\n\n    constructor(original: Collection<T>) {\n        data.addAll(original)\n    }\n\n    constructor(vararg original: T) {\n        data.addAll(original)\n    }\n\n    fun isEmpty(): Boolean {\n        return data.isEmpty()\n    }\n\n    fun isNotEmpty(): Boolean {\n        return data.isNotEmpty()\n    }\n\n    fun push(element: T) {\n        data.add(element)\n    }\n\n    fun pop(): T {\n        val element: T = data.removeAt(data.lastIndex)\n        return element\n    }\n\n    fun popOrNull(): T? {\n        if (data.isEmpty()) return null\n        return pop()\n    }\n\n    fun last(): T {\n        return data[data.lastIndex]\n    }\n\n    fun lastOrNull(): T? {\n        if (isEmpty()) {\n            return null\n        }\n        return data[data.lastIndex]\n    }\n\n    val size: Int get() = data.size\n\n    fun clear() {\n        data.clear()\n    }\n\n}","package featurea.utils\n\nimport kotlin.text.startsWith as startsWithSingle\nimport kotlin.text.toFloat as convertStringToFloat\nimport kotlin.text.toInt as convertStringToInt\n\ntypealias StringBlock = (String) -> Unit\n\nconst val emptyString: String = \"\"\n\nfun String?.toFloat(default: Float = 0f): Float {\n    if (this == null || isBlank()) return default\n    try {\n        return convertStringToFloat()\n    } catch (e: Exception) {\n        return default\n    }\n}\n\nfun String?.toInt(default: Int = 0): Int {\n    if (this == null || isBlank()) return default\n    try {\n        return convertStringToInt()\n    } catch (e: Exception) {\n        return default\n    }\n}\n\nfun String?.equals(vararg strings: String): Boolean {\n    if (this == null) return false\n    return strings.any { it == this }\n}\n\nfun String.ensureLength(length: Int, trailingChar: String): String {\n    val delta: Int = length - this.length\n    if (delta <= 0) return this\n    val prefix: String = trailingChar.repeat(delta)\n    return \"$prefix$this\"\n}\n\nfun List<String>.joinToStringWithQuotes(): String {\n    return joinToString(\" \") { \"\\\"$it\\\"\" }\n}\n\nfun String.replaceVariables(vararg tokens: String): String {\n    var result: String = this\n    for (index in tokens.indices step 2) {\n        val variable: String = tokens[index]\n        val replacement: String = tokens[index + 1]\n        result = result.replaceVariable(variable, replacement)\n    }\n    return result\n}\n\nfun String.replaceVariable(variable: String, replacement: String?): String {\n    if (replacement == null) return this\n    return replace(\"\\\\$\\\\{${variable}\\\\}\".toRegex(), replacement) // IntelliJ consider '\\\\' redundant but it's not\n}\n\nfun String.firstLine(): String {\n    val index = indexOf(\"\\n\")\n    if (index == -1) return this\n    else return substring(0, index)\n}\n\nfun String.isWrapped(vararg wrappers: String): Boolean {\n    for (wrapper in wrappers) {\n        if (startsWith(wrapper) && endsWith(wrapper)) {\n            return true\n        }\n    }\n    return false\n}\n\nfun String.startsWith(vararg prefixes: String): Boolean = startsWith(prefixes.asIterable())\n\nfun String.startsWith(prefixes: Iterable<String>): Boolean {\n    prefixes.forEach { if (startsWithSingle(it, true)) return true }\n    return false\n}\n\nfun String.endsWith(vararg suffixes: String): Boolean = endsWith(suffixes.asIterable())\n\nfun String.endsWith(suffixes: Iterable<String>): Boolean {\n    suffixes.forEach { if (endsWith(it, true)) return true }\n    return false\n}\n\nfun StringBuilder.consumeString(): String {\n    val string = toString()\n    clear()\n    return string\n}\n\nfun String.ensureSuffix(suffix: String): String {\n    if (!endsWith(suffix)) return plus(suffix)\n    return this\n}\n\nfun String.appendSuffix(suffix: CharSequence): String {\n    return plus(suffix)\n}\n\nfun String.replaceSuffix(oldSuffix: String, newSuffix: String): String {\n    // quickfix todo revert somehow\n    // >>\n    /*check(endsWith(oldSuffix))*/\n    if (!endsWith(oldSuffix)) return this\n    // <<\n\n    val withoutOldSuffix = substring(0, length - oldSuffix.length)\n    val result = \"${withoutOldSuffix}${newSuffix}\"\n    return result\n}\n\nfun String.substrings(vararg ranges: IntRange): Array<String> = Array(ranges.size) { substring(ranges[it]) }\n\nfun String.toUpperCaseFirst(count: Int = 1): String {\n    val firstToken = substring(0, count)\n    val secondToken = substring(count)\n    val result = firstToken.toUpperCase() + secondToken\n    return result\n}\n\n// quickfix todo improve\nfun String.splitLines(count: Int = 1): List<String> {\n    val lineSeparator = if (contains(\"\\r\")) \"\\r\\n\" else \"\\n\"\n    val delimiter = StringBuilder().apply {\n        repeat(count) { append(lineSeparator) }\n    }.toString()\n    return trim().split(delimiter)\n}\n\n/*\ngiven: this=\"a/b/c/d/e\", delimiter=\"/\", maxTokenCount=4\nresult: \"a\", \"b\", \"c\", \"d/e\"\n1. before first delimiter:   \"a\"\n2. after first delimiter:    \"b\", \"c\"\n3. on break:                 \"d/e\"\n*/\nfun String.splitAndTrim(delimiter: String, limit: Int = 0): MutableList<String> {\n    if (limit < 0) error(\"limit: $limit\")\n    if (isBlank()) return mutableListOf()\n    if (limit == 1) return arrayListOf(this)\n\n    val shouldBreak = limit != 0\n    /*result*/\n    val trimmed = trim()\n    val result = mutableListOf<String>()\n    val firstIndexOfDelimiterPattern = trimmed.indexOf(delimiter)\n    // 0. delimiter does not exist\n    if (firstIndexOfDelimiterPattern == -1) {\n        return arrayListOf(this)\n    }\n    // 1. before first delimiter\n    if (firstIndexOfDelimiterPattern != 0) {\n        result.add(trimmed.substring(0 until firstIndexOfDelimiterPattern))\n    }\n    val regex = delimiter.delimiterToRegex()\n    for (matchResult in regex.findAll(trimmed)) {\n        if (shouldBreak && result.size >= limit - 1) {\n            // 3. on break\n            val lastToken = trimmed.substring(matchResult.range.first).removePrefix(delimiter).trim()\n            if (lastToken.isNotEmpty()) {\n                result.add(lastToken)\n            }\n            break\n        } else {\n            // 2. after first delimiter\n            val nextToken = matchResult.value.removePrefix(delimiter).trim()\n            if (nextToken.isNotEmpty()) {\n                result.add(nextToken)\n            }\n        }\n    }\n    return result\n}\n\n/*internals*/\n\nprivate val String.isRegexSymbol get() = \".?+*^$|\".contains(this)\n\nprivate fun String.delimiterToRegex(): Regex {\n    val symbol = if (this == \"..\") {\n        \"\\\\.\\\\.\" // quickfix todo improve\n    } else if (isRegexSymbol) {\n        \"\\\\$this\"\n    } else {\n        this\n    }\n    return \"$symbol[^$symbol]*\".toRegex()\n}\n","package featurea.utils\n\nimport featurea.System\n\nenum class SystemTarget(val specifier: String) {\n    DESKTOP(\"desktop\"),\n    STUDIO(\"studio\"),\n    ANDROID(\"android\"),\n    JVM(\"jvm\"),\n    JS(\"js\"),\n    IOS(\"ios\")\n}\n\nexpect val System.Companion.target: SystemTarget\n\nval SystemTarget.isMobile: Boolean get() = this == SystemTarget.ANDROID || this == SystemTarget.IOS\nval SystemTarget.isDesktop: Boolean get() = this == SystemTarget.DESKTOP\nexpect val isPhoneOs: Boolean\nexpect val isIphoneBrowser: Boolean\n","package featurea.utils\n\nprivate typealias Token = StringBuilder\n\nprivate typealias Tokens = ArrayList<String>\n\nfun String.splitWithWrappers(delimiter: Char): List<String> {\n    return Tokenizer.tokenize(this, delimiter)\n}\n\nobject Tokenizer {\n\n    private val openWrappers = listOf('(', '\"', '\\'')\n    private val closeWrappers = listOf(')', '\"', '\\'')\n\n    fun tokenize(string: String, delimiter: Char): List<String> {\n        val tokens = Tokens()\n        val token = Token()\n        val wrappers = Stack<Char>()\n        for (char in string) {\n            nextChar(tokens, char, delimiter, wrappers, token)\n        }\n        nextChar(tokens, delimiter, delimiter, wrappers, token)\n        return tokens\n    }\n\n    /*internals*/\n\n    private fun isWrappersEmptyAfterNextChar(wrappers: Stack<Char>, nextChar: Char): Boolean {\n        if (!openWrappers.contains(nextChar) && !closeWrappers.contains(nextChar)) {\n            // no op\n        } else if (wrappers.isEmpty()) {\n            if (openWrappers.contains(nextChar)) {\n                wrappers.push(nextChar)\n            } else {\n                throw IllegalArgumentException(\"Close wrapper character has no open one\")\n            }\n        } else {\n            val wrapper = wrappers.last()\n            if (wrapper == '\"' && nextChar == '\"') {\n                wrappers.pop()\n            } else if (wrapper == '\\'' && nextChar == '\\'') {\n                wrappers.pop()\n            } else if (wrapper == '(' && nextChar == ')') {\n                wrappers.pop()\n            } else if (wrapper == '(') {\n                wrappers.push(nextChar)\n            }\n        }\n        return wrappers.isEmpty()\n    }\n\n    private fun nextToken(char: Char, delimiter: Char, wrappers: Stack<Char>, token: Token): Boolean {\n        if (isWrappersEmptyAfterNextChar(wrappers, char) && char == delimiter) {\n            return true\n        } else {\n            token.append(char)\n            return false\n        }\n    }\n\n    private fun nextChar(tokens: Tokens, char: Char, delimiter: Char, wrappers: Stack<Char>, token: Token) {\n        if (nextToken(char, delimiter, wrappers, token)) {\n            if (token.isNotEmpty()) {\n                tokens.add(token.toString().trim())\n                token.clear()\n            }\n        }\n    }\n\n}\n","package featurea.utils\n\n// 0.0..10.0 <=> FloatRange(first = 0f, last = 10f)\nfun String.toClosedFloatingPointRange(): ClosedFloatingPointRange<Float> {\n    val (first, second) = split(\"..\")\n    return first.toFloat()..second.toFloat()\n}\n\nclass FloatRange(var first: Float, var last: Float) {\n    val delta: Float get() = last - first\n    fun contains(value: Float) = value in first..last\n    override fun toString() = \"${first}..${last}\"\n}\n\nfun ClosedFloatingPointRange<Float>.toFloatRange(): FloatRange = FloatRange(start, endInclusive)\n\ndata class MutablePair<A, B>(var first: A, var second: B)\n\ninfix fun <A, B> A.mto(that: B): MutablePair<A, B> = MutablePair(this, that)\n\nval <K> MutablePair<K, *>.key: K\n    get() = first\n\nval <V> MutablePair<*, V>.value: V\n    get() = second\n\ninline fun <reified V : Any> String.toPair(delimiter: String): Pair<String, V> {\n    val tokens = splitAndTrim(delimiter, 2)\n    if (tokens.size == 2) {\n        return Pair(tokens[0], tokens[1].castTo())\n    } else {\n        return Pair(tokens[0], \"\".castTo())\n    }\n}\n\ninline fun <reified T : Any> String.castTo(): T {\n    return when (T::class) {\n        String::class -> this\n        Float::class -> this.toFloat()\n        else -> TODO()\n    } as T\n}\n\nfun String.toPair(delimiter: String, delimiterPattern: String): Pair<String, String?> {\n    val regex = delimiterPattern.toRegex()\n    val matchResult = regex.find(this)\n    if (matchResult != null) {\n        val delimiterIndex = matchResult.value.indexOf(delimiter)\n        val index1 = matchResult.range.first + delimiterIndex - 1\n        val index2 = index1 + delimiter.length + 1\n        val first = substring(0..index1)\n        val second = substring(index2)\n        return Pair(first, second)\n    } else {\n        return Pair(this, null)\n    }\n}\n\nfun String.divide(index: Int) = Pair(substring(0, index), substring(index + 1))\n\nfun String.divide(delimiter: String, defaultSecondValue: () -> String? = { null }): Pair<String, String?> {\n    val tokens = splitAndTrim(delimiter, 2)\n    if (tokens.size == 2) {\n        return Pair(tokens[0], tokens[1])\n    } else {\n        return Pair(tokens[0], defaultSecondValue())\n    }\n}","package featurea.utils\n\nimport featurea.System\nimport featurea.runtime.Artifact\nimport featurea.runtime.DependencyBuilder\n\n/*dependencies*/\n\nexpect fun DependencyBuilder.includeExternals()\n\nval artifact = Artifact(\"featurea.utils\") {\n    includeExternals()\n\n    \"Device\" to ::Device\n    \"System\" to System::class\n\n    static {\n        provideComponent(System())\n    }\n}\n","package featurea.utils\n\nimport featurea.System\nimport featurea.runtime.Component\nimport featurea.runtime.Module\n\nactual class Device actual constructor(override val module: Module) : Component {\n    actual val id: String get() = System.target.name\n}","package featurea.utils\n\nimport org.w3c.xhr.XMLHttpRequest\nimport kotlin.coroutines.suspendCoroutine\nimport featurea.System\n\nactual fun existsFile(filePath: String): Boolean = TODO()\n\nactual fun System.existsFile(filePath: String): Boolean = TODO()\n\nactual fun System.findAbsolutePathOrNull(filePath: String): String? = TODO()\n\nactual suspend fun System.readTextOrNull(filePath: String, limit: Int): String? {\n    for (contentRoot in contentRoots) {\n        val text: String? = requestTextOrNull(contentRoot, filePath, limit)\n        if (text != null) {\n            return text\n        }\n    }\n    return null\n}\n\n/*internals*/\n\n// todo make use of `limit`\nprivate suspend fun System.requestTextOrNull(contentRoot: String, filePath: String, limit: Int): String? {\n    val textUrl: String = if (filePath.startsWith(\"\\\\\")) {\n        filePath.removePrefix(\"\\\\\")\n    } else {\n        \"${workingDir ?: \"bundle\"}/${filePath.removePrefix(\"/\")}\"\n    }.normalizedPath\n    log(\"[File.kt] getText: $filePath\")\n\n    return suspendCoroutine { continuation ->\n        try {\n            val request: XMLHttpRequest = XMLHttpRequest()\n            request.open(\"GET\", textUrl, true)\n            request.onload = {\n                if (request.readyState == 4.toShort() && request.status == 200.toShort()) {\n                    continuation.resumeWith(Result.success(request.responseText))\n                } else {\n                    continuation.resumeWith(Result.success(null))\n                }\n            }\n            request.onerror = {\n                continuation.resumeWith(Result.success(null))\n            }\n            request.send(null)\n        } catch (e: Throwable) {\n            e.printStackTrace()\n            continuation.resumeWith(Result.success(null))\n        }\n    }\n}\n","package featurea.utils\n\nactual fun log(message: Any?, isFailure: Boolean) {\n    console.log(message)\n}\n","package featurea.utils\n\nimport featurea.System\nimport kotlinx.browser.window\n\nactual val System.Companion.target get() = SystemTarget.JS\n\nactual val isPhoneOs: Boolean = window.navigator.userAgent.toLowerCase().let {\n    (it.contains(\"mobi\") && !it.contains(\"tab\")) && (it.contains(\"ios\") || it.contains(\"android\"))\n}\n\nactual val isIphoneBrowser: Boolean = window.navigator.userAgent.toLowerCase().contains(\"iphone\")\n","package featurea.utils\n\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\n\nprivate const val currentThread: String = \"main\"\n\nactual fun currentThreadSpecifier(): String = \"main\"\n\nactual fun currentThread(): Any = currentThread\n\nactual fun <T> runBlocking(block: suspend () -> T): T = error(\"stub\")\n\nactual fun runOnApplicationThread(block: suspend () -> Unit) = runOnMainThread(block)\n\nactual fun runOnEditorThread(block: suspend () -> Unit) = runOnMainThread(block)\n\n/*internals*/\n\nprivate fun runOnMainThread(block: suspend () -> Unit) {\n    GlobalScope.launch {\n        block()\n    }\n}\n","package featurea.utils\n\nimport featurea.System\nimport featurea.runtime.DependencyBuilder\nimport kotlinx.browser.window\n\nactual fun DependencyBuilder.includeExternals() {\n    static {\n        val system: System = import()\n        system.contentRoots.add(window.location.href.parent)\n    }\n}\n","@file:Suppress(\"EXPERIMENTAL_IS_NOT_ENABLED\")\n\npackage featurea.utils\n\nfun List<Any?>.firstStringOrNull(): String? {\n    val value: Any? = firstOrNull()\n    return if (value is String) value else null\n}\n\nfun List<Any?>.firstString(): String {\n    return firstStringOrNull() ?: error(\"list: ${joinToString()}\")\n}\n\ninfix fun List<String>.toMap(values: List<Any>): MutableMap<String, Any?> {\n    require(size == values.size) { \"keys size: $size and values size: ${values.size} are not the same\" }\n    val result = mutableMapOf<String, Any?>()\n    for (index in 0..size) result[this[index]] = values[index]\n    return result\n}\n\nfun <T : Any?> MutableCollection<T>.replaceWith(collection: Iterable<T>?): MutableCollection<T> {\n    clear()\n    if (collection != null) {\n        for (element in collection) {\n            add(element)\n        }\n    }\n    return this\n}\n\nfun <K : Any, V : Any> MutableMap<K, V>.replaceWith(collection: Map<K, V>) {\n    clear()\n    for (element in collection) put(element.key, element.value)\n}\n\nfun <K : Any, T : Any> Map<K, T>.withIndex(): Iterable<IndexedValue<Map.Entry<K, T>>> {\n    return object : Iterable<IndexedValue<Map.Entry<K, T>>> {\n        override fun iterator(): Iterator<IndexedValue<Map.Entry<K, T>>> {\n            return object : Iterator<IndexedValue<Map.Entry<K, T>>> {\n                val iterator = entries.iterator()\n                var index = 0\n                override fun hasNext(): Boolean {\n                    return iterator.hasNext()\n                }\n\n                override fun next(): IndexedValue<Map.Entry<K, T>> {\n                    val nextValue = IndexedValue(index, iterator.next())\n                    index++\n                    return nextValue\n                }\n\n            }\n        }\n    }\n}\n\nfun <T> emptyIterator(): Iterator<T> = emptyList<T>().iterator()\nfun <T> Iterator<T>.isEmpty(): Boolean = !hasNext()\nfun <T> Iterator<T>.isNotEmpty(): Boolean = hasNext()\nfun <T> MutableList<T>.removeFirst(): T = removeAt(0)\nfun <T> List<T?>.contentEquals(other: List<T?>) = containsAll(other) && other.containsAll(this)\nfun <T> List<T?>.contentNotEquals(other: List<T?>) = !contentEquals(other)\n\nfun <T> List<T>.prelast(): T {\n    return checkNotNull(prelastOrNull())\n}\n\nfun <T> List<T>.prelastOrNull(): T? {\n    val index: Int = lastIndex - 1\n    return if (index >= 0) this[index] else null\n}\n\nfun FloatArray.floatArraySizeInBytes(): Int = size * Float.SIZE_BYTES // IMPORTANT used by `GLES20.glBufferData()`\n\nfun IntArray.intArraySizeInBytes(): Int = size * Int.SIZE_BYTES // IMPORTANT used by `GLES20.glBufferData()`\n\nfun <T, R : Comparable<R>> LinkedHashSet<T>.sort(selector: (T) -> R?) {\n    val sortedSet = sortedBy(selector)\n    clear()\n    addAll(sortedSet)\n}\n\n@OptIn(ExperimentalStdlibApi::class)\nfun <T> ArrayDeque<T>.peek(): T? = firstOrNull()\n\n@OptIn(ExperimentalStdlibApi::class)\nfun <T> ArrayDeque<T>.poll(): T? = lastOrNull()\n\n@OptIn(ExperimentalStdlibApi::class)\nfun <T> ArrayDeque<T>.push(element: T) = addFirst(element)\n\n@OptIn(ExperimentalStdlibApi::class)\nfun <T> ArrayDeque<T>.pop() = removeFirst()\n\n@OptIn(ExperimentalStdlibApi::class)\nfun <T> ArrayDeque<T>.offer(element: T): Boolean = add(element)\n\nfun Collection<Float>.findIndexBySum(sum: Float): Int {\n    var currentSum = 0f\n    for ((index, value) in withIndex()) {\n        currentSum += value\n        if (currentSum >= sum) return index\n    }\n    error(\"$sum > $currentSum\")\n}\n\n\n@OptIn(ExperimentalStdlibApi::class)\nfun <T> ArrayDeque<T>.popOrNull(): T? {\n    if (isEmpty()) return null\n    return pop()\n}\n\nfun List<*>.component1() = get(0)\nfun List<*>.component2() = get(1)\nfun List<*>.component3() = get(2)\nfun List<*>.component4() = get(3)\n\nfun String.toIntRange(): IntRange {\n    val (from, to) = splitAndTrim(\"..\")\n    val intFrom: Int = from.toInt()\n    val intTo: Int = to.toInt()\n    return intFrom..intTo\n}\n\ndata class IndexedEntry<out K, out V>(val index: Int, val key: K, val value: V)\n\nfun <K : Any, V : Any> Map<K, V>.withIndexFlat(): Iterable<IndexedEntry<K, V>> {\n    var index: Int = 0\n    return map {\n        IndexedEntry(index++, it.key, it.value)\n    }\n}\n\n\n","package featurea.utils\n\nactual fun getTimeMillis(): Double = js(\"Date.now()\").unsafeCast<Double>()\n\nactual fun nowString(): String = TODO()","package featurea.utils\n\nfun parseProperties(source: String, delimiter: String = \"=\"): MutableMap<String, String> {\n    val result = mutableMapOf<String, String>()\n    var lineCounter = 1\n    val lines = source.lines()\n    var key = \"\"\n    var value = \"\"\n    for (line in lines) {\n        if (line.isBlank() || line.startsWith(\"#\")) continue\n        try {\n            val indexOfDelimiter = line.indexOf(delimiter)\n            if (indexOfDelimiter == -1) {\n                if (key.isEmpty()) {\n                    error(\"line: $line\")\n                } else {\n                    value += line.trim()\n                }\n            } else {\n                val (lineKey, lineValue) = Pair(line.substring(0, indexOfDelimiter), line.substring(indexOfDelimiter + 1))\n                key = lineKey.trim()\n                value += lineValue.trim()\n            }\n            if (value.endsWith(\"\\\\\")) {\n                value = value.substring(0, value.length - 1)\n            } else {\n                result[key] = value\n                key = \"\"\n                value = \"\"\n            }\n        } catch (e: IndexOutOfBoundsException) {\n            println(\"$lineCounter: $line\")\n            println(e.message)\n        }\n        lineCounter++\n    }\n    return result\n}\n","package featurea.utils\n\nfun MutableMap<() -> Unit, Float>.updateTasksWithDelay(elapsedTime: Float, initial: Map<() -> Unit, Float>? = null) {\n    val iterator = iterator()\n    while (iterator.hasNext()) {\n        val (task, delay) = iterator.next()\n        val newDelay = delay - elapsedTime\n        if (newDelay > 0) {\n            this[task] = newDelay\n        } else {\n            task()\n            if (initial == null) {\n                iterator.remove()\n            } else {\n                this[task] = newDelay + initial[task]!!\n            }\n        }\n    }\n}\n","package featurea.utils\n\nimport kotlin.reflect.KClass\n\nprivate val decimalRegex = \"^([0-9]*)\\\\.([0-9]*)$\".toRegex()\nprivate val integerRegex = \"^[0-9]+\\$\".toRegex()\nprivate val booleanRegex = \"false|true\".toRegex()\n\nval primitiveClasses = mapOf<String, KClass<*>>(\n    \"boolean\" to Boolean::class,\n    \"boolean[]\" to BooleanArray::class,\n    \"byte\" to Byte::class,\n    \"byte[]\" to ByteArray::class,\n    \"char\" to Char::class,\n    \"char[]\" to CharArray::class,\n    \"short\" to Short::class,\n    \"short[]\" to ShortArray::class,\n    \"int\" to Int::class,\n    \"int[]\" to IntArray::class,\n    \"long\" to Long::class,\n    \"long[]\" to LongArray::class,\n    \"float\" to Float::class,\n    \"float[]\" to FloatArray::class,\n    \"double\" to Double::class,\n    \"double[]\" to DoubleArray::class\n)\n\nval numberClasses = listOf(\n    \"byte\", \"byte[]\",\n    \"short\", \"short[]\",\n    \"int\", \"int[]\",\n    \"long\", \"long[]\",\n    \"float\", \"float[]\",\n    \"double\", \"double[]\"\n)\n\nval defaultValueByPrimitiveType = mapOf(\n    \"boolean\" to \"false\",\n    \"boolean[]\" to \"null\",\n    \"byte\" to \"0\",\n    \"byte[]\" to \"null\",\n    \"char\" to \"0\",\n    \"char[]\" to \"null\",\n    \"short\" to \"0\",\n    \"short[]\" to \"null\",\n    \"int\" to \"0\",\n    \"int[]\" to \"null\",\n    \"long\" to \"0\",\n    \"long[]\" to \"null\",\n    \"float\" to \"0\",\n    \"float[]\" to \"null\",\n    \"double\" to \"0\",\n    \"double[]\" to \"null\"\n)\n\nfun String.isDouble(): Boolean = decimalRegex.matches(this)\n\nfun String.isInteger(): Boolean = integerRegex.matches(this)\n\nfun String.isBoolean(): Boolean = booleanRegex.matches(this)\n\nfun String.isClassPrimitive(): Boolean = primitiveClasses.containsKey(this)\n\nfun String.toSimpleName(): String = split(\".\").last()\n\nfun String.toKotlinClassName(): String {\n    var result: String = toUpperCaseFirst(1)\n    if (!result.endsWith(\"Kt\")) {\n        result += \"Kt\"\n    }\n    return result\n}\n\nval String.packageId: String\n    get() {\n        val lastIndexOfDot = lastIndexOf(\".\")\n        if (lastIndexOfDot == -1) return \"\"\n        return substring(0, lastIndexOfDot)\n    }\n","package featurea.utils\n\nactual val featureaDir: String get() = \"\"\n\nactual fun exitProcess(status: Int): Nothing = error(\"stub\")\n\nactual fun systemProperty(key: String): String? = \"\"\n","package featurea.runtime\n\nopen class ComponentRegistry<T> : Iterable<T> {\n\n    private val components = LinkedHashMap<String, T>()\n    private var componentKey: String? = null\n    private var componentCounter: Long = 0\n\n    operator fun <T> get(key: String): T {\n        return getOrNull(key) ?: error(\"key: $key\")\n    }\n\n    fun <T> getOrNull(key: String): T? {\n        @Suppress(\"UNCHECKED_CAST\")\n        return components[key] as T\n    }\n\n    operator fun <T> get(key: String, default: T): T {\n        @Suppress(\"UNCHECKED_CAST\")\n        return (components[key] ?: default) as T\n    }\n\n    override fun iterator(): Iterator<T> {\n        return components.values.iterator()\n    }\n\n    fun append(key: String, component: T) {\n        componentCounter++\n        val componentKey: String = \"$key$componentCounter\"\n        inject(componentKey, component)\n    }\n\n    fun inject(key: String, component: T) {\n        if (containsKey(key)) {\n            error(\"key: $key\")\n        }\n        if (component is Container) {\n            component.key = key\n            component.components.pushTransaction(CONTAINER_COMPONENT_KEY)\n            component.components.pullTransaction(component)\n        }\n        if (component is Module) {\n            component.key = key\n            component.components.pushTransaction(MODULE_COMPONENT_KEY)\n            component.components.pullTransaction(component)\n        }\n        components[key] = component\n    }\n\n    fun remove(key: String): T? {\n        return components.remove(key)\n    }\n\n    fun containsKey(key: String): Boolean {\n        return components.keys.contains(key)\n    }\n\n    fun contains(component: T): Boolean {\n        return components.values.contains(component)\n    }\n\n    fun pushTransaction(componentKey: String) {\n        this.componentKey = componentKey\n    }\n\n    fun pullTransaction(component: T) {\n        val componentKey: String = checkNotNull(componentKey)\n        if (components.isEmpty()) {\n            when (component) {\n                is Module -> check(componentKey == MODULE_COMPONENT_KEY)\n                is Container -> check(componentKey == CONTAINER_COMPONENT_KEY)\n                else -> error(\"$componentKey: $component\")\n            }\n        }\n        if (components[componentKey] == null) {\n            components[componentKey] = component\n        }\n    }\n\n}\n\n/*internals*/\n\nprivate const val CONTAINER_COMPONENT_KEY: String = \"container\"\nprivate const val MODULE_COMPONENT_KEY: String = \"module\"\n",null,null,null,"@file:Suppress(\"UNCHECKED_CAST\")\n\npackage featurea.runtime\n\ntypealias Action = Component.() -> Unit\n\ntypealias ComponentConstructor<T> = (Module) -> T\n\ntypealias Task = suspend Component.() -> Unit\n\ninterface Component {\n    val module: Module\n    fun onCreateComponent() {}\n    fun onDeleteComponent() {}\n}\n\n// constructor\nfun DefaultComponent(module: Module): Component = object : Component {\n    override val module: Module = module\n}\n\n/*convenience*/\n\ninline fun <reified T : Any> Component.import(): T {\n    module.components.pullTransaction(component = this)\n    return module.importComponent()\n}\n\nfun <T : Any> Component.import(delegate: Delegate<in T>): T {\n    return module.importComponent(delegate as Delegate<T>)\n}\n\ninline fun <reified T : Any> Component.create(noinline init: T.() -> Unit = {}): T {\n    module.components.pullTransaction(component = this)\n    return module.createComponent(init)\n}\n\nfun Component.delete() {\n    onDeleteComponent()\n}\n\nfun Component.executeAction(actionId: String) {\n    val action: Action = module.importComponent(actionId)\n    action()\n}\n\nval Component.container: Container get() = module.container\n","package featurea.runtime\n\nenum class ProvideType {\n    INJECT,\n    APPEND,\n    REPLACE,\n}\n\ninterface ComponentProvider<T> {\n    fun provideComponent(module: Module)\n}\n\n// constructor\nfun <T : Any> ComponentProvider(init: ComponentProvider<T>.(module: Module) -> Unit): ComponentProvider<T> {\n    return object : ComponentProvider<T> {\n        override fun provideComponent(module: Module) {\n            return init(module)\n        }\n    }\n}\n","package featurea.runtime\n\nimport kotlin.reflect.KClass\n\ntypealias ContainerConstructor = () -> ContainerBuilder\n\nclass ContainerBuilder {\n\n    val awaitProxies = mutableListOf<KClass<out Any>>()\n    internal var onInitBlock: ContainerBlock<Unit>? = null\n        private set\n    internal var onCreateBlock: ContainerBlock<Unit>? = null\n        private set\n    internal var onDestroyBlock: ContainerBlock<Unit>? = null\n        private set\n\n    fun onInit(block: ContainerBlock<Unit>) {\n        onInitBlock = block\n    }\n\n    fun onCreate(block: ContainerBlock<Unit>) {\n        onCreateBlock = block\n    }\n\n    fun onDestroy(block: ContainerBlock<Unit>) {\n        onDestroyBlock = block\n    }\n\n    fun <T : Any> await(proxy: KClass<T>) {\n        awaitProxies.add(proxy)\n    }\n\n}\n","package featurea.runtime\n\nclass ContainerProvider {\n\n    internal lateinit var type: ProvideType\n    internal lateinit var containerRegistry: ContainerRegistry\n    internal lateinit var dependencyRegistry: DependencyRegistry\n    internal lateinit var canonicalName: String\n    internal var builder: ContainerBuilder = ContainerBuilder()\n    internal var existingContainer: Container? = null\n    val includes = mutableListOf<Container>()\n\n    constructor(registry: ContainerRegistry, type: ProvideType, canonicalName: String, builder: ContainerBuilder) {\n        this.type = type\n        this.canonicalName = canonicalName\n        this.builder = builder\n        this.containerRegistry = registry\n    }\n\n    fun include(container: Container) {\n        includes.add(container)\n    }\n\n    /*internals*/\n\n    internal constructor(existingContainer: Container) {\n        this.existingContainer = existingContainer\n    }\n\n    internal fun initDependencyRegistry(dependencyRegistry: DependencyRegistry) {\n        this.dependencyRegistry = dependencyRegistry\n    }\n\n    internal fun providerContainer(runtime: Runtime): Container {\n        val existingContainer = existingContainer\n        if (existingContainer != null) {\n            return existingContainer\n        }\n\n        when (type) {\n            ProvideType.INJECT -> {\n                // existing\n                @Suppress(\"NAME_SHADOWING\")\n                val existingContainer: Container? = containerRegistry.getOrNull(canonicalName)\n                if (existingContainer != null) {\n                    return existingContainer\n                }\n\n                // newly created\n                val newContainer: Container = Container(dependencyRegistry)\n                newContainer.runtime = runtime\n                containerRegistry.injectContainer(canonicalName, newContainer)\n                return newContainer\n            }\n            ProvideType.APPEND -> {\n                val newContainer: Container = Container(dependencyRegistry)\n                newContainer.runtime = runtime\n                containerRegistry.appendContainer(canonicalName, newContainer)\n                return newContainer\n            }\n            ProvideType.REPLACE -> {\n                TODO()\n            }\n        }\n    }\n\n    internal fun initStaticBlocks(container: Container) {\n        if (container.isStaticBlocksInitialized) return // quickfix todo avoid using boolean flag at all\n\n        val staticBlocks: List<StaticBlock> = container.dependencyRegistry.artifact.staticBlocks\n        /*container.provideComponent(container)*/\n        for (staticBlock in staticBlocks) {\n            container.staticBlock()\n        }\n        container.isStaticBlocksInitialized = true\n    }\n\n}\n","package featurea.runtime\n\nclass ContainerRegistry internal constructor() {\n\n    private val containers = ComponentRegistry<Container>()\n\n    fun getOrNull(key: String): Container? {\n        return containers.getOrNull(key)\n    }\n\n    fun injectContainer(canonicalName: String, container: Container) {\n        check(!containers.containsKey(canonicalName))\n        check(!containers.contains(container))\n        container.registry = this\n        containers.inject(canonicalName, container)\n    }\n\n    fun appendContainer(canonicalName: String, container: Container) {\n        check(!containers.contains(container))\n        container.registry = this\n        containers.append(canonicalName, container)\n    }\n\n    fun removeContainer(container: Container) {\n        removeContainer(container.key)\n    }\n\n    fun removeContainer(key: String) {\n        containers.remove(key)?.onDestroy()\n    }\n\n    fun destroy() {\n        for (container in containers) {\n            container.destroy()\n        }\n    }\n\n}\n","package featurea.runtime\n\nimport kotlin.reflect.KClass\n\nclass DependencyNotFoundException : RuntimeException {\n    constructor(canonicalName: String) : super(canonicalName)\n    constructor(type: KClass<*>) : super(type.toString())\n}\n\n// todo replace `linkedSetOf` with `mutableListOf` by redoing `Artifact` logic\nclass Dependency internal constructor(val artifactId: String) {\n    val artifacts = linkedSetOf<Dependency>()\n    val resources = linkedSetOf<Dependency>()\n    val contentRoots = mutableListOf<() -> String>()\n    val moduleComponents = mutableMapOf<String, ComponentConstructor<Any>>()\n    val containerComponents = mutableMapOf<String, ContainerBlock<Any>>()\n    val componentProviders = linkedMapOf<KClass<out Any>, String>()\n    val componentProvidersToken = StringBuilder() // quickfix todo improve\n    val modules = mutableMapOf<String, () -> ModuleBuilder>()\n    val containers = mutableMapOf<String, () -> ContainerBuilder>()\n    val staticBlocks = mutableListOf<StaticBlock>()\n    val features = mutableMapOf<KClass<*>, MutableList<String>>()\n    val simpleNames = mutableSetOf<String>()\n    val canonicalNames = linkedMapOf<KClass<out Any>, String>()\n    var useConfig: Boolean = false\n        internal set\n    var isDefaultConfigPackage: Boolean = false\n        internal set\n\n    override fun toString(): String = \"Dependency($artifactId)\"\n}\n\n// constructor\nfun Artifact(id: String, includes: DependencyBuilder.() -> Unit = {}): Dependency = Dependency(id).apply {\n    val dependencyBuilder = DependencyBuilder(this)\n    dependencyBuilder.includes()\n    if (useConfig) {\n        resources.add(this)\n    }\n    resources.addAll(artifacts.flatMap { it.resources }.filter { it.useConfig })\n\n    // >> quickfix todo improve\n    staticBlocks.addAll(0, artifacts.flatMap { it.staticBlocks })\n    val distinct = staticBlocks.distinct()\n    staticBlocks.clear()\n    staticBlocks.addAll(distinct)\n    // <<\n}\n\n// constructor\nfun DefaultArtifact(includes: DependencyBuilder.() -> Unit = {}) = Artifact(\"featurea\") {\n    includes()\n\n    \"Container\" to Container::class\n    \"DefaultComponent\" to ::DefaultComponent\n    \"DefaultContainer\" to ::DefaultContainer\n    \"DefaultModule\" to ::DefaultModule\n}\n\n/*convenience*/\n\n// quickfix todo improve\nfun Dependency.findContentRootsRecursively(): List<String> {\n    val result = mutableListOf<String>()\n    for (contentRoot in contentRoots) {\n        val contentRootNormalized: String = contentRoot().replace(\"\\\\\", \"/\").replace(\"//\", \"/\") // quickfix todo avoid\n        result.add(contentRootNormalized)\n    }\n    for (artifact in artifacts) {\n        result.addAll(artifact.findContentRootsRecursively())\n    }\n    return result\n}\n\nval Dependency.configPackages: List<String> get() = resources.map { if (it.isDefaultConfigPackage) \"\" else it.artifactId }\n",null,"@file:Suppress(\"FoldInitializerAndIfToElvis\")\n\npackage featurea.runtime\n\nimport kotlin.reflect.KClass\n\nclass DependencyRegistry private constructor(val artifact: Dependency) {\n\n    val componentProviders = linkedMapOf<KClass<out Any>, String>()\n    val features = mutableMapOf<KClass<*>, MutableList<String>>()\n    val moduleComponents = linkedMapOf<String, ComponentConstructor<*>>()\n    val containerComponents = linkedMapOf<String, ContainerBlock<Any>>()\n    val containers = linkedMapOf<String, ContainerConstructor>()\n    val modules = linkedMapOf<String, ModuleConstructor>()\n    val moduleCanonicalNames = linkedMapOf<KClass<*>, String>()\n    val canonicalNames = linkedMapOf<KClass<*>, String>()\n\n    fun findCanonicalName(type: KClass<*>): String {\n        val canonicalName = canonicalNames[type]\n        if (canonicalName == null) {\n            throw DependencyNotFoundException(type)\n        }\n        return canonicalName\n    }\n\n    // quickfix todo avoid companion object\n    companion object {\n        fun fromDependency(dependency: Dependency): DependencyRegistry {\n            // dependency\n            val namespaces = linkedSetOf<Dependency>()\n            dependency.artifacts.add(DefaultArtifact())\n            fun initRecursively(dependency: Dependency) {\n                for (artifact in dependency.artifacts) {\n                    initRecursively(artifact)\n                }\n                namespaces.add(dependency)\n            }\n            initRecursively(dependency)\n\n            // dependencyRegistry\n            val dependencyRegistry: DependencyRegistry = DependencyRegistry(dependency).apply {\n                for (namespace in namespaces) {\n                    moduleComponents.putAll(namespace.moduleComponents)\n                    containerComponents.putAll(namespace.containerComponents)\n                    modules.putAll(namespace.modules)\n                    containers.putAll(namespace.containers)\n                    componentProviders.putAll(namespace.componentProviders)\n                    canonicalNames.putAll(namespace.canonicalNames)\n                    for ((pluginDependency, featureCanonicalNames) in namespace.features) {\n                        features.getOrPut(pluginDependency) { mutableListOf() }.addAll(featureCanonicalNames)\n                    }\n                }\n            }\n\n            // features\n            for ((_, features) in dependencyRegistry.features) {\n                features.sortWith(providersFirstComparator)\n            }\n\n            return dependencyRegistry\n        }\n    }\n\n}\n\n/*internals*/\n\nprivate val providersFirstComparator: Comparator<String> = Comparator<String> { first, second ->\n    val feature1: String = first.simpleName\n    val feature2: String = second.simpleName\n    when {\n        feature2.startsWith(\"provide\") -> 1\n        feature1.startsWith(\"provide\") -> -1\n        else -> 1\n    }\n}\n\nprivate val String.simpleName: String get() = split(\".\").last()\n","package featurea.runtime\n\n// todo rename `ContainerListener` to `StaticComponent`\ninterface ContainerListener {\n    fun provideComponent(canonicalName: String, component: Any) {}\n}","package featurea.runtime\n\nimport kotlin.reflect.KClass\n\ntypealias ModuleBlock = (Module) -> Unit\n\nclass ModuleNotFoundException(canonicalName: String) : RuntimeException(canonicalName)\n\nclass Module(val runtime: Runtime, val container: Container) : Component {\n\n    override val module: Module = this\n    val components = ComponentRegistry<Any>()\n    internal var isInitComplete: Boolean = false\n    lateinit var key: String\n    private val registries = mutableListOf<ModuleRegistry<Any>>()\n    val destroyListeners = mutableListOf<() -> Unit>()\n\n    inline fun <reified T : Any> importComponent(): T {\n        return importComponent(T::class)\n    }\n\n    fun <T : Any> importComponent(delegate: Delegate<T>): T {\n        return importComponent(delegate.proxyType).delegate\n    }\n\n    fun <T : Any> importComponent(type: KClass<T>): T {\n        val canonicalName: String = container.dependencyRegistry.findCanonicalName(type)\n        return importComponent(type, canonicalName)\n    }\n\n    inline fun <reified T : Any> importComponent(canonicalName: String): T {\n        val type: KClass<T> = T::class\n        return importComponent(type, canonicalName)\n    }\n\n    fun <T : Any> importComponent(type: KClass<T>, canonicalName: String): T {\n        // 1. existing component\n        val existingComponent: T? = importComponentOrNull(type, canonicalName)\n        if (existingComponent != null) {\n            return existingComponent\n        }\n\n        // 2. new component\n        components.pushTransaction(canonicalName)\n        val component: T = loadComponent(type, canonicalName)\n        components.pullTransaction(component)\n        if (component is Component) {\n            component.onCreateComponent()\n        }\n        if (component is ModuleRegistry<*>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            registries.add(component as ModuleRegistry<Any>)\n        } else {\n            installPlugin(plugin = component::class)\n        }\n        return component\n    }\n\n    inline fun <reified T : Any> createComponent(noinline init: T.() -> Unit = {}): T {\n        val canonicalName: String = container.dependencyRegistry.findCanonicalName(T::class)\n        return createComponent(canonicalName, init)\n    }\n\n    inline fun <reified T : Any> createComponent(canonicalName: String, init: T.() -> Unit = {}): T {\n        val component: T = loadComponent(T::class, canonicalName)\n        component.init()\n        if (component is Component) {\n            component.onCreateComponent()\n        }\n        return component\n    }\n\n    fun <T : Any> provideComponent(component: T) {\n        val type = component::class\n        val canonicalName = container.dependencyRegistry.findCanonicalName(type)\n        components.inject(canonicalName, component)\n        installPlugin(plugin = type)\n    }\n\n    fun <T : Any> importComponentOrNull(type: KClass<T>, canonicalName: String): T? {\n        // existing\n        val existingComponent: T? = components.getOrNull(canonicalName)\n        if (existingComponent != null) {\n            return existingComponent\n        }\n\n        // static\n        val staticComponent: T? = container.findStaticOrNull<T>(canonicalName)\n        if (staticComponent != null) {\n            return staticComponent\n        }\n\n        // primary\n        val primaryModule: Module? = runtime.moduleProvider.findPrimaryModuleOrNull(canonicalName)\n        if (primaryModule != null) {\n            return primaryModule.importComponent(type, canonicalName)\n        }\n\n        // included\n        for ((_, includedModule) in runtime.moduleProvider.includedModules) {\n            val includedComponent: T? = includedModule.components.getOrNull<T>(canonicalName)\n            if (includedComponent != null) {\n                return includedComponent\n            }\n        }\n\n        // not found\n        return null\n    }\n\n    fun <T : Any> loadComponent(type: KClass<T>, canonicalName: String): T {\n        val dependencyRegistry: DependencyRegistry = container.dependencyRegistry\n        val componentConstructor: ComponentConstructor<*>? = dependencyRegistry.moduleComponents[canonicalName]\n        if (componentConstructor != null) {\n            // 1. create component\n            try {\n                val component: Any? = componentConstructor(this)\n                @Suppress(\"UNCHECKED_CAST\")\n                return component as T\n            } catch (e: Exception) {\n                e.printStackTrace()\n                throw e // quickfix todo improve\n            }\n        } else {\n            // 2. provide proxy\n            val proxy: KClass<T> = type\n            val componentProvider: String? = dependencyRegistry.componentProviders[proxy]\n            if (componentProvider == null) {\n                throw DependencyNotFoundException(canonicalName)\n            }\n            importComponent<Component>(componentProvider)\n            val existingComponent: T? = components.getOrNull(canonicalName)\n            if (existingComponent == null) {\n                throw DependencyNotFoundException(canonicalName)\n            }\n            return existingComponent\n        }\n    }\n\n    fun destroy() {\n        container.removeModule(this)\n    }\n\n    fun onDestroy(block: ModuleBlock) {\n        runtime.destroy(block)\n    }\n\n    override fun toString(): String = \"Module($key)\"\n\n    /*internals*/\n\n    internal fun installRegistries() {\n        for (registry in registries) {\n            val type: KClass<*> = registry::class\n            val canonicalNames: List<String>? = container.dependencyRegistry.features[type]\n            if (canonicalNames != null) {\n                for (canonicalName in canonicalNames) {\n                    val feature: Component = importComponent<Component>(canonicalName)\n                    registry.registerComponent(canonicalName, feature)\n                }\n            }\n        }\n    }\n\n    internal fun installPlugin(plugin: KClass<*>) {\n        val canonicalNames: List<String>? = container.dependencyRegistry.features[plugin]\n        if (canonicalNames != null) {\n            for (canonicalName in canonicalNames) {\n                importComponent<Component>(canonicalName)\n            }\n        }\n    }\n\n    internal fun onDestroy() {\n        for (destroyModuleBlock in runtime.destroyModuleBlocks) {\n            destroyModuleBlock(this)\n        }\n        runtime.moduleProvider.builder.destroyBlock?.invoke(this)\n        for (component in components) {\n            if (component is Component) {\n                component.onDeleteComponent()\n            }\n        }\n        for (destroyListener in destroyListeners) {\n            destroyListener()\n        }\n    }\n\n}\n\n// constructor\nfun DefaultModule() = Module {}\n\n// constructor\nfun Module(init: ModuleBuilder.() -> Unit): ModuleBuilder = ModuleBuilder().apply(init)\n\n/*convenience*/\n\nval Module.artifact: Dependency get() = container.artifact\n\ninterface ModuleRegistry<T : Any> {\n    fun registerComponent(canonicalName: String, component: T)\n}\n\ninline fun <reified T : Any> Module.findComponent(): T {\n    val type: KClass<T> = T::class\n    val canonicalName: String = container.dependencyRegistry.findCanonicalName(type)\n    val existingComponent: T? = components.getOrNull(canonicalName)\n    if (existingComponent == null) {\n        throw DependencyNotFoundException(type)\n    }\n    return existingComponent\n}\n","package featurea.runtime\n\nimport kotlin.reflect.KClass\n\ntypealias ModuleConstructor = () -> ModuleBuilder\n\nclass ModuleBuilder {\n\n    internal val awaitProxies = mutableListOf<KClass<out Any>>()\n    internal var initBlock: (InitBlock.(module: Module) -> Unit)? = null\n        private set\n    internal var createBlock: ModuleBlock? = null\n        private set\n    internal var destroyBlock: ModuleBlock? = null\n        private set\n\n    fun onInit(block: InitBlock.(module: Module) -> Unit) {\n        initBlock = block\n    }\n\n    fun onCreate(block: ModuleBlock) {\n        createBlock = block\n    }\n\n    fun onDestroy(block: ModuleBlock) {\n        destroyBlock = block\n    }\n\n    inner class InitBlock {\n        fun await(proxy: KClass<out Any>) {\n            awaitProxies.add(proxy)\n        }\n    }\n\n}\n","package featurea.runtime\n\nimport kotlin.jvm.JvmName\nimport kotlin.reflect.KClass\n\ntypealias Plugin<T> = ModulePlugin<T>.() -> Unit\n\nclass ModulePlugin<T : Any>(val dependencyBuilder: DependencyBuilder, val type: KClass<T>) {\n\n    @JvmName(\"toFeature\")\n    infix fun String.to(action: Action) {\n        val key: String = this\n        val constructor: ComponentConstructor<Unit> = { module ->\n            module.action()\n        }\n        key to constructor\n    }\n\n    inline infix fun <reified T : Any> String.to(noinline constructor: ComponentConstructor<T>) {\n        val key: String = this\n        with(dependencyBuilder) {\n            key to constructor\n            val canonicalNames = dependency.features.getOrPut(type) { mutableListOf() }\n            val lastCanonicalName = dependency.componentProvidersToken.toString()\n            check(!canonicalNames.contains(lastCanonicalName))\n            canonicalNames.add(lastCanonicalName)\n        }\n    }\n\n    @JvmName(\"toContainerBlock\")\n    inline infix fun <reified T : Any> String.to(noinline constructor: ContainerBlock<T>) {\n        val key: String = this\n        with(dependencyBuilder) {\n            addComponent(key, constructor)\n            val canonicalNames = dependency.features.getOrPut(type) { mutableListOf() }\n            val lastCanonicalName = dependency.componentProvidersToken.toString()\n            check(!canonicalNames.contains(lastCanonicalName))\n            canonicalNames.add(lastCanonicalName)\n        }\n    }\n\n    inline infix fun <reified T : Any> String.to(noinline componentProvider: () -> ComponentProvider<T>) {\n        val key: String = this\n        with(dependencyBuilder) {\n            key to componentProvider\n            val canonicalNames = dependency.features.getOrPut(type) { mutableListOf() }\n            val lastCanonicalName = dependency.componentProvidersToken.toString()\n            check(!canonicalNames.contains(lastCanonicalName))\n            canonicalNames.add(lastCanonicalName)\n        }\n    }\n\n}\n","package featurea.runtime\n\nclass ModuleProvider(val type: ProvideType, val canonicalName: String, val builder: ModuleBuilder) {\n\n    val includedModules = mutableMapOf<String, Module>()\n\n    fun include(module: Module) {\n        includedModules[module.key.packageId] = module\n    }\n\n    fun includeAll(modules: Iterable<Module>) {\n        for (module in modules) {\n            include(module)\n        }\n    }\n\n    fun provideModule(runtime: Runtime, container: Container): Module {\n        when (type) {\n            ProvideType.INJECT -> {\n                // existing\n                val existingModule: Module? = container.modules.getOrNull(canonicalName)\n                if (existingModule != null) {\n                    return existingModule\n                }\n\n                // newly created\n                val newModule = Module(runtime, container)\n                container.injectModule(canonicalName, newModule)\n                return newModule\n            }\n            ProvideType.APPEND -> {\n                val newModule: Module = Module(runtime, container)\n                container.appendModule(canonicalName, newModule)\n                return newModule\n            }\n            ProvideType.REPLACE -> {\n                TODO()\n            }\n        }\n    }\n\n    fun findPrimaryModuleOrNull(canonicalName: String): Module? {\n        return includedModules[canonicalName.packageId]\n    }\n\n}\n\n/*internals*/\n\nprivate val String.packageId: String\n    get() {\n        val lastIndexOfDot: Int = lastIndexOf(\".\")\n        if (lastIndexOfDot == -1) return \"\"\n        return substring(0, lastIndexOfDot)\n    }\n",null,"package featurea.runtime\n\nimport kotlin.reflect.KClass\n\n@Repeatable\n@Retention(AnnotationRetention.SOURCE)\nannotation class Provide(val proxy: KClass<out Proxy<*>>)\n\ninterface Proxy<T> {\n    val delegate: T\n}\n\nopen class Delegate<T>(val proxyType: KClass<out Proxy<T>>)\n","@file:Suppress(\"FoldInitializerAndIfToElvis\")\n\npackage featurea.runtime\n\nimport kotlin.native.concurrent.ThreadLocal\n\n@ThreadLocal\nprivate var runtimeScope: ProxyScope? = null\n\ninterface ProxyScope {\n    fun provide(proxy: Proxy<*>)\n}\n\nfun defaultProxyScope(block: Runtime.() -> Unit = {}) {\n    proxyScope {\n        Runtime().apply(block)\n    }\n}\n\nfun proxyScope(init: RuntimeBuilder.() -> Runtime) {\n    val proxyScope: ProxyScope? = runtimeScope\n    if (proxyScope != null) {\n        error(\"inside proxy scope\")\n    }\n    val runtimeBuilder: RuntimeBuilder = RuntimeBuilder(init)\n    runtimeScope = runtimeBuilder\n    runtimeBuilder.build {\n        runtimeScope = null\n    }\n}\n\nfun provide(proxy: Proxy<*>) {\n    val proxyScope: ProxyScope? = runtimeScope\n    if (proxyScope == null) {\n        error(\"outside proxy scope\")\n    }\n    proxyScope.provide(proxy)\n}\n","package featurea.runtime\n\ntypealias Containers = ContainerProvider.() -> Unit\n\ntypealias Modules = ModuleProvider.() -> Unit\n\nclass Runtime internal constructor(val registry: ContainerRegistry) {\n\n    private lateinit var components: Dependency\n    lateinit var containerProvider: ContainerProvider\n    lateinit var moduleProvider: ModuleProvider\n    internal val initModuleBlocks = mutableListOf<ModuleBlock>()\n    internal val completeModuleBlocks = mutableListOf<ModuleBlock>()\n    internal val destroyModuleBlocks = mutableListOf<ModuleBlock>()\n\n    fun exportComponents(components: Dependency) {\n        this.components = components\n    }\n\n    fun init(block: ModuleBlock) {\n        initModuleBlocks.add(block)\n    }\n\n    fun complete(block: ModuleBlock) {\n        completeModuleBlocks.add(block)\n    }\n\n    fun destroy(block: ModuleBlock) {\n        destroyModuleBlocks.add(block)\n    }\n\n    fun initContainer(container: Container) {\n        containerProvider = ContainerProvider(container)\n        containerProvider.initDependencyRegistry(container.dependencyRegistry)\n    }\n\n    fun injectContainer(canonicalName: String, init: Containers = {}) {\n        initContainerProvider(ProvideType.INJECT, canonicalName, init)\n    }\n\n    fun injectDefaultContainer(init: Containers = {}) {\n        initContainerProvider(ProvideType.INJECT, \"featurea.runtime.DefaultContainer\", init)\n    }\n\n    fun appendContainer(canonicalName: String, init: Containers = {}) {\n        initContainerProvider(ProvideType.APPEND, canonicalName, init)\n    }\n\n    fun appendDefaultContainer(init: Containers = {}) {\n        initContainerProvider(ProvideType.APPEND, \"featurea.runtime.DefaultContainer\", init)\n    }\n\n    fun replaceContainer(canonicalName: String, init: Containers = {}) {\n        initContainerProvider(ProvideType.REPLACE, canonicalName, init)\n    }\n\n    fun injectModule(canonicalName: String, init: Modules = {}) {\n        initModuleProvider(ProvideType.INJECT, canonicalName, init)\n    }\n\n    fun injectDefaultModule(init: Modules = {}) {\n        initModuleProvider(ProvideType.INJECT, \"featurea.runtime.DefaultModule\", init)\n    }\n\n    fun appendModule(canonicalName: String, init: Modules = {}) {\n        initModuleProvider(ProvideType.APPEND, canonicalName, init)\n    }\n\n    fun appendDefaultModule(init: Modules = {}) {\n        initModuleProvider(ProvideType.APPEND, \"featurea.runtime.DefaultModule\", init)\n    }\n\n    fun replaceModule(canonicalName: String, init: Modules = {}) {\n        initModuleProvider(ProvideType.REPLACE, canonicalName, init)\n    }\n\n    /*internals*/\n\n    private fun initContainerProvider(type: ProvideType, canonicalName: String, init: Containers) {\n        val dependencyRegistry: DependencyRegistry = DependencyRegistry.fromDependency(components)\n        val constructor: ContainerConstructor? = dependencyRegistry.containers[canonicalName]\n        val builder: ContainerBuilder = if (constructor != null) constructor() else DefaultContainer()\n        containerProvider = ContainerProvider(registry, type, canonicalName, builder)\n        containerProvider.initDependencyRegistry(dependencyRegistry)\n        containerProvider.init()\n    }\n\n    private fun initModuleProvider(type: ProvideType, canonicalName: String, init: Modules) {\n        val constructor: ModuleConstructor? = containerProvider.dependencyRegistry.modules[canonicalName]\n        val builder: ModuleBuilder = if (constructor != null) constructor() else DefaultModule()\n        moduleProvider = ModuleProvider(type, canonicalName, builder)\n        moduleProvider.init()\n    }\n\n}\n","@file:Suppress(\"NON_EXHAUSTIVE_WHEN\")\n\npackage featurea.runtime\n\nimport featurea.runtime.RuntimeState.*\nimport kotlin.reflect.KClass\n\nclass RuntimeBuilder(val init: RuntimeBuilder.() -> Runtime) : ProxyScope {\n\n    private var state: RuntimeState = RUNTIME_NEW\n\n    private lateinit var runtime: Runtime\n    private lateinit var container: Container\n    private lateinit var module: Module\n\n    private val containerBuilder by lazy { runtime.containerProvider.builder }\n    private val moduleBuilder by lazy { runtime.moduleProvider.builder }\n    private val awaitProxiesInContainer by lazy { containerBuilder.awaitProxies.toMutableList() }\n    private val awaitProxiesInModule by lazy { ArrayList(moduleBuilder.awaitProxies) }\n\n    private val initContainerBlocks = mutableListOf<() -> Unit>()\n    private val initModuleBlocks = mutableListOf<ModuleBlock>()\n    private val destroyModuleBlocks = mutableListOf<ModuleBlock>()\n    private lateinit var onSuccess: () -> Unit\n    private lateinit var onFailure: () -> Unit\n\n    fun onInitContainer(block: () -> Unit) {\n        initContainerBlocks.add(block)\n    }\n\n    fun onInitModule(block: ModuleBlock) {\n        initModuleBlocks.add(block)\n    }\n\n    fun onDestroyModule(block: ModuleBlock) {\n        destroyModuleBlocks.add(block)\n    }\n\n    /*internals*/\n\n    internal fun build(complete: () -> Unit) {\n        onSuccess = complete\n        onFailure = complete\n        try {\n            // 1. RUNTIME_INIT_START\n            state = RUNTIME_INIT_START\n            runtime = init()\n            runtime.destroyModuleBlocks.addAll(destroyModuleBlocks) // quickfix todo improve\n            container = runtime.containerProvider.providerContainer(runtime)\n            module = runtime.moduleProvider.provideModule(runtime, container)\n\n            // 2. CONTAINER_INIT_START\n            state = CONTAINER_INIT_START\n            for (initContainerBlock in initContainerBlocks) {\n                initContainerBlock()\n            }\n            runtime.containerProvider.initStaticBlocks(container)\n\n            // 3. CONTAINER_INIT_COMPLETE\n            state = CONTAINER_INIT_COMPLETE\n            containerBuilder.onInitBlock?.invoke(container)\n\n            // 4. CONTAINER_INIT_COMPLETE\n            if (state == CONTAINER_INIT_COMPLETE) {\n                createContainer()\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            onFailure()\n        }\n    }\n\n    private fun createContainer() {\n        try {\n            if (awaitProxiesInContainer.isEmpty()) {\n                // 5. CONTAINER_CREATE\n                state = CONTAINER_CREATE\n                containerBuilder.onCreateBlock?.invoke(container)\n\n                // 6. MODULE_INIT\n                state = MODULE_INIT\n                if (!module.isInitComplete) {\n                    for (component in container.components) {\n                        module.installPlugin(plugin = component::class)\n                    }\n                    for (initModuleBlock in initModuleBlocks) {\n                        initModuleBlock(module)\n                    }\n                    for (initModuleBlock in runtime.initModuleBlocks) {\n                        initModuleBlock(module)\n                    }\n                    moduleBuilder.initBlock?.invoke(moduleBuilder.InitBlock(), module)\n                    module.installRegistries()\n                }\n                createModule()\n            } else {\n                // 5'. CONTAINER_CREATE_AWAIT\n                state = CONTAINER_CREATE_AWAIT\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            onFailure()\n        }\n    }\n\n    private fun createModule() {\n        try {\n            if (awaitProxiesInModule.isEmpty()) {\n                // 7. MODULE_CREATE\n                state = MODULE_CREATE\n                if (!module.isInitComplete) {\n                    moduleBuilder.createBlock?.invoke(module)\n                }\n\n                // 8. MODULE_BUILD\n                state = MODULE_BUILD\n                for (completeModuleBlock in runtime.completeModuleBlocks) {\n                    completeModuleBlock(module)\n                }\n\n                // 9. RUNTIME_INIT_COMPLETE\n                state = RUNTIME_INIT_COMPLETE\n                module.isInitComplete = true\n                onSuccess()\n            } else {\n                // 7'. MODULE_CREATE_AWAIT\n                state = MODULE_CREATE_AWAIT\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            onFailure()\n        }\n    }\n\n    override fun provide(proxy: Proxy<*>) {\n        try {\n            val type: KClass<out Proxy<*>> = proxy::class\n            if (awaitProxiesInContainer.contains(type)) {\n                awaitProxiesInContainer.remove(type)\n                container.provideComponent(proxy)\n            } else {\n                awaitProxiesInModule.remove(type)\n                module.provideComponent(proxy)\n            }\n            when (state) {\n                CONTAINER_INIT_COMPLETE -> createContainer() // 5'. CONTAINER_INIT_COMPLETE\n                CONTAINER_CREATE_AWAIT -> createContainer() //\n                MODULE_CREATE_AWAIT -> createModule() // 7'. MODULE_CREATE_AWAIT\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            onFailure()\n        }\n    }\n\n}\n\n// constructor\nfun Runtime(registry: ContainerRegistry = ContainerRegistry(), init: Runtime.() -> Unit = {}): Runtime =\n    Runtime(registry).apply(init)\n\n// constructor\nfun DefaultRuntime(artifact: Dependency = DefaultArtifact(), setup: Action = {}): Runtime = Runtime {\n    exportComponents(artifact)\n    injectContainer(\"featurea.runtime.DefaultContainer\")\n    injectModule(\"featurea.runtime.DefaultModule\")\n    complete(setup)\n}\n","package featurea.runtime\n\nenum class RuntimeState {\n    RUNTIME_NEW,\n    RUNTIME_INIT_START,\n    CONTAINER_INIT_START,\n    CONTAINER_INIT_COMPLETE,\n    CONTAINER_CREATE_AWAIT,\n    CONTAINER_CREATE,\n    MODULE_INIT,\n    MODULE_CREATE_AWAIT,\n    MODULE_CREATE,\n    MODULE_BUILD,\n    RUNTIME_INIT_COMPLETE,\n}\n","package featurea\n\n// quickfix todo replace to Standard Library\nclass System {\n    val contentRoots = mutableListOf<String>()\n    val properties: Properties = Properties()\n    var workingDir: String? = null // Bundle.filePath\n\n    companion object // quickfix todo improve\n}\n","package featurea.content\n\nimport featurea.Bundle\nimport featurea.utils.isInstrumentationEnabled\nimport featurea.runtime.Container\nimport featurea.runtime.ContainerListener\n\nclass Content(container: Container) : ContainerListener {\n\n    val existingResources = linkedMapOf<String, Resource>()\n    val providedResources = linkedSetOf<String>()\n    private val readers = linkedMapOf<String, ResourceReader>()\n    private val writers = mutableListOf<ResourceWriter>() // todo refactor to from List to Map\n\n    init {\n        container.listeners.add(this)\n    }\n\n    override fun provideComponent(canonicalName: String, component: Any) {\n        if (component is ResourceReader) {\n            val resourceCanonicalName: String = canonicalName.replace(\".reader.\", \".\").removeSuffix(\"Reader\")\n            readers[resourceCanonicalName] = component\n        }\n        if (component is ResourceWriter) {\n            writers.add(component)\n        }\n    }\n\n    suspend fun writeIfAccept(resourceTag: ResourceTag, key: String, value: String, bundle: Bundle) {\n        var accept: Boolean = true\n        for (writer in writers) {\n            accept = accept && writer.accept(resourceTag, key, value, bundle)\n        }\n        if (accept) {\n            for (writer in writers) {\n                writer.write(resourceTag, key, value, bundle)\n            }\n        }\n    }\n\n    suspend fun flush(bundle: Bundle) {\n        for (writer in writers) {\n            writer.flush(bundle)\n        }\n    }\n\n    suspend fun findResource(resourcePath: String, bundle: Bundle? = null): Resource {\n        val resource: Resource? = findResourceOrNull(resourcePath, bundle)\n        if (resource == null) {\n            throw ResourceNotFoundException(resourcePath)\n        }\n        return resource\n    }\n\n    suspend fun findResourceOrNull(resourcePath: String, bundle: Bundle? = null): Resource? {\n        // 0. instrument resource\n        if (isInstrumentationEnabled) {\n            for (reader in readers.values) {\n                reader.createIfAbsent(resourcePath)\n            }\n        }\n\n        // existing\n        val existingResource: Resource? = existingResources[resourcePath]\n        if (existingResource != null) {\n            return existingResource\n        }\n\n        // newly created\n        for ((resourceCanonicalName, reader) in readers) {\n            val resource: Resource? = reader.readOrNull(resourcePath, bundle)\n            if (resource != null) {\n                resource.canonicalName = resourceCanonicalName\n                resource.path = resourcePath\n                existingResources[resourcePath] = resource\n                return resource\n            }\n        }\n\n        // 3. resource not found\n        return null\n    }\n\n}\n","package featurea.content\n\nclass ContentTypeNotFoundException(canonicalName: String) : RuntimeException(canonicalName)\n\ninterface ContentType {\n    // todo refactor to `parse(resourceTag: ResourceTag, key: String, value: String, parseQueue: ArrayList<String>)`\n    fun parseOrNull(resourceTag: ResourceTag, key: String, value: String): List<String>? = null\n    suspend fun load(resource: Resource, loadingQueue: ArrayList<String>) {}\n    suspend fun release(resource: Resource, releaseQueue: ArrayList<String>) {}\n}\n","package featurea.content\n\nimport featurea.runtime.*\n\nclass ContentTypeRegistry(override val module: Module) : Component, ModuleRegistry<ContentType> {\n\n    private val contentTypes = linkedMapOf<String, ContentType>()\n\n    override fun registerComponent(canonicalName: String, component: ContentType) {\n        val resourceCanonicalName: String = canonicalName.removeSuffix(\"ContentType\")\n        contentTypes[resourceCanonicalName] = component\n    }\n\n    fun parseOrNull(resourceTag: ResourceTag, key: String, value: String): List<String>? {\n        for (contentType in contentTypes.values) {\n            val parseQueue: List<String>? = contentType.parseOrNull(resourceTag, key, value)\n            if (parseQueue != null) {\n                return parseQueue\n            }\n        }\n        return null\n    }\n\n    suspend fun loadResource(resource: Resource, loadingQueue: ArrayList<String>) {\n        val contentType: ContentType = findContentType(resource.canonicalName)\n        contentType.load(resource, loadingQueue)\n    }\n\n    suspend fun releaseResource(resource: Resource, releaseQueue: ArrayList<String>) {\n        val contentType: ContentType = findContentType(resource.canonicalName)\n        contentType.release(resource, releaseQueue)\n    }\n\n    /*internals*/\n\n    private fun findContentType(canonicalName: String): ContentType {\n        val contentType: ContentType? = contentTypes[canonicalName]\n        if (contentType == null) {\n            throw ContentTypeNotFoundException(canonicalName)\n        }\n        return contentType\n    }\n\n}\n\nfun DependencyBuilder.contentTypes(plugin: Plugin<ContentTypeRegistry>) = install(plugin)\n","package featurea.content\n\nimport featurea.Properties\nimport kotlin.reflect.KProperty\n\nconst val UNDEFINED_RESOURCE_PATH: String = \"undefined\"\n\nclass FileNotFoundException(path: String) : RuntimeException(path)\n\nclass ResourceNotFoundException(path: String) : RuntimeException(path)\n\nclass Resource(val manifest: Properties, val files: List<String>, val manifestFile: String?) {\n    lateinit var canonicalName: String\n        internal set\n    lateinit var path: String\n        internal set\n}\n\nfun Resource(files: List<String>, manifestFile: String? = null, props: () -> Properties = { Properties() }): Resource {\n    return Resource(props(), files, manifestFile)\n}\n\nfun Resource(vararg files: String, manifestFile: String? = null, props: () -> Properties = { Properties() }): Resource {\n    return Resource(props(), listOf(*files), manifestFile)\n}\n\nfun Resource.isDirectory(): Boolean {\n    return !isFile()\n}\n\nfun Resource.isFile(): Boolean {\n    return manifest[\"isFile\"] ?: throw FileNotFoundException(path)\n}\n\nclass ResourcePropertyDelegate<T : Any>(val key: String, val defaultValue: () -> T) {\n\n    inline operator fun <reified T : Any> getValue(resource: Resource, property: KProperty<*>): T {\n        return resource.manifest[key] ?: defaultValue() as T\n    }\n\n    inline operator fun <reified T : Any> setValue(resource: Resource, property: KProperty<*>, value: T) {\n        resource.manifest[key] = value\n    }\n\n}\n","@file:Suppress(\"RemoveExplicitTypeArguments\")\n\npackage featurea.content\n\nimport featurea.utils.*\n\ndata class ResourceAttribute(val key: String, val value: String) {\n    override fun equals(other: Any?): Boolean = if (other is ResourceAttribute) other.key == key else false\n    override fun hashCode(): Int = key.hashCode()\n    override fun toString(): String = \"ResourceAttribute($key, $value)\"\n}\n\nfun String.toStringAttributes(): Map<String, String> {\n    return splitAndTrim(\",\").associate { it.toPair<String>(\":\") }\n}\n\nfun String.toFloatAttributes(): Map<String, Float> {\n    return splitAndTrim(\",\").associate { it.toPair<Float>(\":\") }\n}\n\nfun String.toFloatAttributesList(): MutableList<MutablePair<String, Float>> {\n    return toFloatAttributes().mapTo(mutableListOf()) { it.key mto it.value }\n}\n\nfun List<MutablePair<String, Float>>.toResource(): String {\n    return joinToString { \"${it.first}: ${it.second}\" }\n}\n","package featurea.content\n\nimport featurea.utils.divide\nimport featurea.utils.isClassPrimitive\nimport featurea.utils.toSimpleName\nimport kotlin.collections.component1\nimport kotlin.collections.component2\nimport kotlin.collections.get\nimport kotlin.collections.set\n\nprivate const val INTERNAL = \"internal\"\n\nclass ResourceSchema {\n\n    private val properties = mutableMapOf<String, String>()\n    val canonicalClassNameByKey = linkedMapOf<String, String>()\n    val simpleClassNameByKey = linkedMapOf<String, String>()\n    val superCanonicalClassNameByKey = linkedMapOf<String, String?>()\n    val rmlTagNameByCanonicalClassName = linkedMapOf<String, String>()\n    private val superRmlTagNamesByRmlTagName = linkedMapOf<String, List<String>>()\n    val attributeNamesByRmlTagName = ResourceAttributeNamesByRmlTagName()\n    private val superRmlTagNameByRmlTagName = SuperRmlTagNameByRmlTagName()\n    val attributesByTagName = linkedMapOf<String, MutableList<ResourceAttribute>>()\n\n    operator fun get(key: String?): String? {\n        return properties[key]\n    }\n\n    fun findSuperKeyForKeyOrNull(key: String): String? {\n        val (rmlTagName, attributeName) = key.divide(\".\")\n        val superRmlTagName: String = superRmlTagNameByRmlTagName[rmlTagName] ?: return null\n        if (attributeName == null) {\n            return superRmlTagName\n        } else {\n            return \"$superRmlTagName.$attributeName\"\n        }\n    }\n\n    fun appendProperties(properties: Map<String, String>) {\n        var currentRmlTagName: String? = null\n        for ((key, value) in properties) {\n            val (rmlTagName, attributeName) = key.divide(\".\")\n            if (attributeName == null) {\n                currentRmlTagName = rmlTagName\n                createRmlTagNameProperty(rmlTagName, value)\n            } else {\n                requireNotNull(currentRmlTagName) { \"$key: $value\" }\n                require(rmlTagName == currentRmlTagName) { \"$key: $value\" }\n                createResourceAttributeNameProperty(rmlTagName, attributeName, value)\n            }\n        }\n    }\n\n    fun clearCaches() {\n        properties.clear()\n        canonicalClassNameByKey.clear()\n        simpleClassNameByKey.clear()\n        superCanonicalClassNameByKey.clear()\n        rmlTagNameByCanonicalClassName.clear()\n        superRmlTagNamesByRmlTagName.clear()\n        attributesByTagName.clear()\n    }\n\n    /*internals*/\n\n    private fun createRmlTagNameProperty(rmlTagName: String, rmlTagType: String) {\n        val (canonicalClassName, superCanonicalClassName) = rmlTagType.divide(\":\") { \"kotlin.Any\" }\n        val simpleClassName: String = canonicalClassName.toSimpleName()\n        if (superCanonicalClassName == null && !canonicalClassName.isClassPrimitive()) {\n            error(\"rmlTagType: $rmlTagType\")\n        }\n        val key: String = rmlTagName\n        properties[key] = rmlTagType\n        canonicalClassNameByKey[key] = canonicalClassName\n        simpleClassNameByKey[key] = simpleClassName\n        superCanonicalClassNameByKey[key] = superCanonicalClassName\n        rmlTagNameByCanonicalClassName[canonicalClassName] = rmlTagName\n        superRmlTagNamesByRmlTagName[rmlTagName] = run {\n            val result = mutableListOf<String>()\n            var superRmlTagName: String? = rmlTagNameByCanonicalClassName[superCanonicalClassName]\n            while (superRmlTagName != null) {\n                result.add(superRmlTagName)\n                superRmlTagName = superRmlTagNameByRmlTagName[superRmlTagName]\n            }\n            result\n        }\n        run/*create RML attribute names for superRmlTags from last to first*/ {\n            val superRmlTagNames: List<String>? = superRmlTagNamesByRmlTagName[rmlTagName]\n            if (superRmlTagNames != null && superRmlTagNames.isNotEmpty()) {\n                val superRmlTagName: String = superRmlTagNames.first()\n                val superAttributes: List<ResourceAttribute>? = attributesByTagName[superRmlTagName]\n                if (superAttributes != null) {\n                    for (superAttribute in superAttributes) {\n                        createResourceAttributeNameProperty(rmlTagName, superAttribute.key, superAttribute.value)\n                    }\n                }\n            }\n        }\n    }\n\n    private fun createResourceAttributeNameProperty(tagName: String, attributeName: String, attributeType: String) {\n        val (canonicalClassName, superCanonicalClassName) = attributeType.divide(\":\") { \"kotlin.Any\" }\n        if (superCanonicalClassName == null && !canonicalClassName.isClassPrimitive() && canonicalClassName != INTERNAL) {\n            error(\"attributeType: $attributeType\")\n        }\n        val simpleClassName: String = canonicalClassName.toSimpleName()\n        val key: String = \"$tagName.$attributeName\"\n        properties[key] = attributeType\n        canonicalClassNameByKey[key] = canonicalClassName\n        simpleClassNameByKey[key] = simpleClassName\n        superCanonicalClassNameByKey[key] = superCanonicalClassName\n        attributesByTagName[tagName] = (attributesByTagName[tagName] ?: mutableListOf()).apply {\n            val attribute: ResourceAttribute = ResourceAttribute(attributeName, attributeType)\n            if (canonicalClassName != INTERNAL) {\n                add(attribute)\n            } else {\n                remove(attribute)\n            }\n        }\n    }\n\n    inner class ResourceAttributeNamesByRmlTagName : Iterable<MutableList<ResourceAttribute>> {\n        operator fun get(key: String?) = attributesByTagName[key]?.map { it.key } ?: emptyList()\n        override fun iterator() = attributesByTagName.map { it.value }.iterator()\n    }\n\n    private inner class SuperRmlTagNameByRmlTagName {\n        operator fun get(key: String?): String? = superRmlTagNamesByRmlTagName[key]?.firstOrNull()\n        override fun toString() = superRmlTagNamesByRmlTagName.toString()\n    }\n\n}\n\n// child: BlendTest, parent: Test\nfun ResourceSchema.isSuper(child: String, parent: String): Boolean {\n    var current: String? = child\n    while (true) {\n        if (current == parent) return true\n        if (current == null) return false\n        current = superCanonicalClassNameByKey[current]?.toSimpleName()\n    }\n}\n","package featurea.content\n\nclass ResourceTag {\n\n    val name: String\n    var parent: ResourceTag?\n        internal set\n    var filePath: String\n        internal set\n\n    constructor(name: String) {\n        this.name = name\n        this.parent = null\n        this.filePath = UNDEFINED_RESOURCE_PATH\n    }\n\n    constructor(name: String, parent: ResourceTag) {\n        this.name = name\n        this.parent = parent\n        this.filePath = parent.filePath\n    }\n\n    constructor(name: String, filePath: String) {\n        this.name = name\n        this.parent = null\n        this.filePath = filePath\n    }\n\n    val properties = mutableMapOf<String, ResourceTag>()\n    val attributes = mutableMapOf<String, String>()\n    val children = mutableListOf<ResourceTag>()\n    val idOrNull: String? get() = attributes[\"id\"]\n    val root: ResourceTag get() = parent?.root ?: this\n    val isRoot: Boolean get() = parent == null\n    val packageId: String get() = root.attributes[\"package\"] ?: throw error(filePath)\n\n    override fun toString() = \"ResourceTag(name: $name, properties: $properties, children: $children)\"\n\n}\n\nfun ResourceTag.appendChildResourceTag(child: ResourceTag) {\n    require(!children.contains(child))\n    children.add(child)\n\n    // >> todo make this consistent\n    val childId = child.idOrNull\n    if (childId != null) {\n        properties[childId] = child\n    }\n    // <<\n\n    // >> todo replace it to `assignChild` method by fixing RmlFileParser\n    require(child.parent == null)\n    child.parent = this\n    child.filePath = this.filePath\n    // <<\n}\n\nfun ResourceTag.removeChildResourceTag(child: ResourceTag) {\n    require(children.contains(child))\n    children.remove(child)\n    require(child.parent != null)\n    child.parent = null\n    child.filePath = UNDEFINED_RESOURCE_PATH\n}\n","package featurea.content\n\nimport featurea.Properties\nimport featurea.System\nimport featurea.runtime.Artifact\nimport featurea.utils.PropertyDelegate\nimport featurea.utils.SystemPropertyDelegate\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.content\") {\n    include(featurea.utils.artifact)\n\n    \"Content\" to Content::class\n    \"ContentTypeRegistry\" to ::ContentTypeRegistry\n\n    static {\n        provideComponent(Content(container = this))\n    }\n}\n\n/*properties*/\n\nvar Properties.mainDocument: String by PropertyDelegate(\"mainDocument\") { \"main\" }\nvar Properties.mainProject: String by PropertyDelegate(\"mainProject\") { error(\"mainProject\") }\nval Properties.packageId: String by PropertyDelegate(\"package\") { error(\"package\") }\nval Properties.resources: String by PropertyDelegate(\"resources\") { \"\" }\nvar System.rmlExtensions: List<String> by SystemPropertyDelegate(\"rmlExtensions\") { listOf(\"project\", \"rml\") }\nvar System.textExtensions: List<String> by SystemPropertyDelegate(\"textExtensions\") { listOf(\"c\", \"kts\") }\n","package featurea.content\n\nimport featurea.Bundle\n\ninterface ResourceReader {\n    suspend fun createIfAbsent(resourcePath: String) {}\n    suspend fun readOrNull(resourcePath: String, bundle: Bundle?): Resource?\n}\n","package featurea.content\n\nimport featurea.Bundle\n\ninterface ResourceWriter {\n    suspend fun accept(resourceTag: ResourceTag, key: String, value: String, bundle: Bundle): Boolean = true\n    suspend fun write(resourceTag: ResourceTag, key: String, value: String, bundle: Bundle)\n    suspend fun flush(bundle: Bundle) {}\n}\n","package featurea.content\n\nimport featurea.utils.hasExtension\nimport featurea.utils.isValidFilePath\n\nconst val pngExtension: String = \"png\"\nconst val mp3Extension: String = \"mp3\"\nconst val jpgExtension: String = \"jpg\"\nconst val jpegExtension: String = \"jpeg\"\nconst val gifExtension: String = \"gif\"\nconst val propertiesExtension: String = \"properties\"\nconst val shaderExtension: String = \"shader\"\n\nfun String.isValidImageResource(): Boolean {\n    return isValidFilePath() && hasExtension(pngExtension, jpgExtension, jpegExtension, gifExtension)\n}\n\nfun String.isValidAudioResource(): Boolean {\n    return isValidFilePath() && hasExtension(mp3Extension)\n}\n","package featurea.js\n\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.Window\n\n// >> https://stackoverflow.com/a/11284322/909169\nprivate const val IPHONE_KEYBOARD_HEIGHT_PORTRAIT: Int = 216\nprivate const val IPHONE_KEYBOARD_HEIGHT_LANDSCAPE: Int = 162\n// <<\n\nval Window.isMobileKeyboardVisible: Boolean\n    get() {\n        if (!isUserAgentMobile) {\n            return false\n        }\n        val keyboardHeight: Int = keyboardHeight\n        val result: Boolean = keyboardHeight > 144 * devicePixelRatio\n        println(\"keyboardHeight: $keyboardHeight\")\n        println(\"isMobileKeyboardVisible: $result\")\n        return result\n    }\n\nval Window.keyboardHeight: Int\n    get() {\n        if (!isUserAgentMobile) {\n            return 0\n        }\n        val devicePixelRatio = devicePixelRatio.toInt()\n        val mainCanvas: Element? = document.querySelector(\"#mainCanvas\")\n        val titleBarHeight: Int = if (mainCanvas is HTMLElement) {\n            mainCanvas.parentElement?.parentElement?.querySelector(\".titlebar\")?.clientHeight ?: 0\n        } else {\n            0\n        }\n        val result: Int = (CURRENT_HEIGHT + titleBarHeight - innerHeight) * devicePixelRatio\n        println(\"currentHeight: $CURRENT_HEIGHT\")\n        println(\"titleBarHeight: $titleBarHeight\")\n        println(\"innerHeight: $innerHeight\")\n        println(\"devicePixelRatio: $devicePixelRatio\")\n        println(\"keyboardHeight: $result\")\n        return result\n    }\n\nval Window.keyboardWidth: Int\n    get() {\n        if (!isUserAgentMobile) {\n            return 0\n        }\n        val devicePixelRatio = devicePixelRatio.toInt()\n        val result: Int = CURRENT_WIDTH * devicePixelRatio\n        println(\"currentWidth: $CURRENT_WIDTH\")\n        println(\"devicePixelRatio: $devicePixelRatio\")\n        println(\"keyboardWidth: $result\")\n        return result\n    }\n","package featurea.js\n\nimport kotlinx.browser.document\nimport org.w3c.dom.*\nimport org.w3c.dom.css.CSSStyleDeclaration\nimport kotlin.math.min\nimport kotlin.math.roundToInt\nimport kotlinx.browser.window as jsWindow\nimport org.w3c.dom.Window as JsWindow\n\nval isUserAgentMobile: Boolean = jsWindow.navigator.userAgent.toLowerCase().let {\n    it.contains(\"mobi\") || it.contains(\"tab\") || it.contains(\"ios\") || it.contains(\"android\")\n}\n\nval isUserAgentNotMobile: Boolean = !isUserAgentMobile\n\nval isUserAgentAndroid: Boolean get() = jsWindow.navigator.userAgent.toLowerCase().contains(\"android\")\n\nval isUserAgentIphone: Boolean get() = jsWindow.navigator.userAgent.toLowerCase().contains(\"iphone\")\n\n// https://stackoverflow.com/a/40130925/909169\nval isPortraitOrientation: Boolean\n    get() {\n        if (isUserAgentAndroid) {\n            return jsWindow.screen.height > jsWindow.screen.width\n        } else {\n            return jsWindow[\"orientation\"] == 0\n        }\n    }\n\nval isLandscapeOrientation: Boolean get() = !isPortraitOrientation\n\n// >> just for now todo revert\nval CURRENT_WIDTH: Int\n    get() {\n        if (isUserAgentMobile) {\n            if (isUserAgentAndroid) {\n                return fullscreenWidthOrNull ?: jsWindow./*outerWidth*/screen.width\n            } else {\n                if (isPortraitOrientation) {\n                    return fullscreenWidthOrNull ?: jsWindow./*outerWidth*/screen.width\n                } else {\n                    return fullscreenHeightOrNull ?: jsWindow./*outerHeight*/screen.height\n                }\n            }\n        } else {\n            return fullscreenWidthOrNull ?: jsWindow./*outerWidth*/screen.width\n        }\n    }\n\nval fullscreenHeightOrNull: Int? get() = document.fullscreenElement?.clientHeight\nval fullscreenWidthOrNull: Int? get() = document.fullscreenElement?.clientWidth\n\nval CURRENT_HEIGHT: Int\n    get() {\n        if (isUserAgentMobile) {\n            val mainCanvas: Element? = document.querySelector(\"#mainCanvas\") // quickfix todo improve\n            if (mainCanvas is HTMLElement) {\n                val style: CSSStyleDeclaration = mainCanvas.style\n                if (isUserAgentAndroid) {\n                    println(\"[JsUtils] outerHeight: ${jsWindow.outerHeight}\")\n                    println(\"[JsUtils] style.height: ${style.height}\")\n                    val result: Int = fullscreenHeightOrNull ?: if (isPortraitOrientation) {\n                        style.height.pxToInt(jsWindow.outerHeight)\n                    } else {\n                        min(style.height.pxToInt(jsWindow.outerHeight), jsWindow.outerHeight)\n                    }\n                    println(\"[Support] CURRENT_HEIGHT: $result (android)\")\n                    return result\n                } else {\n                    if (isPortraitOrientation) {\n                        val result: Int = fullscreenHeightOrNull ?: min(style.height.pxToInt(jsWindow.outerHeight), jsWindow.outerHeight)\n                        println(\"[Support] CURRENT_HEIGHT: $result (ios)\")\n                        return result\n                    } else {\n                        val result: Int =\n                            fullscreenWidthOrNull ?: min(style.width.pxToInt(jsWindow.outerWidth), jsWindow.outerWidth)\n                        println(\"[Support] CURRENT_HEIGHT: $result (ios)\")\n                        return result\n                    }\n                }\n            }\n        }\n        return fullscreenHeightOrNull ?: jsWindow.outerHeight\n    }\n// <<\n\nfun CSSStyleDeclaration.applyCssAttribute(attribute: Pair<String, String>) {\n    cssText = cssText.plus(\" ${attribute.first}: ${attribute.second};\")\n}\n\nfun DOMRect.contains(x: Int, y: Int, epsilon: Int = 0): Boolean {\n    return left - epsilon <= x && right + epsilon >= x && top - epsilon <= y && bottom + epsilon >= y\n}\n\nfun WebSocket.onopen(timeout: Int, block: () -> Unit) {\n    onopen = {\n        block()\n    }\n    jsWindow.setTimeout({\n        if (readyState != WebSocket.OPEN) {\n            close()\n        }\n    }, timeout)\n}\n\nfun WebSocket.closeWithoutEvents() {\n    onmessage = {}\n    onclose = {}\n    onerror = {}\n    if (readyState == WebSocket.OPEN || readyState == WebSocket.CONNECTING) {\n        close()\n    }\n}\n\n// https://stackoverflow.com/a/39276894/909169\n/**\n * @return glWidth and glHeight\n */\nfun HTMLCanvasElement.setHtmlCanvasSize(width: Int, height: Int): Pair<Int, Int> {\n    val glWidth = (width * jsWindow.devicePixelRatio).roundToInt()\n    val glHeight = (height * jsWindow.devicePixelRatio).roundToInt()\n    println(\"setHtmlCanvasSize: $width, $height, $glWidth, $glHeight (${fullscreenHeightOrNull}, ${document.fullscreenElement == this})\")\n    this.style.width = \"${width}px\"\n    this.style.height = \"${height}px\"\n    this.width = glWidth\n    this.height = glHeight\n    return glWidth to glHeight\n}\n\nval HTMLElement.glWidth: Int get() = (clientWidth * jsWindow.devicePixelRatio).roundToInt() // https://www.khronos.org/webgl/wiki/HandlingHighDPI\n\nval HTMLElement.glHeight: Int get() = (clientHeight * jsWindow.devicePixelRatio).roundToInt() // https://www.khronos.org/webgl/wiki/HandlingHighDPI\n\nfun HTMLElement.setSize(width: Int, height: Int) {\n    this.style.width = \"${width}px\"\n    this.style.height = \"${height}px\"\n}\n\nfun HTMLElement.setPosition(x: Int, y: Int) {\n    this.style.left = \"${x}px\"\n    this.style.top = \"${y}px\"\n}\n\nfun String.pxToInt(default: Int): Int {\n    if (this.isBlank()) return default\n    try {\n        return removeSuffix(\"px\").toInt()\n    } catch (e: Exception) {\n        return default\n    }\n}\n\nfun JsWindow.loadBody(block: () -> Unit) {\n    if (document.readyState == DocumentReadyState.COMPLETE) {\n        block()\n    } else {\n        onload = { block() }\n    }\n}\n\nfun keep(ref: Any?) {\n    // no op\n}\n\nfun Element.containsRecursively(predicate: (Element) -> Boolean): Boolean {\n    var currentElement: Element? = this\n    while (true) {\n        if (currentElement == null) return false\n        if (predicate(currentElement)) return true\n        currentElement = currentElement.parentElement\n    }\n}\n\nfun export(key: String, block: dynamic) {\n    jsWindow.asDynamic()[key] = block\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.encryptedmedia.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.mediasource.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: MediaProvider?\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    open val mediaKeys: MediaKeys?\n    open var onencrypted: ((Event) -> dynamic)?\n    open var onwaitingforkey: ((Event) -> dynamic)?\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n    fun setMediaKeys(mediaKeys: MediaKeys?): Promise<Unit>\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n    open val sourceBuffer: SourceBuffer?\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n    open val sourceBuffer: SourceBuffer?\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    open val sourceBuffer: SourceBuffer?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun requestMediaKeySystemAccess(keySystem: String, supportedConfigurations: Array<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface MediaProvider\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()","package featurea.js\n\nfun <K, V> dynamicMapOf(vararg pairs: Pair<K, V>): dynamic {\n    val arguments: dynamic = js(\"({})\")\n    for ((key, value) in pairs) {\n        arguments[key] = value\n    }\n    return arguments\n}\n","package featurea.math\n\nclass Angle {\n\n    constructor()\n\n    constructor(value: Float) {\n        this.value = value.toDouble()\n    }\n\n    constructor(value: Double) {\n        this.value = value\n    }\n\n    var value: Double = 0.0\n        set(value) {\n            field = value\n            cos = cosDeg(value)\n            sin = sinDeg(value)\n        }\n    var cos: Double = 0.0\n        private set\n    var sin: Double = 0.0\n        private set\n\n    fun isEmpty(): Boolean = value == 0.0\n\n    fun isNotEmpty(): Boolean = value != 0.0\n\n    operator fun plusAssign(value: Double) {\n        this.value += value\n    }\n\n    operator fun minusAssign(value: Double) {\n        this.value -= value\n    }\n\n    fun assign(value: Double): Angle {\n        this.value = value\n        return this\n    }\n\n    fun assign(value: String): Angle {\n        this.value = value.toDouble()\n        return this\n    }\n\n    fun assign(original: Angle): Angle {\n        this.value = original.value\n        return this\n    }\n\n}\n","package featurea.math\n\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.pow\nimport kotlin.math.sin\n\nconst val PI: Float = 3.14159f\n\nfun cosDeg(degree: Double): Double {\n    val radians = degree.toRadians()\n    return cos(radians)\n}\n\nfun sinDeg(degree: Double): Double {\n    val radians = degree.toRadians()\n    return sin(radians)\n}\n\nfun nextPowerOfTwo(value: Int): Int {\n    var value = value\n    if (value == 0) {\n        return 1\n    }\n    value--\n    value = value or (value shr 1)\n    value = value or (value shr 2)\n    value = value or (value shr 4)\n    value = value or (value shr 8)\n    value = value or (value shr 16)\n    return value + 1\n}\n\nfun minIndex(vararg values: Float): Int {\n    if (values.isEmpty()) return -1\n    var minValue = values[0]\n    var minIndex = 0\n    for (index in values.indices) {\n        if (minValue > values[index]) {\n            minValue = values[index]\n            minIndex = index\n        }\n    }\n    return minIndex\n}\n\nfun min(a: Float, b: Float): Float = if (a <= b) a else b\nfun max(a: Float, b: Float): Float = if (a >= b) a else b\nfun min(a: Double, b: Double): Double = if (a <= b) a else b\nfun max(a: Double, b: Double): Double = if (a >= b) a else b\nfun cbrt(value: Int): Double = value.toDouble().pow(1 / 3.toDouble())\nfun cbrt(value: Double): Double = value.pow(1 / 3.toDouble())\nfun Double.toRadians(): Double = this / 180.0 * PI\nfun Double.toDegrees(): Double = this / PI * 180.0\nfun Float.toRadians(): Float = this / 180f * featurea.math.PI\nfun Float.toDegrees(): Float = this / featurea.math.PI * 180f\n\nfun clamp(value: Double, min: Double = 0.0, max: Double = 1.0): Double {\n    return if (value < min) min else if (value > max) max else value\n}\n\nfun clamp(value: Float, min: Float = 0f, max: Float = 1f): Float {\n    return if (value < min) min else if (value > max) max else value\n}\n\nfun clamp(value: Int, min: Int = 0, max: Int = 1): Int {\n    return if (value < min) min else if (value > max) max else value\n}\n","package featurea.math\n\nimport kotlin.math.tan\n\ntypealias Matrix = Matrix4\n\nprivate const val i00: Int = 0\nprivate const val i01: Int = 1\nprivate const val i02: Int = 2\nprivate const val i03: Int = 3\nprivate const val i10: Int = 4\nprivate const val i11: Int = 5\nprivate const val i12: Int = 6\nprivate const val i13: Int = 7\nprivate const val i20: Int = 8\nprivate const val i21: Int = 9\nprivate const val i22: Int = 10\nprivate const val i23: Int = 11\nprivate const val i30: Int = 12\nprivate const val i31: Int = 13\nprivate const val i32: Int = 14\nprivate const val i33: Int = 15\n\nclass Matrix4 {\n\n    var m00: Float = 0f\n        private set\n    var m01: Float = 0f\n        private set\n    var m02: Float = 0f\n        private set\n    var m03: Float = 0f\n        private set\n    var m10: Float = 0f\n        private set\n    var m11: Float = 0f\n        private set\n    var m12: Float = 0f\n        private set\n    var m13: Float = 0f\n        private set\n    var m20: Float = 0f\n        private set\n    var m21: Float = 0f\n        private set\n    var m22: Float = 0f\n        private set\n    var m23: Float = 0f\n        private set\n    var m30: Float = 0f\n        private set\n    var m31: Float = 0f\n        private set\n    var m32: Float = 0f\n        private set\n    var m33: Float = 0f\n        private set\n\n    init {\n        assignIdentity()\n    }\n\n    fun assignIdentity(): Matrix4 {\n        return assign(IdentityMatrixArray16)\n    }\n\n    fun assignZero(): Matrix4 {\n        return assign(ZeroMatrixArray16)\n    }\n\n    fun assign(original: Matrix4): Matrix4 {\n        m00 = original.m00; m01 = original.m01; m02 = original.m02; m03 = original.m03\n        m10 = original.m10; m11 = original.m11; m12 = original.m12; m13 = original.m13\n        m20 = original.m20; m21 = original.m21; m22 = original.m22; m23 = original.m23\n        m30 = original.m30; m31 = original.m31; m32 = original.m32; m33 = original.m33\n        return this\n    }\n\n    fun assign(original: FloatArray): Matrix4 {\n        m00 = original[i00]; m01 = original[i01]; m02 = original[i02]; m03 = original[i03]\n        m10 = original[i10]; m11 = original[i11]; m12 = original[i12]; m13 = original[i13]\n        m20 = original[i20]; m21 = original[i21]; m22 = original[i22]; m23 = original[i23]\n        m30 = original[i30]; m31 = original[i31]; m32 = original[i32]; m33 = original[i33]\n        return this\n    }\n\n    fun assignTranslation(translation: Vector2): Matrix4 {\n        return assignTranslation(translation.x, translation.y)\n    }\n\n    fun assignTranslation(translation: Vector3): Matrix4 {\n        return assignTranslation(translation.x, translation.y, translation.z)\n    }\n\n    fun assignTranslation(tx: Float, ty: Float): Matrix4 {\n        assignIdentity()\n        return translate(tx, ty)\n    }\n\n    fun assignTranslation(tx: Float, ty: Float, tz: Float): Matrix4 {\n        assignIdentity()\n        return translate(tx, ty, tz)\n    }\n\n    fun translate(translation: Vector2): Matrix4 {\n        return translate(translation.x, translation.y)\n    }\n\n    fun translate(dx: Float, dy: Float): Matrix4 {\n        m30 += m00 * dx + m10 * dy\n        m31 += m01 * dx + m11 * dy\n        m32 += m02 * dx + m12 * dy\n        m33 += m03 * dx + m13 * dy\n        return this\n    }\n\n    fun translate(translation: Vector3): Matrix4 {\n        return translate(translation.x, translation.y, translation.z)\n    }\n\n    fun translate(dx: Float, dy: Float, dz: Float): Matrix4 {\n        m30 += m00 * dx + m10 * dy + m20 * dz\n        m31 += m01 * dx + m11 * dy + m21 * dz\n        m32 += m02 * dx + m12 * dy + m22 * dz\n        m33 += m03 * dx + m13 * dy + m23 * dz\n        return this\n    }\n\n    fun assignScale(scale: Vector2): Matrix4 {\n        return assignScale(scale.x, scale.y)\n    }\n\n    fun assignScale(sx: Float, sy: Float): Matrix4 {\n        assignIdentity()\n        return scale(sx, sy)\n    }\n\n    fun scale(sfactor: Float): Matrix4 {\n        return scale(sfactor, sfactor, sfactor)\n    }\n\n    fun scale(sx: Float, sy: Float): Matrix4 {\n        m00 *= sx; m01 *= sx; m02 *= sx; m03 *= sx\n        m10 *= sy; m11 *= sy; m12 *= sy; m13 *= sy\n        return this\n    }\n\n    fun scale(sx: Float, sy: Float, sz: Float): Matrix4 {\n        m00 *= sx; m01 *= sx; m02 *= sx; m03 *= sx\n        m10 *= sy; m11 *= sy; m12 *= sy; m13 *= sy\n        m20 *= sz; m21 *= sz; m22 *= sz; m23 *= sz\n        return this\n    }\n\n    fun assignMultiplication(right: Matrix4): Matrix4 {\n        return assignMultiplication(this, right)\n    }\n\n    fun assignMultiplication(left: Matrix4, right: Matrix4): Matrix4 {\n        val m00 = left.m00 * right.m00 + left.m10 * right.m01 + left.m20 * right.m02 + left.m30 * right.m03\n        val m01 = left.m01 * right.m00 + left.m11 * right.m01 + left.m21 * right.m02 + left.m31 * right.m03\n        val m02 = left.m02 * right.m00 + left.m12 * right.m01 + left.m22 * right.m02 + left.m32 * right.m03\n        val m03 = left.m03 * right.m00 + left.m13 * right.m01 + left.m23 * right.m02 + left.m33 * right.m03\n        val m10 = left.m00 * right.m10 + left.m10 * right.m11 + left.m20 * right.m12 + left.m30 * right.m13\n        val m11 = left.m01 * right.m10 + left.m11 * right.m11 + left.m21 * right.m12 + left.m31 * right.m13\n        val m12 = left.m02 * right.m10 + left.m12 * right.m11 + left.m22 * right.m12 + left.m32 * right.m13\n        val m13 = left.m03 * right.m10 + left.m13 * right.m11 + left.m23 * right.m12 + left.m33 * right.m13\n        val m20 = left.m00 * right.m20 + left.m10 * right.m21 + left.m20 * right.m22 + left.m30 * right.m23\n        val m21 = left.m01 * right.m20 + left.m11 * right.m21 + left.m21 * right.m22 + left.m31 * right.m23\n        val m22 = left.m02 * right.m20 + left.m12 * right.m21 + left.m22 * right.m22 + left.m32 * right.m23\n        val m23 = left.m03 * right.m20 + left.m13 * right.m21 + left.m23 * right.m22 + left.m33 * right.m23\n        val m30 = left.m00 * right.m30 + left.m10 * right.m31 + left.m20 * right.m32 + left.m30 * right.m33\n        val m31 = left.m01 * right.m30 + left.m11 * right.m31 + left.m21 * right.m32 + left.m31 * right.m33\n        val m32 = left.m02 * right.m30 + left.m12 * right.m31 + left.m22 * right.m32 + left.m32 * right.m33\n        val m33 = left.m03 * right.m30 + left.m13 * right.m31 + left.m23 * right.m32 + left.m33 * right.m33\n        this.m00 = m00; this.m01 = m01; this.m02 = m02; this.m03 = m03\n        this.m10 = m10; this.m11 = m11; this.m12 = m12; this.m13 = m13\n        this.m20 = m20; this.m21 = m21; this.m22 = m22; this.m23 = m23\n        this.m30 = m30; this.m31 = m31; this.m32 = m32; this.m33 = m33\n        return this\n    }\n\n    fun assignOrtho(x: Int, y: Int, width: Int, height: Int): Matrix4 {\n        return assignOrtho(x.toFloat(), y.toFloat(), width.toFloat(), height.toFloat())\n    }\n\n    fun assignOrtho(x: Float, y: Float, width: Float, height: Float): Matrix4 {\n        return assignOrtho(left = x, right = x + width, bottom = y + height, top = y, near = 1f/*0?*/, far = 0f/*1?*/)\n    }\n\n    // https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml\n    fun assignOrtho(left: Float, right: Float, bottom: Float, top: Float, near: Float, far: Float): Matrix4 {\n        val ox = 2 / (right - left)\n        val oy = 2 / (top - bottom)\n        val oz = -2 / (far - near)\n        val tx = -(right + left) / (right - left)\n        val ty = -(top + bottom) / (top - bottom)\n        val tz = -(far + near) / (far - near)\n        m00 = ox; m01 = 0f; m02 = 0f; m03 = 0f\n        m10 = 0f; m11 = oy; m12 = 0f; m13 = 0f\n        m20 = 0f; m21 = 0f; m22 = oz; m23 = 0f\n        m30 = tx; m31 = ty; m32 = tz; m33 = 1f\n        return this\n    }\n\n    // https://github.com/libgdx/libgdx/blob/c981d375463126f18f13a62e3aadd98da1b8352d/gdx/src/com/badlogic/gdx/math/Matrix4.java#L478\n    fun assignPerspective(near: Float, far: Float, fovy: Float, aspectRatio: Float): Matrix4 {\n        val ty: Float = (1f / tan(fovy * (PI / 180f) / 2f))\n        val tx: Float = ty / aspectRatio\n        val tz: Float = (far + near) / (near - far)\n        val t2: Float = 2f * far * near / (near - far)\n        m00 = tx; m01 = 0f; m02 = 0f; m03 = 0f\n        m10 = 0f; m11 = ty; m12 = 0f; m13 = 0f\n        m20 = 0f; m21 = 0f; m22 = tz; m23 = -1f\n        m30 = 0f; m31 = 0f; m32 = t2; m33 = 0f\n        return this\n    }\n\n    fun assignLookAt(position: Vector3, target: Vector3, up: Vector3): Matrix4 {\n        val right: Matrix = Pool.matrix0\n        val direction: Vector = Pool.vertex0\n        direction.assign(target).minusAssign(position)\n        assignLookAt(direction, up)\n        assignMultiplication(right.assignTranslation(-position.x, -position.y, -position.z))\n        return this\n    }\n\n    fun assignLookAt(direction: Vector3, up: Vector3): Matrix4 {\n        val vectorX: Vector = Pool.vertex1\n        val vectorY: Vector = Pool.vertex2\n        val vectorZ: Vector = Pool.vertex3\n        vectorZ.assign(direction).normalize()\n        vectorX.assign(direction).assignCross(up).normalize()\n        vectorY.assign(vectorX).assignCross(vectorZ).normalize()\n        assignIdentity()\n        m00 = vectorX.x\n        m01 = vectorY.x\n        m02 = -vectorZ.x\n        m10 = vectorX.y\n        m11 = vectorY.y\n        m12 = -vectorZ.y\n        m20 = vectorX.z\n        m21 = vectorY.z\n        m22 = -vectorZ.z\n        return this\n    }\n\n    // https://math.stackexchange.com/a/2093322/262743\n    fun rotate(angle: Angle): Matrix4 {\n        val cos = angle.cos.toFloat()\n        val sin = angle.sin.toFloat()\n        assignMultiplication(ROTATION_MATRIX.apply {\n            m00 = cos; m01 = -sin\n            m10 = sin; m11 = cos\n        })\n        return this\n    }\n\n    fun rotate(x: Float, y: Float, angle: Double): Matrix4 {\n        return rotate(x, y, ANGLE.assign(angle))\n    }\n\n    fun rotate(x: Float, y: Float, angle: Angle): Matrix4 {\n        translate(x, y)\n        rotate(angle)\n        translate(-x, -y)\n        return this\n    }\n\n    fun rotate(axis: Vector, angle: Double): Matrix4 {\n        val (x, y, z) = axis\n        return rotate(x, y, z, angle)\n    }\n\n    fun rotate(axis: Vector, angle: Angle): Matrix4 {\n        val (x, y, z) = axis\n        return rotate(x, y, z, angle)\n    }\n\n    fun rotate(x: Float, y: Float, z: Float, angle: Double): Matrix4 {\n        return rotate(x, y, z, ANGLE.assign(angle))\n    }\n\n    fun rotate(x: Float, y: Float, z: Float, angle: Angle): Matrix4 {\n        translate(x, y, z)\n        rotate(angle)\n        translate(-x, -y, -z)\n        return this\n    }\n\n    override fun toString() = \"\"\"\n        $m00, $m10, $m20, $m30\n        $m01, $m11, $m21, $m31\n        $m02, $m12, $m22, $m32\n        $m03, $m13, $m23, $m33\n        \"\"\".trimIndent()\n\n    private object Pool {\n        val vertex0: Vector get() = VERTICES[0].assign(0f, 0f, 0f)\n        val vertex1: Vector get() = VERTICES[1].assign(0f, 0f, 0f)\n        val vertex2: Vector get() = VERTICES[2].assign(0f, 0f, 0f)\n        val vertex3: Vector get() = VERTICES[3].assign(0f, 0f, 0f)\n        private val VERTICES: Array<Vector> = Array(size = 4) { Vector() }\n        val matrix0: Matrix get() = MATRICES[0].assignIdentity()\n        private val MATRICES: Array<Matrix> = Array(size = 1) { Matrix() }\n    }\n\n}\n\nfun Matrix.copyToArray16(array16: FloatArray): FloatArray = array16.apply {\n    this[i00] = m00; this[i01] = m01; this[i02] = m02; this[i03] = m03\n    this[i10] = m10; this[i11] = m11; this[i12] = m12; this[i13] = m13\n    this[i20] = m20; this[i21] = m21; this[i22] = m22; this[i23] = m23\n    this[i30] = m30; this[i31] = m31; this[i32] = m32; this[i33] = m33\n}\n\n/*\nM times v equals v`: M * v = v`\n\n|m00 m10 m20 m30|    x    x`\n|m01 m11 m21 m31|    y    y`\n|m02 m12 m22 m32|    0    0\n|m03 m13 m23 m33|    1    1\n*/\noperator fun Matrix4.times(vector: Vector2): Vector2 {\n    val matrix = this\n    val x = matrix.m00 * vector.x + matrix.m10 * vector.y + matrix.m30\n    val y = matrix.m01 * vector.x + matrix.m11 * vector.y + matrix.m31\n    return Point(x, y)\n}\n\noperator fun Matrix4.times(vector: Vector2.Result): Vector2 {\n    val matrix = this\n    val (vx, vy) = vector\n    val x = matrix.m00 * vx + matrix.m10 * vy + matrix.m30\n    val y = matrix.m01 * vx + matrix.m11 * vy + matrix.m31\n    return Point(x, y)\n}\n\n/*\n        M * v = v`\n\n|m00 m10 m20 m30|    x    x`\n|m01 m11 m21 m31|    y    y`\n|m02 m12 m22 m32|    z    z`\n|m03 m13 m23 m33|    1    1\n*/\noperator fun Matrix4.times(vector: Vector3): Vector3 {\n    val matrix = this\n    val x = matrix.m00 * vector.x + matrix.m10 * vector.y + matrix.m20 * vector.z + matrix.m30\n    val y = matrix.m01 * vector.x + matrix.m11 * vector.y + matrix.m21 * vector.z + matrix.m31\n    val z = matrix.m02 * vector.x + matrix.m12 * vector.y + matrix.m22 * vector.z + matrix.m32\n    return Vector(x, y, z)\n}\n\n/*internals*/\n\nprivate val IdentityMatrixArray16: FloatArray = floatArrayOf(\n    1.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 1.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 1.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 1.0f\n)\n\nprivate val ZeroMatrixArray16: FloatArray = floatArrayOf(\n    0.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 0.0f\n)\n\nprivate val ROTATION_MATRIX: Matrix = Matrix() // quickfix todo improve\n\nprivate val ANGLE: Angle = Angle()\n","package featurea.math\n\nimport kotlin.annotation.AnnotationTarget.CLASS\nimport kotlin.annotation.AnnotationTarget.FUNCTION\nimport kotlin.math.pow\n\n@Suppress(\"DEPRECATION\")\n@Experimental(level = Experimental.Level.ERROR)\n@RequiresOptIn(level = RequiresOptIn.Level.ERROR)\n@Target(CLASS, FUNCTION)\n@Retention(AnnotationRetention.BINARY)\nannotation class ExperimentalPrecision\n\n/*\nGLSL language for OpenGL ES introduces concept of precision\n\nhttps://asawicki.info/news_1596_watch_out_for_reduced_precision_normalizelength_in_opengl_es.html\n\nhighp basically means normal, single-precision, 32-bit float (IEEE 754), as we know it from CPU programming.\nmediump is said to have have range of at least -2^14 ... 2^14 and relative precision 2^-10, so it can be, for example, implemented using a 16-bit, half-precision float.\nlowp is said to have range at least -2 ... 2 and absolute precision 2^-8, so basically it can be stored as a 10-bit, fixed-point number.\n\n*/\n\nval epsilonMediumPrecision: Float = 2f.pow(-10)\nval Float.prevIntMediumPrecision: Int get() = (this - epsilonMediumPrecision).toInt()\nval Float.nextIntMediumPrecision: Int get() = prevIntMediumPrecision + 1\n\n@ExperimentalPrecision\nfun Float.toPixelPerfectFloat(): Float = prevIntMediumPrecision.toFloat() + 0.5f\n\nenum class Precision {\n    MEDIUM,\n}\n","package featurea.math\n\ndata class Rectangle(var x1: Float = 0f, var y1: Float = 0f, var x2: Float = 0f, var y2: Float = 0f) {\n\n    constructor(rectangle: Rectangle) : this(rectangle.x1, rectangle.y1, rectangle.x2, rectangle.y2)\n\n    val left: Float get() = x1\n    val top: Float get() = y1\n    val right: Float get() = x2\n    val bottom: Float get() = y2\n    val width: Float get() = right - left\n    val height: Float get() = bottom - top\n    val centerX: Float get() = (x1 + x2) / 2f\n    val centerY: Float get() = (y1 + y2) / 2f\n    fun isEmpty(): Boolean = width == 0f && height == 0f\n    fun isNotEmpty(): Boolean = !isEmpty()\n    private val sizeResult: Size = Size()\n    val size: Size get() = sizeResult.assign(width, height)\n\n    fun assign(x: Float, y: Float): Rectangle {\n        this.x1 = x\n        this.y1 = y\n        this.x2 = x\n        this.y2 = y\n        return this\n    }\n\n    fun assign(x1: Float, y1: Float, x2: Float, y2: Float): Rectangle {\n        this.x1 = x1\n        this.y1 = y1\n        this.x2 = x2\n        this.y2 = y2\n        return this\n    }\n\n    fun assign(size: Size): Rectangle {\n        x1 = 0f\n        y1 = 0f\n        x2 = size.width\n        y2 = size.height\n        return this\n    }\n\n    fun assign(point: Point, size: Size): Rectangle {\n        this.x1 = point.x\n        this.y1 = point.y\n        this.x2 = this.x1 + size.width\n        this.y2 = this.y1 + size.height\n        return this\n    }\n\n    fun assign(point: Point, rectangle: Rectangle): Rectangle {\n        this.x1 = rectangle.x1 + point.x\n        this.y1 = rectangle.y1 + point.y\n        this.x2 = rectangle.x2 + point.x\n        this.y2 = rectangle.y2 + point.y\n        return this\n    }\n\n    infix fun assign(rectangle: Rectangle): Rectangle {\n        this.x1 = rectangle.x1\n        this.y1 = rectangle.y1\n        this.x2 = rectangle.x2\n        this.y2 = rectangle.y2\n        return this\n    }\n\n    infix fun assign(rectangle: Rectangle.Result): Rectangle {\n        this.x1 = rectangle.left\n        this.y1 = rectangle.top\n        this.x2 = rectangle.right\n        this.y2 = rectangle.bottom\n        return this\n    }\n\n    fun assign(value: String): Rectangle {\n        val (x1, y1, x2, y2) = value.split(\",\").map { it.trim().toFloat() }\n        this.x1 = x1\n        this.y1 = y1\n        this.x2 = x2\n        this.y2 = y2\n        return this\n    }\n\n    fun move(vector: Vector2): Rectangle {\n        return move(vector.x, vector.y)\n    }\n\n    fun move(dx: Float, dy: Float): Rectangle {\n        x1 += dx\n        y1 += dy\n        x2 += dx\n        y2 += dy\n        return this\n    }\n\n    fun contains(x: Float, y: Float): Boolean = left < x && x < right && top < y && y < bottom\n\n    fun ensureSize(size: Size): Rectangle {\n        return ensureSize(size.width, size.height)\n    }\n\n    fun ensureSize(width: Float, height: Float): Rectangle {\n        x2 = x1 + width\n        y2 = y1 + height\n        return this\n    }\n\n    fun increaseSize(width: Int, height: Int): Rectangle {\n        x2 += width\n        y2 += height\n        return this\n    }\n\n    fun clear(): Rectangle {\n        x1 = 0f\n        y1 = 0f\n        x2 = 0f\n        y2 = 0f\n        return this\n    }\n\n    fun intersects(rectangle: Rectangle): Boolean {\n        return rectangle.x1 < x2 && rectangle.x2 > x1 && rectangle.y1 < y2 && rectangle.y2 > y1\n    }\n\n    fun normalizedRectangle(): Rectangle = Rectangle(\n        this\n    ).apply {\n        if (x2 < x1) {\n            val temp = x1; x1 = x2; x2 = temp\n        }\n        if (y2 < y1) {\n            val temp = y1; y1 = y2; y2 = temp\n        }\n    }\n\n    fun isValid(): Boolean = isRectangleValid(x1, y1, x2, y2)\n\n    override fun equals(other: Any?): Boolean =\n        (other is Rectangle && other.x1 == x1 && other.y1 == y1 && other.x2 == x2 && other.y2 == y2) ||\n                (other is Rectangle.Result && other.left == x1 && other.top == y1 && other.right == x2 && other.bottom == y2)\n\n    override fun toString(): String = \"Rectangle($x1, $y1, $x2, $y2)\"\n\n    override fun hashCode(): Int {\n        val prime = 31\n        var result = 1\n        result = prime * result + x1.toBits()\n        result = prime * result + y1.toBits()\n        result = prime * result + x2.toBits()\n        result = prime * result + y2.toBits()\n        return result\n    }\n\n    inner class Result {\n\n        operator fun component1() = x1\n        operator fun component2() = y1\n        operator fun component3() = x2\n        operator fun component4() = y2\n        val width: Float get() = x2 - x1\n        val height: Float get() = y2 - y1\n        val left: Float get() = x1\n        val top: Float get() = y1\n        val right: Float get() = x2\n        val bottom: Float get() = y2\n\n        fun assign(x1: Float, y1: Float, x2: Float, y2: Float): Result {\n            this@Rectangle.x1 = x1\n            this@Rectangle.y1 = y1\n            this@Rectangle.x2 = x2\n            this@Rectangle.y2 = y2\n            return this\n        }\n\n        fun assign(rectangle: Rectangle): Result {\n            this@Rectangle.x1 = rectangle.x1\n            this@Rectangle.y1 = rectangle.y1\n            this@Rectangle.x2 = rectangle.x2\n            this@Rectangle.y2 = rectangle.y2\n            return this\n        }\n\n        fun contains(x: Float, y: Float): Boolean = this@Rectangle.contains(x, y)\n\n        override fun toString(): String = \"$left, $top, $right, $bottom\"\n    }\n\n}\n\nfun Rectangle.assignInscribe(outerSize: Size, innerSize: Size) {\n    var x1 = 0f\n    var y1 = 0f\n    var newWidth = innerSize.width\n    var newHeight = innerSize.height\n    if (outerSize.isNotEmpty()) {\n        val widthRatio = innerSize.width / outerSize.width\n        val heightRatio = innerSize.height / outerSize.height\n        if (widthRatio >= heightRatio) {\n            newWidth = outerSize.width\n            newHeight = innerSize.height / widthRatio\n            y1 = (outerSize.height - newHeight) / 2\n        } else {\n            newHeight = outerSize.height\n            newWidth = innerSize.width / heightRatio\n            x1 = (outerSize.width - newWidth) / 2\n        }\n    }\n    assign(x1, y1, x1 + newWidth, y1 + newHeight)\n}\n\nfun Rectangle.withPadding(padding: Rectangle): Rectangle {\n    return Rectangle(x1 + padding.x1, y1 + padding.y1, x2 - padding.x2, y2 - padding.y2)\n}\n\nfun Rectangle.assignPadding(left: Float, top: Float, right: Float, bottom: Float) {\n    x1 += left\n    y1 += top\n    x2 -= right\n    y2 -= bottom\n}\n\nfun isRectangleValid(x1: Float, y1: Float, x2: Float, y2: Float): Boolean {\n    return x2 > x1 && y2 > y1\n}\n\nfun Rectangle.swap() {\n    val width = width\n    val height = height\n    x2 = x1 + height\n    y2 = y1 + width\n}\n\ndata class IntRectangle(val x1: Int, val y1: Int, val x2: Int, val y2: Int) // quickfix todo replace with better concept\n","package featurea.math\n\ndata class Size(var width: Float = 0f, var height: Float = 0f) {\n\n    constructor(width: Int, height: Int) : this(width.toFloat(), height.toFloat())\n\n    fun isEmpty(): Boolean {\n        return width == 0f && height == 0f\n    }\n\n    fun isNotEmpty(): Boolean {\n        return !isEmpty()\n    }\n\n    fun assign(width: Float, height: Float): Size {\n        this.width = width\n        this.height = height\n        return this\n    }\n\n    fun assign(width: Int, height: Int): Size {\n        return assign(width.toFloat(), height.toFloat())\n    }\n\n    fun assign(size: Size): Size {\n        return assign(size.width, size.height)\n    }\n\n    fun assign(value: String): Size {\n        val (width, height) = value.split(\",\").map { it.trim().toFloat() }\n        this.width = width\n        this.height = height\n        return this\n    }\n\n    fun clear() {\n        width = 0f\n        height = 0f\n    }\n\n    override fun equals(other: Any?): Boolean =\n        if (other is Size) other.width == width && other.height == height else false\n\n    fun equals(width: Float, height: Float): Boolean {\n        return this.width == width && this.height == height\n    }\n\n    override fun hashCode(): Int {\n        var result = width.hashCode()\n        result = 31 * result + height.hashCode()\n        return result\n    }\n\n    override fun toString(): String = \"Size(width=$width, height=$height)\"\n\n    inner class Result {\n\n        operator fun component1() = width\n        operator fun component2() = height\n        private var lock: Any? = null // just for now todo delete this\n\n        fun apply(width: Float, height: Float): Result {\n            if (lock != null) {\n                println(\"breakpoint\")\n            }\n            check(lock == null)\n            lock = Unit\n            this@Size.width = width\n            this@Size.height = height\n            lock = null\n            return this\n        }\n\n    }\n\n}\n\nfun String.toSize(): Size = Size().apply { assign(this@toSize) }\n\nfun Size.swap(): Size = apply {\n    val width = width\n    val height = height\n    this.width = height\n    this.height = width\n}\n\nval Size.aspectRatio: Float get() = width / height\n","package featurea.math\n\nclass Surface {\n\n    val origin: Point = Point()\n    val size: Size = Size()\n    val transform: Transform = Transform()\n    val coordinates: Coordinates = { transform }\n    val viewport: Size = Size()\n    val matrix: Matrix = Matrix()\n\n    val left: Float get() = origin.x\n    val top: Float get() = origin.y\n    val right: Float get() = origin.x + size.width\n    val bottom: Float get() = origin.y + size.height\n\n    fun assign(original: Surface) {\n        origin.assign(original.origin)\n        size.assign(original.size)\n        transform.edit { assign(original.transform) }\n        viewport.assign(original.viewport)\n        matrix.assign(original.matrix)\n    }\n\n}\n","package featurea.math\n\ntypealias Coordinates = () -> Transform\n\nclass Transform(val matrix: Matrix = Matrix()) {\n\n    var ox: Float = 0f\n        private set\n    var oy: Float = 0f\n        private set\n    var tx: Float = 0f\n        private set\n    var ty: Float = 0f\n        private set\n    var sx: Float = 1f\n        private set\n    var sy: Float = 1f\n        private set\n\n    private val editor: Editor = Editor()\n    private val transform: Transform = this\n\n    constructor(original: Transform) : this() {\n        edit {\n            assign(original)\n        }\n    }\n\n    fun edit(update: Editor.() -> Unit): Transform {\n        editor.update()\n        updateMatrix()\n        return this\n    }\n\n    inner class Editor {\n\n        fun assign(original: Transform) {\n            ox = original.ox\n            oy = original.oy\n            tx = original.tx\n            ty = original.ty\n            sx = original.sx\n            sy = original.sy\n            matrix.assign(original.matrix)\n        }\n\n        fun assignOrigin(ox: Float, oy: Float) {\n            transform.ox = ox\n            transform.oy = oy\n        }\n\n        fun assignOrigin(origin: Point) {\n            transform.ox = origin.x * sx\n            transform.oy = origin.y * sy\n        }\n\n        fun assignTranslation(vector: Vector2) {\n            assignTranslation(vector.x, vector.y)\n        }\n\n        fun assignTranslation(tx: Int, ty: Int) {\n            assignTranslation(tx.toFloat(), ty.toFloat())\n        }\n\n        fun assignTranslation(tx: Float, ty: Float) {\n            transform.tx = tx\n            transform.ty = ty\n        }\n\n        fun translate(vector: Vector2) {\n            translate(vector.x, vector.y)\n        }\n\n        fun translate(dx: Int, dy: Int) {\n            translate(dx.toFloat(), dy.toFloat())\n        }\n\n        fun translate(dx: Float, dy: Float) {\n            tx += dx * sx\n            ty += dy * sy\n        }\n\n        fun assignScale(sx: Float, sy: Float) {\n            transform.sx = sx\n            transform.sy = sy\n        }\n\n        fun assignScale(scale: Float) {\n            transform.sx = scale\n            transform.sy = scale\n        }\n\n        fun scale(ox: Float, oy: Float, scalar: Float) {\n            scaleResult.scale(tx, ty, ox, oy, scalar)\n            tx = scaleResult.x\n            ty = scaleResult.y\n            sx *= scalar\n            sy *= scalar\n        }\n\n        /*internals*/\n\n        private val scaleResult: Vector2 = Vector2()\n\n    }\n\n    override fun toString() = \"Transform(origin=($ox, $oy), translation=($tx, $ty), scale=($sx, $sy))\"\n\n    /*internals*/\n\n    private fun updateMatrix() {\n        matrix.assignIdentity()\n        matrix.translate(tx - ox, ty - oy)\n        matrix.scale(sx, sy)\n    }\n\n}\n","package featurea.math\n\nimport kotlin.math.sqrt\n\ntypealias Point = Vector2\n\ndata class Vector2(var x: Float = 0f, var y: Float = 0f) {\n\n    val isEmpty: Boolean get() = x == 0f && y == 0f\n    val isNotEmpty: Boolean get() = !isEmpty\n\n    constructor(original: Vector2) : this(original.x, original.y)\n\n    constructor(x: Int, y: Int) : this(x.toFloat(), y.toFloat())\n\n    infix fun assign(original: Point): Vector2 {\n        return assign(original.x, original.y)\n    }\n\n    fun assign(x: Float, y: Float): Vector2 {\n        this.x = x\n        this.y = y\n        return this\n    }\n\n    fun invert() {\n        x *= -1\n        y *= -1\n    }\n\n    operator fun times(scalar: Float): Vector2 = Vector2(x * scalar, y * scalar)\n\n    fun div(w: Float, h: Float): Vector2 {\n        x /= w\n        y /= h\n        return this\n    }\n\n    fun move(dx: Float, dy: Float): Vector2 {\n        this.x += dx\n        this.y += dy\n        return this\n    }\n\n    fun move(step: Vector2): Vector2 {\n        return move(step.x, step.y)\n    }\n\n    fun scale(x: Float, y: Float, ox: Float, oy: Float, ratio: Float) {\n        var dx = x - ox\n        var dy = y - oy\n        dx *= ratio\n        dy *= ratio\n        this.x = ox + dx\n        this.y = oy + dy\n    }\n\n    fun assignSum(point1: Vector2, point2: Vector2) {\n        this.x = point1.x + point2.x\n        this.y = point1.y + point2.y\n    }\n\n    fun assignDiff(point1: Vector2, point2: Vector2) {\n        this.x = point1.x - point2.x\n        this.y = point1.y - point2.y\n    }\n\n    fun assignRevert(original: Vector2) {\n        this.x = -original.x\n        this.y = -original.y\n    }\n\n    fun revert(): Vector2 = Vector2(-x, -y)\n\n    operator fun plusAssign(other: Vector2) {\n        x += other.x\n        y += other.y\n    }\n\n    fun clear() {\n        this.x = 0f\n        this.y = 0f\n    }\n\n    fun normalize(): Vector2 {\n        val len2: Float = len2()\n        if (len2 != 0f && len2 != 1f) {\n            val sqrt: Float = sqrt(len2)\n            x /= sqrt\n            y /= sqrt\n        }\n        return this\n    }\n\n    fun len2(): Float = x * x + y * y\n\n    @OptIn(ExperimentalPrecision::class)\n    fun toPixelPerfect(result: Vector2.Result): Vector2.Result {\n        return result.apply(x.toPixelPerfectFloat(), y.toPixelPerfectFloat())\n    }\n\n    inner class Result {\n\n        operator fun component1() = x\n        operator fun component2() = y\n\n        fun apply(x: Float, y: Float): Result = apply {\n            this@Vector2.x = x\n            this@Vector2.y = y\n        }\n\n        operator fun minus(other: Vector2): Vector2 = Vector2(x - other.x, y - other.y)\n\n    }\n\n    companion object {\n\n        fun rotate(result: Result, x: Float, y: Float, ox: Float, oy: Float, angle: Angle): Result {\n            val cos = angle.cos\n            val sin = angle.sin * -1\n            result.apply(\n                ox + ((x - ox) * cos - (y - oy) * sin).toFloat(),\n                oy + ((x - ox) * sin + (y - oy) * cos).toFloat()\n            )\n            return result\n        }\n\n        fun sum(p1: Vector2, p2: Vector2, result: Vector2): Vector2 {\n            result.assign(p1.x + p2.x, p1.y + p2.y)\n            return result\n        }\n\n    }\n\n}\n\nfun String.toPoint(): Vector2 = Vector2().assign(this)\n\nfun Vector2.assign(value: String): Vector2 = apply {\n    val (x, y) = value.split(\",\").map { it.trim().toFloat() }\n    this.x = x\n    this.y = y\n\n}\n\n@ExperimentalPrecision\nfun Vector2.toPixelPerfectFloat(result: Vector2): Vector2 {\n    val xp: Float = x.toPixelPerfectFloat()\n    val yp: Float = y.toPixelPerfectFloat()\n    result.assign(xp, yp)\n    return result\n}\n","package featurea.math\n\nimport kotlin.math.sqrt\n\ntypealias Vector = Vector3\n\ndata class Vector3(var x: Float = 0f, var y: Float = 0f, var z: Float = 0f) {\n\n    fun assign(original: Vector3): Vector3 {\n        this.x = original.x\n        this.y = original.y\n        this.z = original.z\n        return this\n    }\n\n    fun assign(x: Float, y: Float, z: Float): Vector3 {\n        this.x = x\n        this.y = y\n        this.z = z\n        return this\n    }\n\n    fun dot(vector: Vector): Float = x * vector.x + y * vector.y + z * vector.z\n\n    fun len2(): Float = x * x + y * y + z * z\n\n    fun len(): Float = sqrt(x * x + y * y + z * z)\n\n    operator fun timesAssign(scalar: Float) {\n        assign(x * scalar, y * scalar, z * scalar)\n    }\n\n    operator fun minusAssign(vector: Vector) {\n        assign(x - vector.x, y - vector.y, z - vector.z)\n    }\n\n    fun normalize(): Vector3 = apply {\n        val len2 = len2()\n        if (len2 == 0f) return@apply\n        if (len2 == 1f) return@apply\n        this *= 1f / sqrt(len2)\n    }\n\n    fun assignCross(vector: Vector3): Vector3 =\n        assignCross(this, vector)\n\n    fun assignCross(p1: Vector3, p2: Vector): Vector3 {\n        return assign(p1.y * p2.z - p1.z * p2.y, p1.z * p2.x - p1.x * p2.z, p1.x * p2.y - p1.y * p2.x)\n    }\n\n    companion object {\n        fun dot(x1: Float, y1: Float, z1: Float, x2: Float, y2: Float, z2: Float): Float = x1 * x2 + y1 * y2 + z1 * z2\n        fun len(x: Float, y: Float, z: Float): Float = sqrt(x * x + y * y + z * z)\n    }\n\n    // >> just for try todo delete this\n    operator fun plus(vector: Vector): Vector = Vector(x + vector.x, y + vector.y, z + vector.z)\n    operator fun times(float: Float): Vector = Vector(x * float, y * float, z * float)\n    // <<\n\n}\n\nfun String.toVector(): Vector = Vector().assign(this)\n\nfun Vector.assign(value: String): Vector = apply {\n    val (x, y, z) = value.split(\",\").map { it.trim().toFloat() }\n    this.x = x\n    this.y = y\n    this.z = z\n}\n","package featurea.js\n\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.utils.parent\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLImageElement\nimport org.w3c.dom.events.Event\nimport kotlinx.browser.window as jsWindow\nimport org.w3c.dom.events.EventListener as JsEventListener\n\n/**\n * @param init `app.runOnCompleteLoading { finish() }`\n */\nclass ProgressView(override val module: Module, init: () -> Unit) : Component, JsEventListener {\n\n    private val rootElement: HTMLElement = import(RootElementProxy)\n    private val splashImage: HTMLImageElement by lazy { import(SplashImageProxy) }\n    private val titlebar: HTMLElement by lazy { import(TitlebarProxy) }\n    private val closeButton: HTMLElement by lazy { import(CloseButtonProxy) }\n    private val mainCanvas: HTMLCanvasElement by lazy { import(HTMLCanvasElementProxy) }\n\n    private val isStandalone: Boolean = rootElement.querySelector(\".titlebar\") == null // quickfix todo improve\n    private val hasSplash by lazy { splashImage.src != \"${jsWindow.location.href.parent}/_\" }\n    private val loadingImage: HTMLImageElement by lazy { rootElement.querySelector(\"#loadingImage\") as HTMLImageElement }\n    private val splashDiv: HTMLDivElement by lazy { loadingImage.parentElement as HTMLDivElement }\n\n    private lateinit var touch: () -> Unit\n    private lateinit var finish: () -> Unit\n\n    init {\n        when {\n            isStandalone -> finish = { mainCanvas.style.display = \"inline\" } // quickfix todo improve\n            hasSplash -> initSplashScreen()\n            else -> initLoadingScreen()\n        }\n        init()\n    }\n\n    override fun handleEvent(event: Event) {\n        if (isStandalone) return // quickfix todo improve\n\n        event.preventDefault()\n        when (event.type) {\n            \"mousedown\", \"touchstart\" -> touch()\n        }\n    }\n\n    /*internals*/\n\n    private fun initSplashScreen() {\n        titlebar.style.visibility = \"hidden\"\n        closeButton.style.visibility = \"hidden\"\n        splashImage.style.display = \"inline\"\n        loadingImage.style.display = \"none\"\n        mainCanvas.style.display = \"none\"\n        rootElement.style.borderColor = \"\"\n        splashDiv.style.backgroundColor = \"\"\n        splashDiv.style.alignItems = \"\"\n\n        registerInputListener { initLoadingScreen() }\n        finish = { registerInputListener { initMainScreen() } }\n    }\n\n    private fun initLoadingScreen() {\n        titlebar.style.visibility = \"hidden\"\n        closeButton.style.visibility = \"hidden\"\n        splashImage.style.display = \"none\"\n        loadingImage.style.display = \"inline\"\n        mainCanvas.style.display = \"none\"\n        rootElement.style.borderColor = \"black\"\n        splashDiv.style.backgroundColor = \"white\"\n        splashDiv.style.alignItems = \"center\"\n\n        unregisterListener()\n        finish = { initMainScreen() }\n    }\n\n    private fun initMainScreen() {\n        titlebar.style.visibility = \"visible\"\n        closeButton.style.visibility = \"visible\"\n        splashImage.style.display = \"none\"\n        loadingImage.style.display = \"none\"\n        mainCanvas.style.display = \"inline\"\n        rootElement.style.borderColor = \"\"\n        splashDiv.style.backgroundColor = \"\"\n        splashDiv.style.alignItems = \"\"\n\n        unregisterListener()\n    }\n\n    private fun registerInputListener(touch: () -> Unit) {\n        this.touch = touch\n        rootElement.addEventListener(\"mousedown\", this, false)\n        rootElement.addEventListener(\"touchstart\", this, false)\n    }\n\n    private fun unregisterListener() {\n        rootElement.removeEventListener(\"mousedown\", this)\n        rootElement.removeEventListener(\"touchstart\", this)\n    }\n\n}\n","package featurea.js\n\nimport featurea.runtime.Runtime\nimport featurea.runtime.proxyScope\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport org.w3c.dom.HTMLElement\n\nfun loadRootElementAsBody(mainCall: () -> Runtime) {\n    window.loadBody {\n        proxyScope {\n            onInitModule { module ->\n                val body: HTMLElement = window.document.body ?: error(\"document: ${window.document}\")\n                module.components.inject(\"_rootElement\", body)\n            }\n            mainCall()\n        }\n    }\n}\n\nfun loadRootElementAsDialog(mainCall: () -> Runtime) {\n    window.loadBody {\n        appendMainWindow(document.title, splashImagePath = null, 1f, mainCall)\n    }\n}\n","package featurea.js\n\nimport featurea.js.vuetify.fixApplicationBackground\nimport featurea.js.vuetify.fixApplicationContentMinHeight\nimport featurea.runtime.Artifact\nimport featurea.runtime.Delegate\nimport featurea.runtime.Proxy\nimport featurea.runtime.Runtime\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLImageElement\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.js\") {\n    \"HtmlElementProxy\" to HtmlElementProxy::class\n    \"HTMLCanvasElementProxy\" to HTMLCanvasElementProxy::class\n    \"LoaderLabelProxy\" to LoaderLabelProxy::class\n    \"TitlebarProxy\" to TitlebarProxy::class\n    \"CloseButtonProxy\" to CloseButtonProxy::class\n    \"RootElementProxy\" to RootElementProxy::class\n    \"SplashImageProxy\" to SplashImageProxy::class\n}\n\nclass HtmlElementProxy(override val delegate: HTMLElement) : Proxy<HTMLElement> {\n    companion object : Delegate<HTMLElement>(HtmlElementProxy::class)\n}\n\nclass HTMLCanvasElementProxy(override val delegate: HTMLCanvasElement) : Proxy<HTMLCanvasElement> {\n    companion object : Delegate<HTMLCanvasElement>(HTMLCanvasElementProxy::class)\n}\n\nclass LoaderLabelProxy(override val delegate: HTMLElement) : Proxy<HTMLElement> {\n    companion object : Delegate<HTMLElement>(LoaderLabelProxy::class)\n}\n\nclass TitlebarProxy(override val delegate: HTMLElement) : Proxy<HTMLElement> {\n    companion object : Delegate<HTMLElement>(TitlebarProxy::class)\n}\n\nclass CloseButtonProxy(override val delegate: HTMLElement) : Proxy<HTMLElement> {\n    companion object : Delegate<HTMLElement>(CloseButtonProxy::class)\n}\n\nclass SplashImageProxy(override val delegate: HTMLImageElement) : Proxy<HTMLImageElement> {\n    companion object : Delegate<HTMLImageElement>(SplashImageProxy::class)\n}\n\nclass RootElementProxy(override val delegate: HTMLElement) : Proxy<HTMLElement> {\n    companion object : Delegate<HTMLElement>(RootElementProxy::class)\n}\n\n/*runtime*/\n\nfun exportLaunchers(onLaunch: (args: Array<String>) -> Runtime) {\n    // includes\n    export(\"fixApplicationBackground\", ::fixApplicationBackground)\n    export(\"fixApplicationContentMinHeight\", ::fixApplicationContentMinHeight)\n    export(\"loadSplashScreen\", ::loadSplashScreen)\n    export(\"removeAllMainWindows\", ::removeAllMainWindows)\n    export(\"removeMainWindow\", ::removeMainWindow)\n\n    // launchers\n    export(\"appendMainCanvas\") { args: Array<String> -> appendMainCanvasOnLaunchWithArgs(onLaunch, args) }\n    export(\"appendMainWindow\") { args: Array<String> -> appendMainWindowOnLaunchWithArgs(onLaunch, args) }\n}\n","package featurea.js\n\nimport kotlinx.html.INPUT\nimport kotlinx.html.TagConsumer\nimport kotlinx.html.attributesMapOf\nimport kotlinx.html.dom.append\nimport kotlinx.html.visitAndFinalize\nimport org.w3c.dom.Document\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLInputElement\n\nval Document.isFullscreen: Boolean get() = fullscreenElement != null\n\nfun HTMLElement.createInputElement(init: INPUT.() -> Unit = {}): HTMLInputElement {\n    return append.inputElement(init)\n}\n\n/*internals*/\n\nprivate fun <T, C : TagConsumer<T>> C.inputElement(block: INPUT.() -> Unit): HTMLInputElement {\n    return INPUT(attributesMapOf(), this).visitAndFinalize(this, block) as HTMLInputElement\n}\n","package featurea.js\n\nimport featurea.js.dialog.appendMainCanvasDialog\nimport featurea.js.dialog.registerEscapeListener\nimport featurea.js.dialog.showDialogBox\nimport featurea.runtime.Module\nimport featurea.runtime.Runtime\nimport featurea.runtime.proxyScope\nimport kotlinx.browser.document\nimport org.w3c.dom.HTMLElement\nimport kotlin.collections.set\n\nprivate val modules = mutableMapOf<String, Module>()\nprivate val rootElements = mutableMapOf<String, HTMLElement>().also { registerEscapeListener(it) }\n\nfun appendMainWindowOnLaunchWithArgs(onLaunch: (args: Array<String>) -> Runtime, args: Array<String>) {\n    appendMainWindow(name = args[0], splashImagePath = args[1], screenRatio = args[2].toFloat()) {\n        onLaunch(args)\n    }\n}\n\nfun appendMainWindow(name: String, splashImagePath: String?, screenRatio: Float, mainCall: () -> Runtime) {\n    val body: HTMLElement = document.body ?: error(\"document: $document\")\n    val dialogId: String = \"$name-dialog\"\n    val dialog: HTMLElement? = document.getElementById(dialogId) as HTMLElement?\n    if (dialog == null) {\n        val rootElement: HTMLElement = body.appendMainCanvasDialog(name, screenRatio, splashImagePath)\n        rootElements[name] = rootElement\n        rootElement.id = dialogId\n        proxyScope {\n            onInitModule { module ->\n                module.components.inject(\"_rootElement\", rootElement)\n                modules[name] = module\n                showDialogBox(dialogId)\n            }\n            mainCall()\n        }\n    } else {\n        dialog.style.display = \"block\"\n    }\n}\n\nfun removeAllMainWindows() {\n    for (name in ArrayList(rootElements.keys)) {\n        removeMainWindow(name)\n    }\n}\n\nfun removeMainWindow(name: String) {\n    rootElements.remove(name)\n    modules.remove(name)?.destroy()\n\n    val body: HTMLElement = document.body ?: error(\"document: $document\")\n    val dialogId: String = \"$name-dialog\"\n    val dialog: HTMLElement? = document.getElementById(dialogId) as HTMLElement?\n    if (dialog != null) {\n        body.removeChild(dialog)\n    }\n\n    js(\"if (window.updateProjects) window.updateProjects()\") // quickfix todo improve\n}\n","package featurea.app\n\nimport featurea.runtime.*\nimport featurea.utils.BufferedList\nimport featurea.utils.Property\nimport featurea.utils.forEachEvent\nimport featurea.utils.updateTasksWithDelay\n\nclass Application(override val module: Module) : Component {\n\n    val controllers = mutableListOf<ApplicationController>()\n    val delegateProperty = Property<ApplicationDelegate?>(null)\n    var delegate: ApplicationDelegate? by delegateProperty\n    var elapsedTime: Float = 0f\n    var isEnable: Boolean = true\n    val listeners = mutableListOf<ApplicationListener>()\n    val tasksToRepeatOnUpdateApplication = mutableListOf<(elapsedTime: Float) -> Unit>()\n    val tasksToRunOnUpdate = BufferedList<() -> Unit>()\n    val tasksWithPeriodToRepeatOnUpdate = mutableMapOf<() -> Unit, Float>()\n    val tasksWithPeriodToRepeatOnUpdateInitial = mutableMapOf<() -> Unit, Float>()\n    val tasksWithDelayToRunOnUpdate = mutableMapOf<() -> Unit, Float>()\n    val tasksToRunOnCompleteLoading = BufferedList<Task>()\n    val tasksToRepeatOnBuildApplication = mutableListOf<Task>()\n    val tasksToRepeatOnStartLoading = mutableListOf<Task>()\n    var frameCount: Long = 0\n        private set\n\n    init {\n        delegateProperty.watch {\n            frameCount = 0L\n        }\n    }\n\n    suspend fun updateControllers() {\n        val controllers = ArrayList(controllers) // quickfix todo improve\n        for (controller in controllers) {\n            controller.update()\n        }\n    }\n\n    fun updateDelegate() {\n        frameCount++\n        delegate?.update(elapsedTime)\n        for (task in tasksToRepeatOnUpdateApplication) {\n            task(elapsedTime)\n        }\n    }\n\n    fun updateTasks() {\n        tasksWithPeriodToRepeatOnUpdate.updateTasksWithDelay(elapsedTime, tasksWithPeriodToRepeatOnUpdateInitial)\n        tasksToRunOnUpdate.poll { oldTasks, newTasks ->\n            for (oldTask in oldTasks) {\n                oldTask()\n            }\n            for (newTask in newTasks) {\n                newTask()\n            }\n        }\n        tasksWithDelayToRunOnUpdate.updateTasksWithDelay(elapsedTime)\n    }\n\n    fun onCreate() {\n        delegate?.create()\n        listeners.forEachEvent { it.onCreateApplication() }\n    }\n\n    fun onStart() {\n        delegate?.start()\n        listeners.forEachEvent { it.onStartApplication() }\n    }\n\n    fun onResume() {\n        delegate?.resume()\n        listeners.forEachEvent { it.onResumeApplication() }\n    }\n\n    fun onPause() {\n        delegate?.pause()\n        listeners.forEachEvent { it.onPauseApplication() }\n    }\n\n    fun onStop() {\n        delegate?.stop()\n        listeners.forEachEvent { it.onStopApplication() }\n    }\n\n    fun onDestroy() {\n        delegate?.destroy()\n        listeners.forEachEvent { it.onDestroyApplication() }\n    }\n\n    fun repeatOnStartLoading(task: Task) {\n        tasksToRepeatOnStartLoading.add(task)\n    }\n\n    fun runOnCompleteLoading(task: Task) {\n        tasksToRunOnCompleteLoading.add(task)\n    }\n\n    fun repeatOnBuildApplication(task: Task) {\n        tasksToRepeatOnBuildApplication.add(task)\n    }\n\n    fun runOnUpdate(task: () -> Unit) {\n        tasksToRunOnUpdate.add(task)\n    }\n\n    fun runOnUpdate(delay: Float, task: () -> Unit) {\n        tasksWithDelayToRunOnUpdate[task] = delay\n    }\n\n    fun repeatOnUpdate(task: (elapsedTime: Float) -> Unit) {\n        tasksToRepeatOnUpdateApplication.add(task)\n    }\n\n    fun repeatOnUpdate(period: Float, task: () -> Unit) {\n        tasksWithPeriodToRepeatOnUpdate[task] = period\n        tasksWithPeriodToRepeatOnUpdateInitial[task] = period\n    }\n\n}\n","package featurea.app\n\nimport featurea.runtime.Action\nimport featurea.runtime.Dependency\nimport featurea.runtime.Runtime\n\nfun bootstrapApplication(export: Dependency, setup: Action = {}): Runtime = Runtime {\n    exportComponents(export)\n    injectContainer(\"featurea.app.ApplicationContainer\")\n    injectModule(\"featurea.app.ApplicationModule\")\n    complete(setup)\n}\n","@file:Suppress(\"RemoveExplicitTypeArguments\", \"UNCHECKED_CAST\")\n\npackage featurea.app\n\nimport featurea.rml.*\nimport featurea.rml.reader.RmlContent\nimport featurea.runtime.Module\n\ntypealias ApplicationBuilder = DefaultRmlResourceBuilder<ApplicationDelegate>\n\nsuspend fun Module.buildApplication(resourcePath: String, source: String? = null): ApplicationDelegate {\n    val rmlContent: RmlContent = importComponent()\n    val rmlResource: RmlResource = rmlContent.readRmlResource(resourcePath, source)\n    val appDelegate: ApplicationDelegate = buildApplication(rmlResource)\n    return appDelegate\n}\n\nsuspend fun Module.buildApplication(rmlResource: RmlResource): ApplicationDelegate {\n    val module: Module = this\n    val builder: RmlBuilder = rmlResource.initRmlBuilder(module) {\n        ApplicationBuilder(module) as RmlBuilder\n    }\n    val resource: Any = with(rmlResource) { rmlTag.createRmlTagEndObject<Any>() }\n    val result: Any = builder.wrap(rmlResource, rmlResource.rmlTag, resource)\n    val appDelegate: ApplicationDelegate = result as ApplicationDelegate\n    return appDelegate\n}\n","package featurea.app\n\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.utils.toSimpleName\n\nprivate var applicationScopeModule: Module? = null\n\nabstract class ApplicationComponent : Component {\n    override val module: Module = checkNotNull(applicationScopeModule)\n}\n\n// just for now todo conceptualize better\nsuspend fun <T> Component.applicationScopeBlocking(block: suspend () -> T): T {\n    ApplicationScope.checkModule(module)\n    val entering: Boolean = applicationScopeModule == null\n    if (entering) {\n        applicationScopeModule = module\n    } else {\n        check(applicationScopeModule == module)\n    }\n    val result: T = block()\n    if (entering) {\n        applicationScopeModule = null\n    }\n    return result\n}\n\nfun <T> Component.applicationScope(block: () -> T): T {\n    ApplicationScope.checkModule(module)\n    val entering: Boolean = applicationScopeModule == null\n    if (entering) {\n        applicationScopeModule = module\n    } else {\n        check(applicationScopeModule == module)\n    }\n    val result: T = block()\n    if (entering) {\n        applicationScopeModule = null\n    }\n    return result\n}\n\nobject ApplicationScope {\n\n    private val moduleKeyRegexes: List<Regex> = listOf(\n        \".*ApplicationModule\\\\d?$\".toRegex(),\n        \".*DefaultModule\\\\d?$\".toRegex(),\n        \".*EditorModule\\\\d?$\".toRegex(),\n    )\n\n    fun attachModule(module: Module) {\n        checkModule(module)\n        check(applicationScopeModule == null)\n        applicationScopeModule = module\n    }\n\n    fun detachModule(module: Module) {\n        checkModule(module)\n        check(applicationScopeModule == module)\n        applicationScopeModule = null\n    }\n\n    fun checkModule(module: Module) {\n        val key: String = module.key\n        val simpleKey: String = key.toSimpleName()\n        for (applicationKeyRegex in moduleKeyRegexes) {\n            if (applicationKeyRegex.matches(simpleKey)) {\n                return\n            }\n        }\n        error(\"key: $key\")\n    }\n\n}\n","package featurea.app\n\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\n\nabstract class ApplicationController(override val module: Module) : Component {\n\n    private val app: Application = import()\n\n    var isEnable: Boolean = true\n\n    override fun onCreateComponent() {\n        app.controllers.add(this)\n    }\n\n    override fun onDeleteComponent() {\n        app.controllers.remove(this)\n    }\n\n    abstract suspend fun update()\n\n}\n\n// constructor\nfun Component.ApplicationController(update: () -> Unit) = object : ApplicationController(module) {\n    override suspend fun update() = update()\n}\n","package featurea.app\n\nimport featurea.runtime.import\n\ninterface ApplicationDelegate {\n\n    fun create() {}\n    fun start() {}\n    fun resume() {}\n    fun pause() {}\n    fun stop() {}\n    fun destroy() {}\n\n    // Loader\n    suspend fun load(progress: Float) {}\n\n    // Window\n    fun update(elapsedTime: Float) {}\n    fun resize(width: Int, height: Int) {}\n    fun invalidate() {}\n\n}\n\n/*convenience*/\n\nopen class ApplicationContext : ApplicationComponent(), ApplicationDelegate {\n    val app: Application = import()\n}\n","package featurea.app\n\nimport featurea.js.*\nimport featurea.js.dialog.onChangeCssProperty\nimport featurea.js.dialog.setupFullScreenSize\nimport featurea.runtime.DefaultContainer\nimport featurea.runtime.Module\nimport featurea.runtime.Provide\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLImageElement\nimport kotlinx.browser.window as jsWindow\n\nactual fun ApplicationContainer() = DefaultContainer()\n\n@Provide(CloseButtonProxy::class)\n@Provide(HTMLCanvasElementProxy::class)\n@Provide(LoaderLabelProxy::class)\n@Provide(RootElementProxy::class)\n@Provide(SplashImageProxy::class)\n@Provide(TitlebarProxy::class)\nactual fun ApplicationModule() = Module {\n    onInit { appModule ->\n        await(HtmlElementProxy::class)\n\n        val rootElement: HTMLElement = appModule.components[\"_rootElement\"]\n        appModule.provideComponent(RootElementProxy(rootElement))\n\n        val mainCanvas = rootElement.querySelector(\"#mainCanvas\") as HTMLCanvasElement\n        appModule.provideComponent(HTMLCanvasElementProxy(mainCanvas))\n\n        val loaderLabel = rootElement.querySelector(\"#loaderLabel\") as HTMLElement?\n        loaderLabel?.also { appModule.provideComponent(LoaderLabelProxy(loaderLabel)) }\n\n        val titlebar = rootElement.querySelector(\".titlebar\") as HTMLElement?\n        titlebar?.also { appModule.provideComponent(TitlebarProxy(titlebar)) }\n\n        val closeButton = rootElement.querySelector(\"#closeButton\") as HTMLElement?\n        closeButton?.also { appModule.provideComponent(CloseButtonProxy(closeButton)) }\n\n        val splashImage = rootElement.querySelector(\"#splashImage\") as HTMLImageElement?\n        splashImage?.also { appModule.provideComponent(SplashImageProxy(splashImage)) }\n\n        val dialogContent = rootElement.querySelector(\".content\") as HTMLElement?\n        dialogContent?.also { appModule.components.inject(\"_dialogContent\", dialogContent) }\n\n        /*\n        val hiddenInput = rootElement.querySelector(\"#hiddenInput\") as HTMLElement?\n        hiddenInput?.also { appModule.components.inject(\"_hiddenInput\", hiddenInput) }\n        */\n\n        if (isUserAgentMobile) {\n            jsWindow.addEventListener(\"resize\", { rootElement.setupFullScreenSize() }, false)\n            rootElement.onChangeCssProperty(\"display\") { value -> if (value == \"block\") rootElement.setupFullScreenSize() }\n            rootElement.setupFullScreenSize()\n        }\n\n        appModule.importComponent(\"featurea.window.Window\")\n    }\n}\n","package featurea.app\n\nimport featurea.runtime.Artifact\nimport featurea.runtime.DependencyBuilder\nimport featurea.runtime.Plugin\nimport featurea.runtime.install\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.app\") {\n    include(featurea.utils.artifact)\n\n    \"Application\" to ::Application\n    \"ApplicationContainer\" to ::ApplicationContainer\n    \"ApplicationModule\" to ::ApplicationModule\n}\n\nfun DependencyBuilder.ApplicationPlugin(plugin: Plugin<Application>) = install(plugin)\n","package featurea.rml.reader\n\nimport featurea.content.ResourceSchema\nimport featurea.utils.parseProperties\nimport featurea.runtime.Container\nimport featurea.runtime.artifact\nimport featurea.runtime.configPackages\nimport featurea.text.TextContent\nimport featurea.utils.readTextOrNull\nimport featurea.utils.toConfigPath\n\nclass RmlContent(container: Container) {\n\n    val textContent: TextContent = container.import()\n\n    val configPackages: List<String> = container.artifact.configPackages\n    private val rmlFiles = mutableMapOf<String, RmlFile>()\n    private val rmlSchemas = mutableMapOf<String, ResourceSchema>()\n\n    suspend fun findRmlSchema(resourcePackage: String): ResourceSchema {\n        var rmlSchema: ResourceSchema? = rmlSchemas[resourcePackage]\n        if (rmlSchema == null) {\n            rmlSchema = ResourceSchema().apply {\n                clearCaches()\n                for (configPackage in configPackages) {\n                    val configPath: String = configPackage.toConfigPath()\n                    val text: String? = textContent.findTextOrNull(\"${configPath}/package.properties\")\n                    if (text != null) {\n                        val properties: Map<String, String> = parseProperties(text)\n                        appendProperties(properties)\n                    }\n                }\n            }\n            rmlSchemas[resourcePackage] = rmlSchema\n        }\n        return rmlSchema\n    }\n\n    suspend fun findRmlFile(filePath: String, source: String? = null): RmlFile {\n        var rmlFile = rmlFiles[filePath]\n        if (rmlFile == null) {\n            val text = source ?: (textContent.findTextOrNull(filePath) ?: error(\"filePath: $filePath\"))\n            rmlFile = RmlFile().apply { init(text, filePath) { findRmlSchema(packageId) } }\n            rmlFiles[filePath] = rmlFile\n        }\n        return rmlFile\n    }\n\n    suspend fun readRmlFile(filePath: String): RmlFile? {\n        val text = textContent.system.readTextOrNull(filePath) ?: return null\n        return RmlFile().apply { init(text, filePath) { findRmlSchema(packageId) } }\n    }\n\n    fun removeCachedRmlFile(filePath: String) {\n        rmlFiles.remove(filePath)\n    }\n\n    fun clear() {\n        rmlFiles.clear()\n        rmlSchemas.clear()\n    }\n\n}\n\n\n","package featurea.rml.reader\n\nimport featurea.content.ResourceTag\nimport featurea.content.ResourceSchema\n\nclass RmlFile {\n\n    lateinit var rmlTag: ResourceTag\n        private set\n    lateinit var rmlSchema: ResourceSchema\n        private set\n    lateinit var text: String\n        private set\n    lateinit var filePath: String\n        private set\n    lateinit var packageId: String\n        private set\n\n    suspend fun init(text: String, filePath: String, initRmlSchema: suspend RmlFile.() -> ResourceSchema) {\n        this.text = text\n        this.filePath = filePath\n        this.rmlTag = RmlParser.parseRmlSource(text, filePath)\n        this.packageId = rmlTag.packageId\n        this.rmlSchema = initRmlSchema()\n    }\n\n}\n","package featurea.rml.reader\n\nimport featurea.utils.consumeString\nimport featurea.content.ResourceTag\nimport featurea.content.UNDEFINED_RESOURCE_PATH\n\nclass RmlParserException(filePath: String) : RuntimeException(filePath)\n\nobject RmlParser {\n\n    fun parseRmlSource(rmlSource: String, filePath: String = UNDEFINED_RESOURCE_PATH): ResourceTag {\n        var rootRmlTag: ResourceTag? = null\n        var currentRmlTag: ResourceTag? = null\n        var attributeKey: String? = null\n        val state = RmlParserState()\n        val charArray = rmlSource.toCharArray()\n        for (char in charArray) {\n            /*print(\"$char\")*/\n            if (char == '<' && state.isDefault()) {\n                state.toTagOpen()\n            } else if (state.isTagOpen && (char == ' ' || char == '>')) {\n                val tagName = state.toTagName(char)\n                val parentRmlTag = currentRmlTag\n                if (parentRmlTag != null) {\n                    currentRmlTag = ResourceTag(tagName, parent = parentRmlTag)\n                    parentRmlTag.children.add(currentRmlTag)\n                } else {\n                    currentRmlTag = ResourceTag(tagName, filePath = filePath)\n                    rootRmlTag = currentRmlTag\n                }\n            } else if (char == '\"' && state.isAttributeKey) {\n                attributeKey = state.toAttributeValue()\n            } else if (char == '\"' && state.isAttributeValue) {\n                if (currentRmlTag == null || attributeKey == null) {\n                    throw RmlParserException(filePath)\n                }\n                val attributeValue = state.toAttributeKey()\n                currentRmlTag.attributes[attributeKey] = attributeValue\n                if (attributeKey == \"id\") currentRmlTag.parent!!.properties[attributeValue] = currentRmlTag\n                attributeKey = null\n            } else if (char == '/' && !state.isAttributeValue) {\n                if (currentRmlTag == null) {\n                    throw RmlParserException(filePath)\n                }\n                state.toDefault()\n                currentRmlTag = currentRmlTag.parent\n            } else if (char == '>' && !state.isAttributeValue) {\n                state.toDefault()\n            } else {\n                state.appendChar(char)\n            }\n        }\n        check(rootRmlTag != null) { filePath ?: \"\" }\n        return rootRmlTag\n    }\n\n}\n\nprivate class RmlParserState {\n\n    var isTagOpen: Boolean = false\n    var isAttributeKey: Boolean = false\n    var isAttributeValue: Boolean = false\n    var useBackSlashChar: Boolean = false\n    private val currentToken = StringBuilder()\n\n    fun toTagOpen(): String {\n        isTagOpen = true\n        isAttributeKey = false\n        isAttributeValue = false\n        return currentToken.consumeString()\n    }\n\n    fun toTagName(char: Char): String {\n        return when (char) {\n            '>' -> toDefault()\n            ' ' -> toAttributeKey()\n            else -> error(\"char: $char\")\n        }\n    }\n\n    fun toAttributeKey(): String {\n        isTagOpen = false\n        isAttributeKey = true\n        isAttributeValue = false\n        return currentToken.consumeString()\n    }\n\n    fun toAttributeValue(): String {\n        isTagOpen = false\n        isAttributeKey = false\n        isAttributeValue = true\n        return currentToken.consumeString()\n    }\n\n    fun toDefault(): String {\n        isTagOpen = false\n        isAttributeKey = false\n        isAttributeValue = false\n        return currentToken.consumeString()\n    }\n\n    fun isDefault(): Boolean {\n        return !isTagOpen && !isAttributeKey && !isAttributeValue\n    }\n\n    fun appendChar(char: Char) {\n        // update\n        val shouldAppendChar = !useBackSlashChar\n        useBackSlashChar = isAttributeValue && char == '\\\\'\n\n        // filter\n        if (currentToken.isEmpty() && char.isWhitespace() && !isAttributeValue) return // 1. trim everything except attribute\n        if (shouldAppendChar && useBackSlashChar) return                               // 2. skip first back slash\n        if (isTagOpen && char == ' ') return                                           // 3. skip tag open delimiter\n        if (isAttributeKey && char == '=') return                                      // 4. skip attribute key delimiter\n        if (isAttributeValue && char == '\"') return                                    // 5. skip attribute value delimiter todo delete\n\n        // append\n        if (shouldAppendChar) {\n            currentToken.append(char)\n        } else {\n            when (char) {\n                'n' -> currentToken.appendLine()\n                else -> currentToken.append('\\\\').append(char)\n            }\n        }\n        useBackSlashChar = false\n    }\n\n}\n","package featurea.rml.reader\n\nimport featurea.Bundle\nimport featurea.System\nimport featurea.content.Resource\nimport featurea.content.ResourceReader\nimport featurea.content.rmlExtensions\nimport featurea.utils.hasExtension\nimport featurea.runtime.Container\n\nclass RmlReader(container: Container) : ResourceReader {\n\n    private val system: System = container.import()\n\n    override suspend fun readOrNull(resourcePath: String, bundle: Bundle?): Resource? {\n        if (resourcePath.hasExtension(system.rmlExtensions)) {\n            return Resource(resourcePath)\n        }\n        return null\n    }\n\n}\n","package featurea.rml.reader\n\nimport featurea.runtime.Artifact\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.rml.reader\") {\n    include(featurea.text.artifact)\n\n    \"RmlContent\" to RmlContent::class\n    \"RmlReader\" to RmlReader::class\n\n    static {\n        provideComponent(RmlContent(container = this))\n        provideComponent(RmlReader(container = this))\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n","@file:Suppress(\"NAME_SHADOWING\")\n\npackage featurea.window\n\nimport featurea.app.Application\nimport featurea.layout.Camera\nimport featurea.layout.Layout\nimport featurea.layout.Orientation\nimport featurea.layout.View\nimport featurea.loader.LoaderController\nimport featurea.math.*\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.utils.Property\nimport featurea.utils.forEachEvent\nimport featurea.utils.replaceWith\nimport kotlin.reflect.KClass\n\n// fixme: synchronize Window.size and Window.surface.size\nclass Window(override val module: Module) : Component {\n\n    var layout: Layout = Layout()\n    lateinit var orientation: Orientation\n    private var oldOrientation: Orientation? = null\n    val elements = mutableMapOf<View, WindowElement>()\n    internal val elementProviders = mutableMapOf<KClass<*>, WindowElementProvider<View>>()\n    val listeners = mutableListOf<WindowListener>()\n    val surface: Surface = Surface()\n    val sizeProperty = Property<Size>()\n    var size: Size by sizeProperty\n    val titleProperty = Property<String?>()\n    var title: String? by titleProperty\n    var useCamera: Boolean = true\n    private val views: MutableSet<View> = linkedSetOf()\n\n    // import\n    private val app: Application = import()\n    private val delegate: WindowDelegate = import()\n    private val loaderController: LoaderController = import()\n\n    init {\n        app.delegateProperty.watch {\n            invalidate()\n        }\n    }\n\n    fun init() {\n        listeners.forEachEvent {\n            it.init()\n        }\n    }\n\n    // todo eliminate suspend\n    suspend fun update(elapsedTime: Float) {\n        /*log(\"[Window] update: entering\")*/\n        app.elapsedTime = if (app.isEnable) elapsedTime else 0f // quickfix todo improve\n        /*log(\"[Window] update: updateControllers\")*/\n        app.updateControllers()\n        /*log(\"[Window] update: updateDelegate\")*/\n        if (!loaderController.isActive) {\n            app.updateDelegate()\n        }\n        /*log(\"[Window] update: updateTasks\")*/\n        app.updateTasks()\n    }\n\n    fun resize(width: Int, height: Int) {\n        surface.size.assign(width, height)\n        listeners.forEachEvent {\n            it.resize(width, height)\n        }\n        app.delegate?.resize(width, height)\n    }\n\n    fun invalidate() {\n        if (loaderController.isActive) return // quickfix todo improve\n        if (app.delegate == null) return // quickfix todo improve\n        listeners.forEachEvent {\n            it.invalidate()\n        }\n        app.delegate?.invalidate()\n    }\n\n    fun updateLayout() {\n        val layoutViews = layout.views\n        views.removeAll(layoutViews)\n        for (view in views) {\n            delegate.removeView(view)\n        }\n        views.replaceWith(layoutViews)\n        for (view in views) {\n            delegate.appendView(view)\n        }\n        listeners.forEachEvent {\n            it.updateLayout(layout)\n        }\n    }\n\n    fun updateOrientation(newOrientation: Orientation) {\n        if (oldOrientation != newOrientation) {\n            oldOrientation = newOrientation\n            listeners.forEachEvent {\n                it.updateOrientation(newOrientation)\n            }\n        }\n    }\n\n    fun repeatOnInvalidate(task: () -> Unit) {\n        listeners.add(WindowInvalidateListener(task))\n    }\n\n}\n\n/*convenience*/\n\nval Window.aspectRatio: Float get() = surface.size.aspectRatio\n\nfun Window.toLocalRectangle(camera: Camera, rectangle: Rectangle, result: Vector2.Result): Rectangle {\n    val (x1, y1) = toLocalCoordinates(camera, rectangle.x1, rectangle.y1, result)\n    val (x2, y2) = toLocalCoordinates(camera, rectangle.x2, rectangle.y2, result)\n    return Rectangle(x1, y1, x2, y2)\n}\n\nfun Window.toScissorRectangle(camera: Camera, rectangle: Rectangle, result: Vector2.Result): Rectangle.Result {\n    return toScissorRectangle(camera, rectangle.x1, rectangle.y1, rectangle.x2, rectangle.y2, result)\n}\n\nfun Window.toScissorRectangle(camera: Camera, x1: Float, y1: Float, x2: Float, y2: Float, result: Vector2.Result): Rectangle.Result {\n    val (x1, y1) = toGlobalCoordinates(camera, x1, y1, result)\n    val (x2, y2) = toGlobalCoordinates(camera, x2, y2, result)\n    return Rectangle(x1, y1, x2, y2).Result()\n}\n\nfun Window.notifyResize() {\n    val (width, height) = surface.size\n    resize(width.toInt(), height.toInt())\n}\n","package featurea.window\n\nimport featurea.layout.Camera\nimport featurea.layout.coordinates\nimport featurea.layout.x\nimport featurea.layout.y\nimport featurea.math.Size\nimport featurea.math.Transform\nimport featurea.math.Vector2\n\nfun Camera.resize(window: Window) {\n    resize(window.surface.viewport)\n}\n\nfun Window.toLocalCoordinates(camera: Camera, globalX: Float, globalY: Float, result: Vector2.Result): Vector2.Result {\n    val transform: Transform = resolveTransform(camera)\n    val cameraX: Float = if (useCamera) camera.x else 0f\n    val cameraY: Float = if (useCamera) camera.y else 0f\n    val localX: Float = (globalX - transform.tx) / transform.sx + cameraX\n    val localY: Float = (globalY - transform.ty) / transform.sy + cameraY\n    return result.apply(localX, localY)\n}\n\nfun Window.toGlobalCoordinates(camera: Camera, localX: Float, localY: Float, result: Vector2.Result): Vector2.Result {\n    val transform: Transform = resolveTransform(camera)\n    val cameraX: Float = if (useCamera) camera.x else 0f\n    val cameraY: Float = if (useCamera) camera.y else 0f\n    val globalX: Float = transform.tx + (localX - cameraX) * transform.sx\n    val globalY: Float = transform.ty + (localY - cameraY) * transform.sy\n    return result.apply(globalX, globalY)\n}\n\nfun Window.toGlobalWidth(camera: Camera, localWidth: Float): Float {\n    val transform: Transform = resolveTransform(camera)\n    val globalWidth: Float = localWidth * transform.sx\n    return globalWidth\n}\n\nfun Window.toGlobalHeight(camera: Camera, localHeight: Float): Float {\n    val transform: Transform = resolveTransform(camera)\n    val globalHeight: Float = localHeight * transform.sy\n    return globalHeight\n}\n\nfun Window.toGlobalDimensions(camera: Camera, lw: Float, lh: Float, result: Size.Result): Size.Result {\n    val transform: Transform = resolveTransform(camera)\n    val globalWidth: Float = lw * transform.sx\n    val globalHeight: Float = lh * transform.sy\n    return result.apply(globalWidth, globalHeight)\n}\n\nfun Window.toLocalDimensions(camera: Camera, gw: Float, gh: Float, result: Size.Result): Size.Result {\n    val transform: Transform = resolveTransform(camera)\n    val localWidth: Float = gw / transform.sx\n    val localHeight: Float = gh / transform.sy\n    return result.apply(localWidth, localHeight)\n}\n\nfun Window.resolveTransform(camera: Camera): Transform {\n    val transform: Transform = if (useCamera) camera.coordinates() else surface.transform\n    return transform\n}\n","package featurea.window\n\nimport featurea.utils.EventListener\nimport featurea.layout.Layout\nimport featurea.layout.Orientation\n\ninterface WindowListener : EventListener {\n    fun init() {}\n    fun resize(width: Int, height: Int) {}\n    fun invalidate() {}\n    fun updateLayout(layout: Layout) {}\n    fun updateOrientation(orientation: Orientation) {}\n}\n\nfun WindowInitListener(block: () -> Unit) = object : WindowListener {\n    override fun init() = block()\n}\n\nfun WindowInvalidateListener(task: () -> Unit): WindowListener = object : WindowListener {\n    override fun invalidate() = task()\n}\n","package featurea.window\n\nimport featurea.runtime.Artifact\nimport featurea.runtime.DependencyBuilder\nimport featurea.runtime.Plugin\nimport featurea.runtime.install\n\n/*dependencies*/\n\nexpect fun DependencyBuilder.includeExternals()\n\nval artifact = Artifact(\"featurea.window\") {\n    includeExternals()\n    include(featurea.loader.artifact)\n\n    \"Window\" to ::Window\n    \"WindowDelegate\" to ::WindowDelegate\n}\n\nfun DependencyBuilder.WindowPlugin(plugin: Plugin<Window>) = install(plugin)\n","package featurea.window\n\nimport featurea.js.*\nimport featurea.js.dialog.titlebarHeight\nimport featurea.js.dialog.titlebarOrNull\nimport featurea.utils.log\nimport featurea.runtime.*\nimport kotlinx.browser.document\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.Screen\nimport kotlinx.browser.window as jsWindow\n\n@Provide(HtmlElementProxy::class)\nclass MainView(override val module: Module) : Component {\n\n    private val rootElement: HTMLElement = import(RootElementProxy)\n    private val window: Window = import()\n\n    private val mainCanvas: HTMLCanvasElement = rootElement.querySelector(\"#mainCanvas\") as HTMLCanvasElement\n    private val dialogContent: HTMLElement? = rootElement.querySelector(\".content\") as HTMLElement?\n    private val hasDialogContent: Boolean = dialogContent != null\n    private var isDestroy: Boolean = false\n    private var currentWidth: Int = -1\n    private var currentHeight: Int = -1\n    private var then: Float = 0f\n\n    override fun onCreateComponent() {\n        if (hasDialogContent) {\n            mainCanvas.setHtmlCanvasSize(rootElement.clientWidth, rootElement.clientHeight - rootElement.titlebarHeight)\n        }\n        dialogContent?.onchange = /*draggable-resizable-dialog.js:228*/ {\n            window.updateLayout()\n        }\n        provide(HtmlElementProxy(mainCanvas))\n        jsWindow.requestAnimationFrame {\n            onUpdate(it)\n        }\n        if (isUserAgentNotMobile) {\n            val titlebar: HTMLElement? = rootElement.titlebarOrNull\n            if (titlebar != null) {\n                log(\"[MainView] titlebar: $titlebar\")\n                titlebar.addEventListener(\"dblclick\", {\n                    val mainCanvas: HTMLCanvasElement = rootElement.querySelector(\"#mainCanvas\") as HTMLCanvasElement\n                    keep(mainCanvas)\n                    js(\n                        \"\"\"\n                        if (mainCanvas.requestFullscreen) {\n                            mainCanvas.requestFullscreen();\n                        } else if (mainCanvas.mozRequestFullScreen) {\n                            mainCanvas.mozRequestFullScreen();\n                        } else if (mainCanvas.webkitRequestFullscreen) {\n                            mainCanvas.webkitRequestFullscreen();\n                        } else if (mainCanvas.msRequestFullscreen) {\n                            mainCanvas.msRequestFullscreen();\n                        }\n                        \"\"\"\n                    )\n                })\n            }\n        }\n    }\n\n    override fun onDeleteComponent() {\n        isDestroy = true\n    }\n\n    /*internals*/\n\n    private fun onUpdate(now: Double) {\n        if (then == 0f) window.init() // not created yet\n        if (isDestroy) return // already destroyed\n\n        val now: Float = now.toFloat()\n        val elapsedTime: Float = now - then\n        then = now\n        GlobalScope.launch {\n            try {\n                onResize()\n                window.update(elapsedTime)\n            } finally {\n                jsWindow.requestAnimationFrame {\n                    onUpdate(it)\n                }\n            }\n        }\n    }\n\n    private fun onResize() {\n        if (hasDialogContent) {\n            val (width, height) = if (document.isFullscreen) {\n                val jsScreen: Screen = jsWindow.screen\n                if (currentWidth == jsScreen.width && currentHeight == jsScreen.height) return\n                if (jsWindow.isMobileKeyboardVisible) return\n                currentWidth = jsScreen.width\n                currentHeight = jsScreen.height\n                mainCanvas.setHtmlCanvasSize(currentWidth, currentHeight)\n            } else {\n                if (currentWidth == rootElement.clientWidth && currentHeight == rootElement.clientHeight) return\n                if (jsWindow.isMobileKeyboardVisible) return\n                currentWidth = rootElement.clientWidth\n                currentHeight = rootElement.clientHeight\n                mainCanvas.setHtmlCanvasSize(currentWidth, currentHeight - rootElement.titlebarHeight)\n            }\n            window.resize(width, height)\n            window.updateLayout()\n        } else {\n            if (currentWidth == rootElement.clientWidth && currentHeight == rootElement.clientHeight) return\n            log(\"[MainView.kt] clientHeight before resize: ${rootElement.clientHeight}\")\n            val (width, height) = mainCanvas.setHtmlCanvasSize(rootElement.clientWidth, rootElement.clientHeight)\n            window.resize(width, height)\n            window.updateLayout()\n            currentWidth = rootElement.clientWidth\n            currentHeight = rootElement.clientHeight\n            log(\"[MainView.kt] clientHeight after resize: ${rootElement.clientHeight}\")\n        }\n    }\n\n}\n","package featurea.window\n\nimport featurea.js.HtmlElementProxy\nimport featurea.js.setPosition\nimport featurea.js.setSize\nimport featurea.layout.View\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport kotlinx.browser.document\nimport org.w3c.dom.HTMLElement\nimport kotlin.reflect.KClass\n\nactual class WindowElement(val htmlElement: HTMLElement)\n\nactual class WindowDelegate actual constructor(override val module: Module) : Component {\n\n    private val htmlElement: HTMLElement by lazy { import(HtmlElementProxy) }\n    private val window: Window = import()\n\n    actual fun appendView(view: View) {\n        val element: WindowElement = findWindowElement(view) ?: return\n        val (x1, y1, x2, y2) = view.rectangle\n        val ox: Int = htmlElement.getBoundingClientRect().left.toInt()\n        val oy: Int = htmlElement.getBoundingClientRect().top.toInt()\n        val x: Int = ox + x1.toInt()\n        val y: Int = oy + y1.toInt()\n        val width: Int = (x2 - x1).toInt()\n        val height: Int = (y2 - y1).toInt()\n        element.htmlElement.setPosition(x, y)\n        element.htmlElement.setSize(width, height)\n        element.htmlElement.style.position = \"absolute\"\n        element.htmlElement.style.zIndex = \"2\"\n        document.body?.appendChild(element.htmlElement)\n    }\n\n    actual fun removeView(view: View) {\n        val element: WindowElement = window.elements.remove(view) ?: return\n        val viewType: KClass<out View> = view::class\n        val elementProvider: WindowElementProvider<View> = window.elementProviders[viewType] ?: return\n        with(elementProvider) {\n            destroyElement(element)\n        }\n        element.htmlElement.style.zIndex = \"0\"\n        element.htmlElement.style.display = \"none\"\n        document.body?.removeChild(element.htmlElement)\n    }\n\n    /*internals*/\n\n    private fun findWindowElement(view: View): WindowElement? {\n        // existing\n        val existingElement = window.elements[view]\n        if (existingElement != null) {\n            return existingElement\n        }\n\n        // newly created\n        val viewType: KClass<out View> = view::class\n        val elementProvider: WindowElementProvider<View> = window.elementProviders[viewType] ?: return null\n        val element: WindowElement = with(elementProvider) { createElementOrNull(view) } ?: return null\n        window.elements[view] = element\n        return element\n    }\n\n}\n","package featurea.window\n\nimport featurea.runtime.DependencyBuilder\n\n/*dependencies*/\n\nactual fun DependencyBuilder.includeExternals() {\n    include(featurea.js.artifact)\n\n    WindowPlugin {\n        \"MainView\" to ::MainView\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n",null,null,null,null,null,null,null,null,null,null,null,"package featurea.js.dialog\n\nimport featurea.js.*\nimport kotlinx.browser.document\nimport kotlinx.html.*\nimport kotlinx.html.dom.append\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.MouseEvent\nimport kotlinx.browser.window as jsWindow\n\nval HTMLElement.titlebarOrNull: HTMLElement? get() = querySelector(\".titlebar\") as HTMLElement?\nval HTMLElement.titlebarHeight: Int get() = titlebarOrNull?.clientHeight ?: 0 // 32px\n\nfun showDialogBox(dialogId: String) {\n    js(\"new window.DialogBox(dialogId).showDialog()\")\n}\n\nfun registerEscapeListener(rootElements: Map<String, HTMLElement>) {\n    fun callback(event: Event) {\n        // >> quickfix todo improve\n        val target: HTMLElement? = event.target as HTMLElement?\n        if (target != null) {\n            if (target.classList.asList().find { it.startsWith(\"mdi-\") } != null) return\n            if (target.containsRecursively { it.classList.asList().find { it == \"timepicker_wrap\" } != null }) return\n        }\n        // <<\n\n        val escapeTolerance = 8\n        val touch = if (event is TouchEvent) event.changedTouches[0]!! else null\n        val x = touch?.clientX ?: if (event is MouseEvent) event.clientX else -1\n        val y = touch?.clientY ?: if (event is MouseEvent) event.clientY else -1\n        for ((name, rootElement) in rootElements) {\n            if (rootElement.style.display == \"none\") continue\n            if (rootElement.getBoundingClientRect().contains(x, y, escapeTolerance)) return\n            val mainCanvas: Element = rootElement.querySelector(\"#mainCanvas\") ?: error(\"rootElement: $rootElement\")\n            if (mainCanvas.getBoundingClientRect().contains(x, y, escapeTolerance)) return\n        }\n        for ((name, rootElement) in rootElements) {\n            rootElement.style.applyCssAttribute(\"display\" to \"none\")\n        }\n    }\n    document.addEventListener(\"touchstart\", ::callback)\n    document.addEventListener(\"mousedown\", ::callback)\n}\n\nfun HTMLElement.appendMainCanvasDialog(title: String, screenRatio: Float, splashImagePath: String?): HTMLElement {\n    val dialog = append.div {\n        classes += \"dialog\"\n        div {\n            classes += \"titlebar\"\n            +title\n        }\n        button {\n            id = \"closeButton\"\n            +\"✖\"\n        }\n        div {\n            classes += \"mainCanvasDialogContent\"\n            canvas {\n                id = \"mainCanvas\"\n                style = \"display: hidden;\"\n            }\n        }\n        div {\n            id = \"loaderLabel\"\n            classes += \"content\"\n            classes += \"input-disable\"\n            style = \"display: none; color: white; vertical-align: middle; text-align: center;\"\n            +\"Loading 0%\"\n        }\n        div {\n            classes += \"content\"\n            classes += \"input-disable\"\n            style =\n                \"left: 0px; top: 0px; width: 100%; height: 100%; text-align: center; background-color: white; display: flex; align-items: center; justify-content: center;\"\n\n            img {\n                id = \"splashImage\"\n                style = \"display: none; height: 100%; width: auto;\"\n                src = splashImagePath ?: \"_\"\n            }\n\n            img {\n                id = \"loadingImage\"\n                style = \"display: none; width: 200px; height: 200px; background-color: white\"\n                src = \"images/Loading.gif\"\n            }\n        }\n        /*input {\n            id = \"hiddenInput\"\n            type = InputType.text\n        }*/\n    }\n    val height = jsWindow.innerHeight * .8f\n    if (isUserAgentMobile) {\n        dialog.style.width = \"100%\"\n        dialog.style.height = \"100%\"\n    } else {\n        dialog.style.width = \"${screenRatio * height}px\"\n        dialog.style.height = \"${height + 30f}px\" // quickfix todo delete `+ 30f`\n    }\n    dialog.style.zIndex = \"6\"\n\n    (dialog.querySelector(\"#loaderLabel\") as HTMLElement).style.applyCssAttribute(\"line-height\" to \"${height - 80}px\")\n    return dialog\n}\n\nfun HTMLElement.onChangeCssProperty(key: String, listener: (value: String) -> Unit) {\n    val currentKey = \"$key-current\"\n    val value = style.getPropertyValue(key)\n    style.setProperty(currentKey, value)\n    jsWindow.setTimeout({\n        val currentValue = style.getPropertyValue(currentKey)\n        val value = style.getPropertyValue(key)\n        if (currentValue != value) {\n            style.setProperty(currentKey, value)\n            listener(value)\n        }\n    }, 300)\n}\n\nfun HTMLElement.setupFullScreenSize() {\n    // >> quickfix todo improve\n    if (jsWindow.isMobileKeyboardVisible) return\n    val title: HTMLElement = querySelector(\".titlebar\") as HTMLElement? ?: return\n    // <<\n\n    val width = jsWindow.innerWidth\n    val height = jsWindow.innerHeight\n    println(\"setupFullScreenSize: $width, $height\")\n    style.left = \"0px\"\n    style.top = \"0px\"\n    style.width = \"${width}px\"\n    style.height = \"${height}px\"\n    style.zIndex = \"5\"\n    style.position = \"fixed\"\n\n    (querySelector(\"#loaderLabel\") as HTMLElement?)?.style?.applyCssAttribute(\"line-height\" to \"${jsWindow.innerHeight - 80}px\")\n    title.style.width = \"${jsWindow.innerWidth - 8}px\"\n}\n","package featurea.text\n\nimport featurea.System\nimport featurea.content.ResourceNotFoundException\nimport featurea.utils.readTextOrNull\nimport featurea.runtime.Component\nimport featurea.runtime.import\n\nclass TextContent(val system: System) {\n\n    private val existingTexts = mutableMapOf<String, String>()\n\n    suspend fun findText(filePath: String, limit: Int = -1): String {\n        return findTextOrNull(filePath, limit) ?: throw ResourceNotFoundException(filePath)\n    }\n\n    suspend fun findTextOrNull(filePath: String, limit: Int = -1): String? {\n        // 1. existing\n        val existingText: String? = existingTexts[filePath]\n        if (existingText != null) {\n            return existingText\n        }\n\n        // 2. newly created\n        val text: String? = system.readTextOrNull(filePath, limit)\n        if (text != null) {\n            existingTexts[filePath] = text\n        }\n\n        // 3. result\n        return text\n    }\n\n    fun removeCachedText(filePath: String) {\n        existingTexts.remove(filePath)\n    }\n\n    fun clearCache() {\n        existingTexts.clear()\n    }\n\n}\n\nsuspend fun Component.readText(filePath: String): String {\n    val system: System = import()\n    return checkNotNull(system.readTextOrNull(filePath))\n}\n","package featurea.text\n\nimport featurea.content.ContentType\nimport featurea.content.Resource\nimport featurea.runtime.Component\nimport featurea.runtime.Module\n\nclass TextContentType(override val module: Module) : Component, ContentType {\n\n    override suspend fun load(resource: Resource, loadingQueue: ArrayList<String>) {\n        loadingQueue.add(resource.path)\n    }\n\n    override suspend fun release(resource: Resource, releaseQueue: ArrayList<String>) {\n        releaseQueue.add(resource.path)\n    }\n\n}\n","package featurea.text\n\nimport featurea.System\nimport featurea.content.contentTypes\nimport featurea.runtime.Artifact\n\nval artifact = Artifact(\"featurea.text\") {\n    include(featurea.text.reader.artifact)\n\n    \"TextContent\" to TextContent::class\n\n    contentTypes {\n        \"TextContentType\" to ::TextContentType\n    }\n\n    static {\n        val system: System = import()\n        provideComponent(TextContent(system))\n    }\n}\n","package featurea.layout\n\nclass Layout {\n\n    val views: MutableList<View> = mutableListOf()\n\n    fun addView(view: View) {\n        if (views.contains(view)) error(\"duplicate view: $view\")\n        views.add(view)\n    }\n\n    fun removeView(view: View) {\n        views.remove(view)\n    }\n\n}\n","package featurea.layout\n\nval AllOrientations = listOf(\n    Orientation.Portrait,\n    Orientation.PortraitUpsideDown,\n    Orientation.LandscapeRight,\n    Orientation.LandscapeLeft\n)\n\nval LandscapeOrientations: List<Orientation> = listOf(Orientation.LandscapeLeft, Orientation.LandscapeRight)\n\nval PortraitOrientations: List<Orientation> = listOf(Orientation.Portrait, Orientation.PortraitUpsideDown)\n\nenum class Orientation {\n\n    LandscapeLeft,\n    LandscapeRight,\n    Portrait,\n    PortraitUpsideDown;\n\n    val isHorizontal: Boolean get() = this == LandscapeRight || this == LandscapeLeft\n    val isVertical: Boolean get() = this == Portrait || this == PortraitUpsideDown\n\n}\n","package featurea.layout\n\nimport featurea.math.*\nimport featurea.utils.splitAndTrim\n\nclass Camera {\n\n    val style: CameraStyle = CameraStyle(this)\n    val surface: Surface = Surface()\n    private val sizeParameter = Size()\n\n    constructor(init: Camera.() -> Unit = {}) {\n        init()\n    }\n\n    constructor(original: Camera) {\n        assign(original)\n    }\n\n    constructor(size: Size) {\n        surface.size.assign(size)\n    }\n\n    fun assign(original: Camera) {\n        surface.transform.edit { assign(original.surface.transform) }\n        surface.viewport.assign(original.surface.viewport)\n        surface.origin.assign(original.surface.origin)\n        surface.size.assign(original.surface.size)\n    }\n\n    fun assign(value: String) {\n        val (x, y, width, height) = value.splitAndTrim(\",\").map { it.toFloat() }\n        surface.origin.assign(x, y)\n        surface.size.assign(width, height)\n    }\n\n    fun resize(width: Float, height: Float) {\n        resize(sizeParameter.assign(width, height))\n    }\n\n    fun resize(size: Size) {\n        fun center(isVertical: Boolean, size: Size) {\n            val tx: Float\n            val ty: Float\n            if (isVertical) {\n                tx = 0f\n                val newCameraHeight = surface.size.height * surface.transform.sy\n                ty = (size.height - newCameraHeight) / 2\n                surface.viewport.width = size.width\n                surface.viewport.height = newCameraHeight\n            } else {\n                val newCameraWidth = surface.size.width * surface.transform.sx\n                tx = (size.width - newCameraWidth) / 2\n                ty = 0f\n                surface.viewport.width = newCameraWidth\n                surface.viewport.height = size.height\n            }\n            surface.transform.edit { assignTranslation(tx, ty) } // quickfix todo conceptualize\n        }\n\n        fun anchor(isVertical: Boolean, size: Size) {\n            if (isVertical) {\n                style.vertical?.layout?.invoke(this, size)\n            } else {\n                style.horizontal?.layout?.invoke(this, size)\n            }\n        }\n\n        surface.transform.edit { assignOrigin(surface.origin) } // quickfix todo conceptualize\n        if (size.isNotEmpty() && surface.size.isNotEmpty()) {\n            val widthRatio = size.width / surface.size.width\n            val heightRatio = size.height / surface.size.height\n            val minRatio = min(widthRatio, heightRatio)\n            surface.transform.edit { assignScale(minRatio, minRatio) } // quickfix todo conceptualize\n            val isVertical = widthRatio == minRatio\n            center(isVertical, size)\n            anchor(isVertical, size)\n        }\n    }\n\n}\n\n/*convenience*/\n\nval Camera.coordinates: Coordinates get() = surface.coordinates\nval Camera.x: Float get() = surface.origin.x\nval Camera.y: Float get() = surface.origin.y\nval Camera.size: Size get() = surface.size\n\nfun Camera.toScissorRectangle(): Rectangle.Result {\n    val x1: Float = surface.transform.tx\n    val y1: Float = surface.transform.ty\n    val x2: Float = x1 + surface.viewport.width\n    val y2: Float = y1 + surface.viewport.height\n    return rectangleResult.assign(x1, y1, x2, y2)\n}\n\nprivate val rectangleResult: Rectangle.Result = Rectangle().Result()\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.contracts.*\nimport kotlin.math.abs\n\n@OptIn(ExperimentalTime::class)\nprivate inline val storageUnit get() = DurationUnit.NANOSECONDS\n\n/**\n * Represents the amount of time one instant of time is away from another instant.\n *\n * A negative duration is possible in a situation when the second instant is earlier than the first one.\n * An infinite duration value [Duration.INFINITE] can be used to represent infinite timeouts.\n *\n * To construct a duration use either the extension function [toDuration],\n * or the extension properties [hours], [minutes], [seconds], and so on,\n * available on [Int], [Long], and [Double] numeric types.\n *\n * To get the value of this duration expressed in a particular [duration units][DurationUnit]\n * use the functions [toInt], [toLong], and [toDouble]\n * or the properties [inHours], [inMinutes], [inSeconds], [inNanoseconds], and so on.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\npublic inline class Duration internal constructor(internal val value: Double) : Comparable<Duration> {\n// TODO: backend fails on init block, wait for KT-28055\n\n//    init {\n//        require(_value.isNaN().not())\n//    }\n\n    companion object {\n        /** The duration equal to exactly 0 seconds. */\n        public val ZERO: Duration = Duration(0.0)\n\n        /** The duration whose value is positive infinity. It is useful for representing timeouts that should never expire. */\n        public val INFINITE: Duration = Duration(Double.POSITIVE_INFINITY)\n\n        /** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n        public fun convert(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double =\n            convertDurationUnit(value, sourceUnit, targetUnit)\n    }\n\n    // arithmetic operators\n\n    /** Returns the negative of this value. */\n    public operator fun unaryMinus(): Duration = Duration(-value)\n\n    /** Returns a duration whose value is the sum of this and [other] duration values. */\n    public operator fun plus(other: Duration): Duration = Duration(value + other.value)\n\n    /** Returns a duration whose value is the difference between this and [other] duration values. */\n    public operator fun minus(other: Duration): Duration = Duration(value - other.value)\n\n    /** Returns a duration whose value is this duration value multiplied by the given [scale] number. */\n    public operator fun times(scale: Int): Duration = Duration(value * scale)\n\n    /** Returns a duration whose value is this duration value multiplied by the given [scale] number. */\n    public operator fun times(scale: Double): Duration = Duration(value * scale)\n\n    /** Returns a duration whose value is this duration value divided by the given [scale] number. */\n    public operator fun div(scale: Int): Duration = Duration(value / scale)\n\n    /** Returns a duration whose value is this duration value divided by the given [scale] number. */\n    public operator fun div(scale: Double): Duration = Duration(value / scale)\n\n    /** Returns a number that is the ratio of this and [other] duration values. */\n    public operator fun div(other: Duration): Double = this.value / other.value\n\n    /** Returns true, if the duration value is less than zero. */\n    public fun isNegative(): Boolean = value < 0\n\n    /** Returns true, if the duration value is greater than zero. */\n    public fun isPositive(): Boolean = value > 0\n\n    /** Returns true, if the duration value is infinite. */\n    public fun isInfinite(): Boolean = value.isInfinite()\n\n    /** Returns true, if the duration value is finite. */\n    public fun isFinite(): Boolean = value.isFinite()\n\n    /** Returns the absolute value of this value. The returned value is always non-negative. */\n    public val absoluteValue: Duration get() = if (isNegative()) -this else this\n\n    override fun compareTo(other: Duration): Int = this.value.compareTo(other.value)\n\n\n    // splitting to components\n\n    /**\n     * Splits this duration into days, hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration, and its absolute value is less than 24;\n     * - `days` represents the whole number of days in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (days: Int, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inDays.toInt(), hoursComponent, minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inHours.toInt(), minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inMinutes.toInt(), secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration.\n     *   If the value doesn't fit in [Long] range, i.e. it's greater than [Long.MAX_VALUE] or less than [Long.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (seconds: Long, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inSeconds.toLong(), nanosecondsComponent)\n    }\n\n    @PublishedApi\n    internal val hoursComponent: Int get() = (inHours % 24).toInt()\n    @PublishedApi\n    internal val minutesComponent: Int get() = (inMinutes % 60).toInt()\n    @PublishedApi\n    internal val secondsComponent: Int get() = (inSeconds % 60).toInt()\n    @PublishedApi\n    internal val nanosecondsComponent: Int get() = (inNanoseconds % 1e9).toInt()\n\n\n    // conversion to units\n\n    /** Returns the value of this duration expressed as a [Double] number of the specified [unit]. */\n    public fun toDouble(unit: DurationUnit): Double = convertDurationUnit(value, storageUnit, unit)\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of the specified [unit].\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     */\n    public fun toLong(unit: DurationUnit): Long = toDouble(unit).toLong()\n\n    /**\n     * Returns the value of this duration expressed as an [Int] number of the specified [unit].\n     *\n     * If the value doesn't fit in the range of [Int] type, it is coerced into that range, see the conversion [Double.toInt] for details.\n     */\n    public fun toInt(unit: DurationUnit): Int = toDouble(unit).toInt()\n\n    /** The value of this duration expressed as a [Double] number of days. */\n    public val inDays: Double get() = toDouble(DurationUnit.DAYS)\n\n    /** The value of this duration expressed as a [Double] number of hours. */\n    public val inHours: Double get() = toDouble(DurationUnit.HOURS)\n\n    /** The value of this duration expressed as a [Double] number of minutes. */\n    public val inMinutes: Double get() = toDouble(DurationUnit.MINUTES)\n\n    /** The value of this duration expressed as a [Double] number of seconds. */\n    public val inSeconds: Double get() = toDouble(DurationUnit.SECONDS)\n\n    /** The value of this duration expressed as a [Double] number of milliseconds. */\n    public val inMilliseconds: Double get() = toDouble(DurationUnit.MILLISECONDS)\n\n    /** The value of this duration expressed as a [Double] number of microseconds. */\n    public val inMicroseconds: Double get() = toDouble(DurationUnit.MICROSECONDS)\n\n    /** The value of this duration expressed as a [Double] number of nanoseconds. */\n    public val inNanoseconds: Double get() = toDouble(DurationUnit.NANOSECONDS)\n\n    // shortcuts\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of nanoseconds is approximately ±292 years.\n     */\n    public fun toLongNanoseconds(): Long = toLong(DurationUnit.NANOSECONDS)\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * The value is coerced to the range of [Long] type, if it doesn't fit in that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of milliseconds is approximately ±292 million years.\n     */\n    public fun toLongMilliseconds(): Long = toLong(DurationUnit.MILLISECONDS)\n\n    /**\n     * Returns a string representation of this duration value expressed in the unit which yields the most compact and readable number value.\n     *\n     * Special cases:\n     *  - zero duration is formatted as `\"0s\"`\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *  - very small durations (less than 1e-15 s) are expressed in seconds and formatted in scientific notation\n     *  - very big durations (more than 1e+7 days) are expressed in days and formatted in scientific notation\n     *\n     * @return the value of duration in the automatically determined unit followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @sample samples.time.Durations.toStringDefault\n     */\n    override fun toString(): String = when {\n        isInfinite() -> value.toString()\n        value == 0.0 -> \"0s\"\n        else -> {\n            val absNs = absoluteValue.inNanoseconds\n            var scientific = false\n            var maxDecimals = 0\n            val unit = when {\n                absNs < 1e-6 -> DurationUnit.SECONDS.also { scientific = true }\n                absNs < 1 -> DurationUnit.NANOSECONDS.also { maxDecimals = 7 }\n                absNs < 1e3 -> DurationUnit.NANOSECONDS\n                absNs < 1e6 -> DurationUnit.MICROSECONDS\n                absNs < 1e9 -> DurationUnit.MILLISECONDS\n                absNs < 1000e9 -> DurationUnit.SECONDS\n                absNs < 60_000e9 -> DurationUnit.MINUTES\n                absNs < 3600_000e9 -> DurationUnit.HOURS\n                absNs < 86400e9 * 1e7 -> DurationUnit.DAYS\n                else -> DurationUnit.DAYS.also { scientific = true }\n            }\n            val value = toDouble(unit)\n            when {\n                scientific -> formatScientific(value)\n                maxDecimals > 0 -> formatUpToDecimals(value, maxDecimals)\n                else -> formatToExactDecimals(value, precision(abs(value)))\n            } + unit.shortName()\n        }\n    }\n\n    private fun precision(value: Double): Int = when {\n        value < 1 -> 3\n        value < 10 -> 2\n        value < 100 -> 1\n        else -> 0\n    }\n\n    /**\n     * Returns a string representation of this duration value expressed in the given [unit]\n     * and formatted with the specified [decimals] number of digits after decimal point.\n     *\n     * Special cases:\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *\n     * @return the value of duration in the specified [unit] followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @throws IllegalArgumentException if [decimals] is less than zero.\n     *\n     * @sample samples.time.Durations.toStringDecimals\n     */\n    public fun toString(unit: DurationUnit, decimals: Int = 0): String {\n        require(decimals >= 0) { \"decimals must be not negative, but was $decimals\" }\n        if (isInfinite()) return value.toString()\n        val number = toDouble(unit)\n        return when {\n            abs(number) < 1e14 -> formatToExactDecimals(number, decimals.coerceAtMost(12))\n            else -> formatScientific(number)\n        } + unit.shortName()\n    }\n\n\n    /**\n     * Returns an ISO-8601 based string representation of this duration.\n     *\n     * The returned value is presented in the format `PThHmMs.fS`, where `h`, `m`, `s` are the integer components of this duration (see [toComponents])\n     * and `f` is a fractional part of second. Depending on the roundness of the value the fractional part can be formatted with either\n     * 0, 3, 6, or 9 decimal digits.\n     *\n     * If the hours component absolute value of this duration is greater than [Int.MAX_VALUE], it is replaced with [Int.MAX_VALUE],\n     * so the infinite duration is formatted as `\"PT2147483647H\".\n     *\n     * Negative durations are indicated with the sign `-` in the beginning of the returned string, for example, `\"-PT5M30S\"`.\n     *\n     * @sample samples.time.Durations.toIsoString\n     */\n    @OptIn(ExperimentalStdlibApi::class)\n    public fun toIsoString(): String = buildString {\n        if (isNegative()) append('-')\n        append(\"PT\")\n        absoluteValue.toComponents { hours, minutes, seconds, nanoseconds ->\n            val hasHours = hours != 0\n            val hasSeconds = seconds != 0 || nanoseconds != 0\n            val hasMinutes = minutes != 0 || (hasSeconds && hasHours)\n            if (hasHours) {\n                append(hours).append('H')\n            }\n            if (hasMinutes) {\n                append(minutes).append('M')\n            }\n            if (hasSeconds || (!hasHours && !hasMinutes)) {\n                append(seconds)\n                if (nanoseconds != 0) {\n                    append('.')\n                    val nss = nanoseconds.toString().padStart(9, '0')\n                    when {\n                        nanoseconds % 1_000_000 == 0 -> appendRange(nss, 0, 3)\n                        nanoseconds % 1_000 == 0 -> appendRange(nss, 0, 6)\n                        else -> append(nss)\n                    }\n                }\n                append('S')\n            }\n        }\n    }\n\n}\n\n// constructing from number of units\n// extension functions\n\n/** Returns a [Duration] equal to this [Int] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Int.toDuration(unit: DurationUnit): Duration = toDouble().toDuration(unit)\n\n/** Returns a [Duration] equal to this [Long] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Long.toDuration(unit: DurationUnit): Duration = toDouble().toDuration(unit)\n\n/** Returns a [Duration] equal to this [Double] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Double.toDuration(unit: DurationUnit): Duration = Duration(convertDurationUnit(this, unit, storageUnit))\n\n// constructing from number of units\n// extension properties\n\n/** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Long] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Double] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Int] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Long] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Double] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Int] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Long] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Double] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.times(duration: Duration): Duration = duration * this\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Double.times(duration: Duration): Duration = duration * this\n\n\ninternal expect fun formatToExactDecimals(value: Double, decimals: Int): String\ninternal expect fun formatUpToDecimals(value: Double, decimals: Int): String\ninternal expect fun formatScientific(value: Double): String",null,null,null,null,null,null,null,"package kotlinx.html.attributes\n\nimport kotlinx.html.*\n\ninterface AttributeEncoder<T> {\n    fun encode(attributeName: String, value: T): String\n    fun decode(attributeName: String, value: String): T\n    fun empty(attributeName: String, tag: Tag): T =\n        throw IllegalStateException(\"Attribute $attributeName is not yet defined for tag ${tag.tagName}\")\n}\n\nabstract class Attribute<T>(val encoder: AttributeEncoder<T>) {\n    open operator fun get(thisRef: Tag, attributeName: String): T =\n        thisRef.attributes[attributeName]?.let {\n            encoder.decode(attributeName, it)\n        } ?: encoder.empty(attributeName, thisRef)\n\n    open operator fun set(thisRef: Tag, attributeName: String, value: T) {\n        thisRef.attributes.put(attributeName, encoder.encode(attributeName, value))\n    }\n}\n\nobject StringEncoder : AttributeEncoder<String> {\n    override fun encode(attributeName: String, value: String): String = value\n    override fun decode(attributeName: String, value: String): String = value\n}\n\nclass StringAttribute : Attribute<String>(StringEncoder)\n\n//public class IntAttribute : Attribute<Int>() {\n//    override fun encode(desc: PropertyMetadata, value: Int): String = value.toString()\n//    override fun decode(desc: PropertyMetadata, value: String): Int = value.toInt()\n//}\n\nfun Boolean.booleanEncode() = toString()\nclass BooleanEncoder(val trueValue: String = \"true\", val falseValue: String = \"false\") : AttributeEncoder<Boolean> {\n    override fun encode(attributeName: String, value: Boolean): String = if (value) trueValue else falseValue\n    override fun decode(attributeName: String, value: String): Boolean = when (value) {\n        trueValue -> true\n        falseValue -> false\n        else -> throw IllegalArgumentException(\"Unknown value $value for $attributeName\")\n    }\n}\n\nclass BooleanAttribute(trueValue: String = \"true\", falseValue: String = \"false\") :\n    Attribute<Boolean>(BooleanEncoder(trueValue, falseValue))\n\nfun Boolean.tickerEncode(attributeName: String): String = if (this) attributeName else \"\"\n\nobject TickerEncoder : AttributeEncoder<Boolean> {\n    override fun encode(attributeName: String, value: Boolean): String = value.tickerEncode(attributeName)\n    override fun decode(attributeName: String, value: String): Boolean = value == attributeName\n}\n\nclass TickerAttribute : Attribute<Boolean>(TickerEncoder) {\n    override fun set(thisRef: Tag, attributeName: String, value: Boolean) {\n        if (value) {\n            thisRef.attributes.put(attributeName, attributeName)\n        } else {\n            thisRef.attributes.remove(attributeName)\n        }\n    }\n}\n\nclass EnumEncoder<T : AttributeEnum>(val valuesMap: Map<String, T>) : AttributeEncoder<T> {\n    override fun encode(attributeName: String, value: T): String = value.realValue\n    override fun decode(attributeName: String, value: String): T =\n        valuesMap[value] ?: throw IllegalArgumentException(\"Unknown value $value for $attributeName\")\n}\n\nfun AttributeEnum.enumEncode(): String = realValue\nclass EnumAttribute<T : AttributeEnum>(val values: Map<String, T>) : Attribute<T>(EnumEncoder(values))\n\nfun stringSetDecode(value: String?): Set<String>? = value?.split(\"\\\\s+\".toRegex())?.filterNot { it.isEmpty() }?.toSet()\nfun Set<String>.stringSetEncode() = joinToString(\" \")\n\nobject StringSetEncoder : AttributeEncoder<Set<String>> {\n    override fun encode(attributeName: String, value: Set<String>): String = value.joinToString(\" \")\n    override fun decode(attributeName: String, value: String): Set<String> = stringSetDecode(value)!!\n    override fun empty(attributeName: String, tag: Tag) = emptySet<String>()\n}\n\nclass StringSetAttribute : Attribute<Set<String>>(StringSetEncoder)","package kotlinx.html\n\nimport kotlinx.html.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nenum class Dir(override val realValue : String) : AttributeEnum {\n    ltr(\"ltr\"),\n    rtl(\"rtl\")\n}\n\ninternal val dirValues : Map<String, Dir> = Dir.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class Draggable(override val realValue : String) : AttributeEnum {\n    htmlTrue(\"true\"),\n    htmlFalse(\"false\"),\n    auto(\"auto\")\n}\n\ninternal val draggableValues : Map<String, Draggable> = Draggable.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class RunAt(override val realValue : String) : AttributeEnum {\n    server(\"server\")\n}\n\ninternal val runAtValues : Map<String, RunAt> = RunAt.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject ATarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject ARel {\n    val alternate : String = \"Alternate\"\n    val appEndIx : String = \"Appendix\"\n    val bookmark : String = \"Bookmark\"\n    val chapter : String = \"Chapter\"\n    val contentS : String = \"Contents\"\n    val copyright : String = \"Copyright\"\n    val glossary : String = \"Glossary\"\n    val help : String = \"Help\"\n    val index : String = \"Index\"\n    val next : String = \"Next\"\n    val prev : String = \"Prev\"\n    val section : String = \"Section\"\n    val start : String = \"Start\"\n    val stylesheet : String = \"Stylesheet\"\n    val subsection : String = \"Subsection\"\n\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\n}\n\n@Suppress(\"unused\")\nobject AType {\n    val textAsp : String = \"text/asp\"\n    val textAsa : String = \"text/asa\"\n    val textCss : String = \"text/css\"\n    val textHtml : String = \"text/html\"\n    val textJavaScript : String = \"text/javascript\"\n    val textPlain : String = \"text/plain\"\n    val textScriptLet : String = \"text/scriptlet\"\n    val textXComponent : String = \"text/x-component\"\n    val textXHtmlInsertion : String = \"text/x-html-insertion\"\n    val textXml : String = \"text/xml\"\n\n    val values : List<String> = listOf(\"textAsp\", \"textAsa\", \"textCss\", \"textHtml\", \"textJavaScript\", \"textPlain\", \"textScriptLet\", \"textXComponent\", \"textXHtmlInsertion\", \"textXml\")\n}\n\n@Suppress(\"unused\")\nenum class AreaShape(override val realValue : String) : AttributeEnum {\n    rect(\"rect\"),\n    circle(\"circle\"),\n    poly(\"poly\"),\n    default(\"default\")\n}\n\ninternal val areaShapeValues : Map<String, AreaShape> = AreaShape.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject AreaTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject AreaRel {\n    val alternate : String = \"Alternate\"\n    val appEndIx : String = \"Appendix\"\n    val bookmark : String = \"Bookmark\"\n    val chapter : String = \"Chapter\"\n    val contentS : String = \"Contents\"\n    val copyright : String = \"Copyright\"\n    val glossary : String = \"Glossary\"\n    val help : String = \"Help\"\n    val index : String = \"Index\"\n    val next : String = \"Next\"\n    val prev : String = \"Prev\"\n    val section : String = \"Section\"\n    val start : String = \"Start\"\n    val stylesheet : String = \"Stylesheet\"\n    val subsection : String = \"Subsection\"\n\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\n}\n\n@Suppress(\"unused\")\nobject BaseTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class ButtonFormEncType(override val realValue : String) : AttributeEnum {\n    multipartFormData(\"multipart/form-data\"),\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\n    textPlain(\"text/plain\")\n}\n\ninternal val buttonFormEncTypeValues : Map<String, ButtonFormEncType> = ButtonFormEncType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class ButtonFormMethod(override val realValue : String) : AttributeEnum {\n    get(\"get\"),\n    post(\"post\"),\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\n}\n\ninternal val buttonFormMethodValues : Map<String, ButtonFormMethod> = ButtonFormMethod.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject ButtonFormTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class ButtonType(override val realValue : String) : AttributeEnum {\n    button(\"button\"),\n    reset(\"reset\"),\n    submit(\"submit\")\n}\n\ninternal val buttonTypeValues : Map<String, ButtonType> = ButtonType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class CommandType(override val realValue : String) : AttributeEnum {\n    command(\"command\"),\n    checkBox(\"checkbox\"),\n    radio(\"radio\")\n}\n\ninternal val commandTypeValues : Map<String, CommandType> = CommandType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class FormEncType(override val realValue : String) : AttributeEnum {\n    multipartFormData(\"multipart/form-data\"),\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\n    textPlain(\"text/plain\")\n}\n\ninternal val formEncTypeValues : Map<String, FormEncType> = FormEncType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class FormMethod(override val realValue : String) : AttributeEnum {\n    get(\"get\"),\n    post(\"post\"),\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\n}\n\ninternal val formMethodValues : Map<String, FormMethod> = FormMethod.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject FormTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject IframeName {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class IframeSandbox(override val realValue : String) : AttributeEnum {\n    allowSameOrigin(\"allow-same-origin\"),\n    allowFormS(\"allow-forms\"),\n    allowScripts(\"allow-scripts\")\n}\n\ninternal val iframeSandboxValues : Map<String, IframeSandbox> = IframeSandbox.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class InputType(override val realValue : String) : AttributeEnum {\n    button(\"button\"),\n    checkBox(\"checkbox\"),\n    color(\"color\"),\n    date(\"date\"),\n    dateTime(\"datetime\"),\n    dateTimeLocal(\"datetime-local\"),\n    email(\"email\"),\n    file(\"file\"),\n    hidden(\"hidden\"),\n    image(\"image\"),\n    month(\"month\"),\n    number(\"number\"),\n    password(\"password\"),\n    radio(\"radio\"),\n    range(\"range\"),\n    reset(\"reset\"),\n    search(\"search\"),\n    submit(\"submit\"),\n    text(\"text\"),\n    tel(\"tel\"),\n    time(\"time\"),\n    url(\"url\"),\n    week(\"week\")\n}\n\ninternal val inputTypeValues : Map<String, InputType> = InputType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class InputFormEncType(override val realValue : String) : AttributeEnum {\n    multipartFormData(\"multipart/form-data\"),\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\n    textPlain(\"text/plain\")\n}\n\ninternal val inputFormEncTypeValues : Map<String, InputFormEncType> = InputFormEncType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class InputFormMethod(override val realValue : String) : AttributeEnum {\n    get(\"get\"),\n    post(\"post\"),\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\n}\n\ninternal val inputFormMethodValues : Map<String, InputFormMethod> = InputFormMethod.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject InputFormTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class KeyGenKeyType(override val realValue : String) : AttributeEnum {\n    rsa(\"rsa\")\n}\n\ninternal val keyGenKeyTypeValues : Map<String, KeyGenKeyType> = KeyGenKeyType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject LinkRel {\n    val alternate : String = \"Alternate\"\n    val appEndIx : String = \"Appendix\"\n    val bookmark : String = \"Bookmark\"\n    val chapter : String = \"Chapter\"\n    val contentS : String = \"Contents\"\n    val copyright : String = \"Copyright\"\n    val glossary : String = \"Glossary\"\n    val help : String = \"Help\"\n    val index : String = \"Index\"\n    val next : String = \"Next\"\n    val prev : String = \"Prev\"\n    val section : String = \"Section\"\n    val start : String = \"Start\"\n    val stylesheet : String = \"Stylesheet\"\n    val subsection : String = \"Subsection\"\n\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\n}\n\n@Suppress(\"unused\")\nobject LinkMedia {\n    val screen : String = \"screen\"\n    val print : String = \"print\"\n    val tty : String = \"tty\"\n    val tv : String = \"tv\"\n    val projection : String = \"projection\"\n    val handheld : String = \"handheld\"\n    val braille : String = \"braille\"\n    val aural : String = \"aural\"\n    val all : String = \"all\"\n\n    val values : List<String> = listOf(\"screen\", \"print\", \"tty\", \"tv\", \"projection\", \"handheld\", \"braille\", \"aural\", \"all\")\n}\n\n@Suppress(\"unused\")\nobject LinkType {\n    val textAsp : String = \"text/asp\"\n    val textAsa : String = \"text/asa\"\n    val textCss : String = \"text/css\"\n    val textHtml : String = \"text/html\"\n    val textJavaScript : String = \"text/javascript\"\n    val textPlain : String = \"text/plain\"\n    val textScriptLet : String = \"text/scriptlet\"\n    val textXComponent : String = \"text/x-component\"\n    val textXHtmlInsertion : String = \"text/x-html-insertion\"\n    val textXml : String = \"text/xml\"\n\n    val values : List<String> = listOf(\"textAsp\", \"textAsa\", \"textCss\", \"textHtml\", \"textJavaScript\", \"textPlain\", \"textScriptLet\", \"textXComponent\", \"textXHtmlInsertion\", \"textXml\")\n}\n\n@Suppress(\"unused\")\nobject MetaHttpEquiv {\n    val contentLanguage : String = \"content-language\"\n    val contentType : String = \"content-type\"\n    val defaultStyle : String = \"default-style\"\n    val refresh : String = \"refresh\"\n\n    val values : List<String> = listOf(\"contentLanguage\", \"contentType\", \"defaultStyle\", \"refresh\")\n}\n\n@Suppress(\"unused\")\nobject ObjectName {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject ScriptType {\n    val textEcmaScript : String = \"text/ecmascript\"\n    val textJavaScript : String = \"text/javascript\"\n    val textJavaScript10 : String = \"text/javascript1.0\"\n    val textJavaScript11 : String = \"text/javascript1.1\"\n    val textJavaScript12 : String = \"text/javascript1.2\"\n    val textJavaScript13 : String = \"text/javascript1.3\"\n    val textJavaScript14 : String = \"text/javascript1.4\"\n    val textJavaScript15 : String = \"text/javascript1.5\"\n    val textJScript : String = \"text/jscript\"\n    val textXJavaScript : String = \"text/x-javascript\"\n    val textXEcmaScript : String = \"text/x-ecmascript\"\n    val textVbScript : String = \"text/vbscript\"\n\n    val values : List<String> = listOf(\"textEcmaScript\", \"textJavaScript\", \"textJavaScript10\", \"textJavaScript11\", \"textJavaScript12\", \"textJavaScript13\", \"textJavaScript14\", \"textJavaScript15\", \"textJScript\", \"textXJavaScript\", \"textXEcmaScript\", \"textVbScript\")\n}\n\n@Suppress(\"unused\")\nobject StyleType {\n    val textCss : String = \"text/css\"\n\n    val values : List<String> = listOf(\"textCss\")\n}\n\n@Suppress(\"unused\")\nobject StyleMedia {\n    val screen : String = \"screen\"\n    val print : String = \"print\"\n    val tty : String = \"tty\"\n    val tv : String = \"tv\"\n    val projection : String = \"projection\"\n    val handheld : String = \"handheld\"\n    val braille : String = \"braille\"\n    val aural : String = \"aural\"\n    val all : String = \"all\"\n\n    val values : List<String> = listOf(\"screen\", \"print\", \"tty\", \"tv\", \"projection\", \"handheld\", \"braille\", \"aural\", \"all\")\n}\n\n@Suppress(\"unused\")\nenum class TextAreaWrap(override val realValue : String) : AttributeEnum {\n    hard(\"hard\"),\n    soft(\"soft\")\n}\n\ninternal val textAreaWrapValues : Map<String, TextAreaWrap> = TextAreaWrap.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class ThScope(override val realValue : String) : AttributeEnum {\n    col(\"col\"),\n    colGroup(\"colgroup\"),\n    row(\"row\"),\n    rowGroup(\"rowgroup\")\n}\n\ninternal val thScopeValues : Map<String, ThScope> = ThScope.values().associateBy { it.realValue }\n","package kotlinx.html\n\nimport org.w3c.dom.events.*\n\ninterface TagConsumer<out R> {\n    fun onTagStart(tag: Tag)\n    fun onTagAttributeChange(tag: Tag, attribute: String, value: String?)\n    fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit)\n    fun onTagEnd(tag: Tag)\n    fun onTagContent(content: CharSequence)\n    fun onTagContentEntity(entity: Entities)\n    fun onTagContentUnsafe(block: Unsafe.() -> Unit)\n    fun onTagComment(content: CharSequence)\n    fun onTagError(tag: Tag, exception: Throwable): Unit = throw exception\n    fun finalize(): R\n}\n\n@HtmlTagMarker\ninterface Tag {\n    val tagName: String\n    val consumer: TagConsumer<*>\n    val namespace: String?\n\n    val attributes: MutableMap<String, String>\n    val attributesEntries: Collection<Map.Entry<String, String>>\n\n    val inlineTag: Boolean\n    val emptyTag: Boolean\n\n    operator fun Entities.unaryPlus(): Unit {\n        entity(this)\n    }\n\n    operator fun String.unaryPlus(): Unit {\n        text(this)\n    }\n\n    fun text(s: String) {\n        consumer.onTagContent(s)\n    }\n\n    fun text(n: Number) {\n        text(n.toString())\n    }\n\n    fun entity(e: Entities) {\n        consumer.onTagContentEntity(e)\n    }\n\n    fun comment(s: String) {\n        consumer.onTagComment(s)\n    }\n}\n\n@HtmlTagMarker\ninterface Unsafe {\n    operator fun String.unaryPlus()\n    operator fun Entities.unaryPlus() = +text\n\n    fun raw(s: String) {\n        +s\n    }\n\n    fun raw(entity: Entities) {\n        +entity\n    }\n\n    fun raw(n: Number) {\n        +n.toString()\n    }\n}\n\ninterface AttributeEnum {\n    val realValue: String\n}\n\ninline fun <T : Tag> T.visit(crossinline block: T.() -> Unit) = visitTag { block() }\n\ninline fun <T : Tag, R> T.visitAndFinalize(consumer: TagConsumer<R>, crossinline block: T.() -> Unit): R\n        = visitTagAndFinalize(consumer) { block() }\n\nfun attributesMapOf() = emptyMap\nfun attributesMapOf(key: String, value: String?): Map<String, String> = when (value) {\n    null -> emptyMap\n    else -> singletonMapOf(key, value)\n}\n\nfun attributesMapOf(vararg pairs: String?): Map<String, String> {\n    var result: MutableMap<String, String>? = null\n\n    for (i in 0..pairs.size - 1 step 2) {\n        val k = pairs[i]\n        val v = pairs[i + 1]\n        if (k != null && v != null) {\n            if (result == null) {\n                result = linkedMapOf()\n            }\n            result.put(k, v)\n        }\n    }\n\n    return result ?: emptyMap\n}\n\nfun singletonMapOf(key: String, value: String): Map<String, String> = SingletonStringMap(key, value)\n\nfun HTMLTag.unsafe(block: Unsafe.() -> Unit): Unit = consumer.onTagContentUnsafe(block)\n\nval emptyMap: Map<String, String> = emptyMap()\n\nclass DefaultUnsafe : Unsafe {\n    private val sb = StringBuilder()\n\n    override fun String.unaryPlus() {\n        sb.append(this)\n    }\n\n    override fun toString(): String = sb.toString()\n}\n\n@DslMarker\nannotation class HtmlTagMarker\n\ntypealias HtmlContent = FlowOrPhrasingContent\n\nprivate data class SingletonStringMap(override val key: String, override val value: String) : Map<String, String>,\n    Map.Entry<String, String> {\n    override val entries: Set<Map.Entry<String, String>>\n        get() = setOf(this)\n\n    override val keys: Set<String>\n        get() = setOf(key)\n\n    override val size: Int\n        get() = 1\n\n    override val values: Collection<String>\n        get() = listOf(value)\n\n    override fun containsKey(key: String) = key == this.key\n    override fun containsValue(value: String) = value == this.value\n    override fun get(key: String): String? = if (key == this.key) value else null\n    override fun isEmpty() = false\n}\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninternal val attributeStringString : Attribute<String> = StringAttribute()\n\ninternal val attributeSetStringStringSet : Attribute<Set<String>> = StringSetAttribute()\n\ninternal val attributeBooleanBoolean : Attribute<Boolean> = BooleanAttribute()\n\ninternal val attributeBooleanBooleanOnOff : Attribute<Boolean> = BooleanAttribute(\"on\", \"off\")\n\ninternal val attributeBooleanTicker : Attribute<Boolean> = TickerAttribute()\n\ninternal val attributeButtonFormEncTypeEnumButtonFormEncTypeValues : Attribute<ButtonFormEncType> = EnumAttribute(buttonFormEncTypeValues)\n\ninternal val attributeButtonFormMethodEnumButtonFormMethodValues : Attribute<ButtonFormMethod> = EnumAttribute(buttonFormMethodValues)\n\ninternal val attributeButtonTypeEnumButtonTypeValues : Attribute<ButtonType> = EnumAttribute(buttonTypeValues)\n\ninternal val attributeCommandTypeEnumCommandTypeValues : Attribute<CommandType> = EnumAttribute(commandTypeValues)\n\ninternal val attributeDirEnumDirValues : Attribute<Dir> = EnumAttribute(dirValues)\n\ninternal val attributeDraggableEnumDraggableValues : Attribute<Draggable> = EnumAttribute(draggableValues)\n\ninternal val attributeFormEncTypeEnumFormEncTypeValues : Attribute<FormEncType> = EnumAttribute(formEncTypeValues)\n\ninternal val attributeFormMethodEnumFormMethodValues : Attribute<FormMethod> = EnumAttribute(formMethodValues)\n\ninternal val attributeIframeSandboxEnumIframeSandboxValues : Attribute<IframeSandbox> = EnumAttribute(iframeSandboxValues)\n\ninternal val attributeInputFormEncTypeEnumInputFormEncTypeValues : Attribute<InputFormEncType> = EnumAttribute(inputFormEncTypeValues)\n\ninternal val attributeInputFormMethodEnumInputFormMethodValues : Attribute<InputFormMethod> = EnumAttribute(inputFormMethodValues)\n\ninternal val attributeInputTypeEnumInputTypeValues : Attribute<InputType> = EnumAttribute(inputTypeValues)\n\ninternal val attributeKeyGenKeyTypeEnumKeyGenKeyTypeValues : Attribute<KeyGenKeyType> = EnumAttribute(keyGenKeyTypeValues)\n\ninternal val attributeRunAtEnumRunAtValues : Attribute<RunAt> = EnumAttribute(runAtValues)\n\ninternal val attributeTextAreaWrapEnumTextAreaWrapValues : Attribute<TextAreaWrap> = EnumAttribute(textAreaWrapValues)\n\ninternal val attributeThScopeEnumThScopeValues : Attribute<ThScope> = EnumAttribute(thScopeValues)\n\n","package kotlinx.html.stream\n\nimport kotlinx.html.*\nimport kotlinx.html.consumers.*\nimport org.w3c.dom.events.*\n\nclass HTMLStreamBuilder<out O : Appendable>(val out: O, val prettyPrint: Boolean, val xhtmlCompatible: Boolean) :\n    TagConsumer<O> {\n    private var level = 0\n    private var ln = true\n\n    override fun onTagStart(tag: Tag) {\n        if (prettyPrint && !tag.inlineTag) {\n            indent()\n        }\n        level++\n\n        out.append(\"<\")\n        out.append(tag.tagName)\n\n        if (tag.namespace != null) {\n            out.append(\" xmlns=\\\"\")\n            out.append(tag.namespace)\n            out.append(\"\\\"\")\n        }\n\n        if (tag.attributes.isNotEmpty()) {\n            tag.attributesEntries.forEachIndexed { _, e ->\n                if (!e.key.isValidXmlAttributeName()) {\n                    throw IllegalArgumentException(\"Tag ${tag.tagName} has invalid attribute name ${e.key}\")\n                }\n\n                out.append(' ')\n                out.append(e.key)\n                out.append(\"=\\\"\")\n                out.escapeAppend(e.value)\n                out.append('\\\"')\n            }\n        }\n\n        if (xhtmlCompatible && tag.emptyTag) {\n            out.append(\"/\")\n        }\n\n        out.append(\">\")\n        ln = false\n    }\n\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n        throw UnsupportedOperationException(\"tag attribute can't be changed as it was already written to the stream. Use with DelayedConsumer to be able to modify attributes\")\n    }\n\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n        throw UnsupportedOperationException(\"you can't assign lambda event handler when building text\")\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        level--\n        if (ln) {\n            indent()\n        }\n\n        if (!tag.emptyTag) {\n            out.append(\"</\")\n            out.append(tag.tagName)\n            out.append(\">\")\n        }\n\n        if (prettyPrint && !tag.inlineTag) {\n            appendln()\n        }\n    }\n\n    override fun onTagContent(content: CharSequence) {\n        out.escapeAppend(content)\n        ln = false\n    }\n\n    override fun onTagContentEntity(entity: Entities) {\n        out.append(entity.text)\n        ln = false\n    }\n\n    override fun finalize(): O = out\n\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n        UnsafeImpl.block()\n    }\n\n    override fun onTagComment(content: CharSequence) {\n        if (prettyPrint) {\n            indent()\n        }\n\n        out.append(\"<!--\")\n        out.escapeComment(content)\n        out.append(\"-->\")\n\n        ln = false\n    }\n\n    val UnsafeImpl = object : Unsafe {\n        override operator fun String.unaryPlus() {\n            out.append(this)\n        }\n    }\n\n    private fun appendln() {\n        if (prettyPrint && !ln) {\n            out.append(\"\\n\")\n            ln = true\n        }\n    }\n\n    private fun indent() {\n        if (prettyPrint) {\n            if (!ln) {\n                out.append(\"\\n\")\n            }\n            var remaining = level\n            while (remaining >= 4) {\n                out.append(\"        \")\n                remaining -= 4\n            }\n            while (remaining >= 2) {\n                out.append(\"    \")\n                remaining -= 2\n            }\n            if (remaining > 0) {\n                out.append(\"  \")\n            }\n            ln = false\n        }\n    }\n}\n\nprivate val AVERAGE_PAGE_SIZE = 32768\n\nfun createHTML(prettyPrint: Boolean = true, xhtmlCompatible: Boolean = false): TagConsumer<String> =\n    HTMLStreamBuilder(\n        StringBuilder(AVERAGE_PAGE_SIZE),\n        prettyPrint,\n        xhtmlCompatible\n    ).onFinalizeMap { sb, _ -> sb.toString() }.delayed()\n\nfun <O : Appendable> O.appendHTML(prettyPrint: Boolean = true, xhtmlCompatible: Boolean = false): TagConsumer<O> =\n    HTMLStreamBuilder(this, prettyPrint, xhtmlCompatible).delayed()\n\n@Deprecated(\"Should be resolved to the previous implementation\", level = DeprecationLevel.HIDDEN)\nfun <O : Appendable> O.appendHTML(prettyPrint: Boolean = true): TagConsumer<O> =\n    appendHTML(prettyPrint, false)\n\nprivate val escapeMap = mapOf(\n    '<' to \"&lt;\",\n    '>' to \"&gt;\",\n    '&' to \"&amp;\",\n    '\\\"' to \"&quot;\"\n).let { mappings ->\n    val maxCode = mappings.keys.map { it.toInt() }.maxOrNull() ?: -1\n\n    Array(maxCode + 1) { mappings[it.toChar()] }\n}\n\nprivate val letterRangeLowerCase = 'a'..'z'\nprivate val letterRangeUpperCase = 'A'..'Z'\nprivate val digitRange = '0'..'9'\n\nprivate fun Char._isLetter() = this in letterRangeLowerCase || this in letterRangeUpperCase\nprivate fun Char._isDigit() = this in digitRange\n\nprivate fun String.isValidXmlAttributeName() =\n    !startsWithXml()\n            && this.isNotEmpty()\n            && (this[0]._isLetter() || this[0] == '_')\n            && this.all { it._isLetter() || it._isDigit() || it in \"._:-\" }\n\nprivate fun String.startsWithXml() = length >= 3\n        && (this[0].let { it == 'x' || it == 'X' })\n        && (this[1].let { it == 'm' || it == 'M' })\n        && (this[2].let { it == 'l' || it == 'L' })\n\nprivate fun Appendable.escapeAppend(s: CharSequence) {\n    var lastIndex = 0\n    val mappings = escapeMap\n    val size = mappings.size\n\n    for (idx in 0..s.length - 1) {\n        val ch = s[idx].toInt()\n        if (ch < 0 || ch >= size) continue\n        val escape = mappings[ch]\n        if (escape != null) {\n            append(s.substring(lastIndex, idx))\n            append(escape)\n            lastIndex = idx + 1\n        }\n    }\n\n    if (lastIndex < s.length) {\n        append(s.substring(lastIndex, s.length))\n    }\n}\n\nprivate fun Appendable.escapeComment(s: CharSequence) {\n    var start = 0\n    while (start < s.length) {\n        val index = s.indexOf(\"--\")\n        if (index == -1) {\n            if (start == 0) {\n                append(s)\n            } else {\n                append(s, start, s.length)\n            }\n            break\n        }\n\n        append(s, start, index)\n        start += 2\n    }\n}\n","package featurea.rml\n\nimport featurea.content.ContentType\nimport featurea.content.Resource\nimport featurea.rml.reader.RmlContent\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.utils.toFilePath\n\nclass RmlContentType(override val module: Module) : Component, ContentType {\n\n    private val rmlContent: RmlContent = import()\n\n    override suspend fun load(resource: Resource, loadingQueue: ArrayList<String>) {\n        val filePath: String = resource.path.toFilePath()\n        rmlContent.findRmlFile(filePath)\n        loadingQueue.add(resource.path)\n    }\n\n    override suspend fun release(resource: Resource, releaseQueue: ArrayList<String>) {\n        // todo\n        releaseQueue.add(resource.path)\n    }\n\n}\n","@file:Suppress(\"RemoveExplicitTypeArguments\", \"UNCHECKED_CAST\", \"IfThenToElvis\")\n\npackage featurea.rml\n\nimport featurea.content.ResourceTag\nimport featurea.content.appendChildResourceTag\nimport featurea.content.removeChildResourceTag\nimport featurea.rml.reader.RmlFile\nimport featurea.utils.Scope\nimport featurea.utils.Scope.Inner\nimport featurea.utils.Scope.Super\n\nclass RmlResource {\n\n    lateinit var rmlTag: RmlTag\n    lateinit var rmlFile: RmlFile\n    var builder: RmlBuilder? = null\n\n    internal val rmlTagByStartObject = linkedMapOf<Any, ResourceTag>() // todo make public if needed\n    internal val startObjectByRmlTag = linkedMapOf<ResourceTag, Any>() // todo make public if needed\n    val rmlTagByEndObject = linkedMapOf<Any, ResourceTag>() // IMPORTANT needed by editor delegate\n    val endObjectByRmlTag = linkedMapOf<ResourceTag, Any>() // IMPORTANT needed by editor delegate\n\n    suspend fun <T : Any> ResourceTag.createRmlTagEndObject(scope: Scope = Inner): T {\n        val builder: RmlBuilder = checkNotNull(builder)\n        val rmlResource: RmlResource = this@RmlResource\n        val rmlTag: RmlTag = this\n\n        // start object\n        val link: RmlTag? = rmlTag.findLinkOrNull()\n        val root: Any = if (link == null) {\n            builder.create(rmlResource, rmlTag, scope)\n        } else {\n            link.createRmlTagEndObject(Super)\n        }\n        setRmlTagStartObject(rmlTag, scope, root)\n\n        // attributes, properties, children\n        for ((key, value) in rmlTag.attributes) rmlTag.assignAttribute(key, value, root, scope)\n        for ((key, property) in rmlTag.properties) rmlTag.assignProperty(key, property, root, scope)\n        for (child in rmlTag.children) rmlTag.assignChild(child, root, scope)\n\n        // end object\n        val rmlTagEndObject: Any = rmlTag.build(root, scope)\n        setRmlTagEndObject(rmlTag, scope, rmlTagEndObject)\n        return rmlTagEndObject as T\n    }\n\n    suspend fun ResourceTag.appendChild(child: ResourceTag) {\n        appendChildResourceTag(child)\n\n        // runtime\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlResource: RmlResource = this@RmlResource\n            val startObject: Any = startObject(rmlResource)\n            val scope: Scope = Inner\n            assignChild(child, startObject, scope)\n        }\n    }\n\n    private suspend fun ResourceTag.assignChild(child: ResourceTag, startObject: Any, scope: Scope) {\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlTag: RmlTag = this\n            val childEndObject: Any = child.createRmlTagEndObject<Any>(scope.nest)\n            builder.append(rmlTag, scope, startObject, child, childEndObject)\n        }\n    }\n\n    suspend fun ResourceTag.insertChild(index: Int, child: ResourceTag, startObject: Any, scope: Scope) {\n        // data\n        require(!children.contains(child))\n        children.add(index, child)\n\n        // >> todo make this consistent\n        val childId: String? = child.idOrNull\n        if (childId != null) {\n            properties[childId] = child\n        }\n        // <<\n\n        // runtime\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlTag: RmlTag = this\n            val childEndObject: Any = child.createRmlTagEndObject<Any>(scope.nest)\n            builder.insert(rmlTag, scope, startObject, index, child, childEndObject)\n        }\n    }\n\n    suspend fun ResourceTag.removeChild(child: ResourceTag) {\n        removeChildResourceTag(child)\n\n        // runtime\n        val builder = builder\n        if (builder != null) {\n            val rmlResource: RmlResource = this@RmlResource\n            val rmlTag: RmlTag = this\n            val startObject: Any = startObject(rmlResource)\n            val endObject: Any = child.endObject(rmlResource)\n            builder.remove(rmlTag, Inner, startObject, child, endObject)\n            rmlTagByStartObject.remove(startObjectByRmlTag.remove(child))\n            rmlTagByEndObject.remove(endObjectByRmlTag.remove(child))\n        }\n    }\n\n    suspend fun ResourceTag.replaceChild(index: Int, child: ResourceTag) {\n        // data\n        require(children.contains(child))\n        children.remove(child)\n        if (index >= children.size) children.add(child) else children.add(index, child)\n\n        // runtime\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlResource: RmlResource = this@RmlResource\n            val rmlTag: RmlTag = this\n            val startObject: Any = startObject(rmlResource)\n            val endObject: Any = child.endObject(rmlResource)\n            builder.replace(rmlTag, Inner, startObject, child, index, endObject)\n        }\n    }\n\n    suspend fun ResourceTag.assignAttribute(key: String, value: String) {\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlResource: RmlResource = this@RmlResource\n            val startObject: Any = startObject(rmlResource)\n            val scope: Scope = Inner\n            assignAttribute(key, value, startObject, scope)\n        } else {\n            // data\n            attributes[key] = value\n        }\n    }\n\n    suspend fun ResourceTag.assignAttribute(key: String, value: String, startObject: Any, scope: Scope) {\n        // data\n        attributes[key] = value\n\n        // runtime\n        val builder: RmlBuilder = checkNotNull(builder)\n        val rmlTag: RmlTag = this\n        builder.attributeOn(rmlTag, scope, startObject, key, value)\n    }\n\n    suspend fun ResourceTag.removeAttribute(key: String, value: String) {\n        // data\n        attributes.remove(key)\n\n        // runtime\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlResource: RmlResource = this@RmlResource\n            val rmlTag: RmlTag = this\n            val startObject: Any = startObject(rmlResource)\n            builder.attributeOff(rmlTag, Inner, startObject, key, value)\n        }\n    }\n\n    suspend fun ResourceTag.assignProperty(key: String, property: ResourceTag, startObject: Any, scope: Scope) {\n        // data\n        val id = property.attributes[\"id\"]\n        require(key == id) { \"key: $key, id: $id\" }\n        require(!properties.contains(key))\n        properties[key] = property\n\n        // runtime\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlTag: RmlTag = this\n            val propertyEndObject: Any = property.createRmlTagEndObject<Any>(scope.nest)\n            builder.propertyOn(rmlTag, scope, startObject, key, property, propertyEndObject)\n        }\n\n    }\n\n    suspend fun ResourceTag.removeProperty(key: String, property: ResourceTag) {\n        // data\n        val id = property.attributes[\"id\"]\n        require(key == id) { \"key: $key, id: $id\" }\n        properties.remove(key)\n\n        // runtime\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlTag: ResourceTag = this\n            val rmlResource: RmlResource = this@RmlResource\n            val startObject: Any = startObject(rmlResource)\n            val endObject: Any = property.endObject(rmlResource)\n            builder.propertyOff(rmlTag, Inner, startObject, key, property, endObject)\n        }\n    }\n\n    suspend fun ResourceTag.buildAttribute(key: String, value: String) {\n        assignAttribute(key, value)\n        build()\n    }\n\n    suspend fun ResourceTag.build() {\n        val builder: RmlBuilder? = builder\n        if (builder != null) {\n            val rmlResource: RmlResource = this@RmlResource\n            val startObject: Any = startObject(rmlResource)\n            build(startObject, Inner)\n        }\n    }\n\n    /*internals*/\n\n    private suspend fun ResourceTag.build(startObject: Any, scope: Scope): Any {\n        val rmlResource: RmlResource = this@RmlResource\n        val rmlTag: RmlTag = this\n        val builder: RmlBuilder = checkNotNull(builder)\n        val original: Any = builder.build(rmlResource, rmlTag, scope, startObject)\n        return original\n    }\n\n    private fun setRmlTagStartObject(rmlTag: ResourceTag, scope: Scope, rmlTagStartObject: Any) {\n        if (scope == Inner) {\n            check(rmlTagByStartObject.put(rmlTagStartObject, rmlTag) == null)\n            check(startObjectByRmlTag.put(rmlTag, rmlTagStartObject) == null)\n        }\n    }\n\n    private fun setRmlTagEndObject(rmlTag: ResourceTag, scope: Scope, rmlTagEndObject: Any) {\n        if (scope == Inner) {\n            check(rmlTagByEndObject.put(rmlTagEndObject, rmlTag) == null)\n            check(endObjectByRmlTag.put(rmlTag, rmlTagEndObject) == null)\n        }\n    }\n\n}\n\n/*convenience*/\n\nval RmlResource.canonicalClassName: String? get() = rmlFile.rmlSchema.canonicalClassNameByKey[rmlTag.name]\n","@file:Suppress(\"UNCHECKED_CAST\")\n\npackage featurea.rml\n\nimport featurea.content.ResourceSchema\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.script.Script\nimport featurea.utils.Scope\n\ntypealias RmlBuilder = RmlResourceBuilder<Any, Any, Any>\n\ntypealias RmlBuilderInit = () -> RmlBuilder\n\ninterface RmlResourceBuilder<CreateResult : Any, BuildResult : Any, WrapResult : Any> {\n    suspend fun create(rmlResource: RmlResource, rmlTag: RmlTag, scope: Scope): CreateResult\n    suspend fun build(rmlResource: RmlResource, rmlTag: RmlTag, scope: Scope, root: CreateResult): BuildResult\n    suspend fun wrap(rmlResource: RmlResource, rmlTag: RmlTag, origin: BuildResult): WrapResult\n    suspend fun attributeOn(tag: RmlTag, scope: Scope, root: Any, key: String, value: String)\n    suspend fun attributeOff(tag: RmlTag, scope: Scope, root: Any, key: String, value: String)\n    suspend fun propertyOn(tag: RmlTag, scope: Scope, root: Any, key: String, property: RmlTag, origin: Any)\n    suspend fun propertyOff(tag: RmlTag, scope: Scope, root: Any, key: String, property: RmlTag, origin: Any)\n    suspend fun append(tag: RmlTag, scope: Scope, root: Any, child: RmlTag, origin: Any)\n    suspend fun insert(tag: RmlTag, scope: Scope, root: Any, index: Int, child: RmlTag, origin: Any)\n    suspend fun remove(tag: RmlTag, scope: Scope, root: Any, child: RmlTag, origin: Any)\n    suspend fun replace(tag: RmlTag, scope: Scope, root: Any, child: RmlTag, index: Int, origin: Any)\n}\n\n/*convenience*/\n\nopen class DefaultRmlResourceBuilder<T : Any>(override val module: Module) : Component,\n    RmlResourceBuilder<Script, Any, T> {\n\n    override suspend fun create(rmlResource: RmlResource, rmlTag: RmlTag, scope: Scope): Script {\n        val rmlSchema: ResourceSchema = rmlResource.rmlFile.rmlSchema\n        val name: String = rmlTag.name\n        val docketKey: String = rmlSchema.findSuperKeyForKeyOrNull(name) ?: name\n        val canonicalClassName: String = rmlSchema.canonicalClassNameByKey[docketKey] ?: error(\"docketKey: $docketKey\")\n        val docketName: String = \"${canonicalClassName}Docket\"\n        val docket: Script = module.createComponent(docketName)\n        docket.execute(\"create\", args = listOf(name), Scope.Inner)\n        return docket\n    }\n\n    override suspend fun build(rmlResource: RmlResource, rmlTag: RmlTag, scope: Scope, root: Script): Any {\n        if (scope === Scope.Super) return root\n        return root.execute(\"build\", args = emptyList(), Scope.Inner) as Any\n    }\n\n    override suspend fun wrap(rmlResource: RmlResource, rmlTag: RmlTag, origin: Any): T {\n        return origin as T\n    }\n\n    override suspend fun attributeOn(tag: RmlTag, scope: Scope, root: Any, key: String, value: String) {\n        check(root is Script)\n        root.execute(action = key, args = listOf(value), scope)\n    }\n\n    override suspend fun attributeOff(tag: RmlTag, scope: Scope, root: Any, key: String, value: String) {\n        check(root is Script)\n        root.execute(action = key, args = emptyList(), scope)\n    }\n\n    override suspend fun propertyOn(tag: RmlTag, scope: Scope, root: Any, key: String, property: RmlTag, origin: Any) {\n        check(root is Script)\n        root.execute(action = key, args = listOf(origin), scope)\n    }\n\n    override suspend fun propertyOff(tag: RmlTag, scope: Scope, root: Any, key: String, property: RmlTag, origin: Any) {\n        throw UnsupportedOperationException(\"propertyOff\")\n    }\n\n    override suspend fun append(tag: RmlTag, scope: Scope, root: Any, child: RmlTag, origin: Any) {\n        check(root is Script)\n        root.execute(action = \"append\", args = listOf(origin), scope)\n    }\n\n    override suspend fun insert(tag: RmlTag, scope: Scope, root: Any, index: Int, child: RmlTag, origin: Any) {\n        check(root is Script)\n        root.execute(action = \"insert\", args = listOf(index, origin), scope)\n    }\n\n    override suspend fun remove(tag: RmlTag, scope: Scope, root: Any, child: RmlTag, origin: Any) {\n        check(root is Script)\n        root.execute(action = \"remove\", args = listOf(origin), scope)\n    }\n\n    override suspend fun replace(tag: RmlTag, scope: Scope, root: Any, child: RmlTag, index: Int, origin: Any) {\n        check(root is Script)\n        root.execute(action = \"replace\", args = listOf(index, origin), scope)\n    }\n\n}\n","package featurea.rml\n\nimport featurea.content.ResourceTag\nimport featurea.rml.reader.RmlContent\nimport featurea.rml.reader.RmlFile\nimport featurea.runtime.Component\nimport featurea.runtime.import\nimport featurea.utils.toFilePath\nimport featurea.utils.toIdPath\n\nsuspend fun Component.readRmlResource(resourcePath: String, source: String? = null): RmlResource {\n    val rmlContent: RmlContent = import()\n    return rmlContent.readRmlResource(resourcePath, source)\n}\n\nsuspend fun RmlContent.readRmlResource(resourcePath: String, source: String? = null): RmlResource {\n    val filePath: String = resourcePath.toFilePath()\n    val idPath: String? = resourcePath.toIdPath()\n    val rmlFile: RmlFile = findRmlFile(filePath, source)\n    val property: ResourceTag = rmlFile.rmlTag.findPropertyByIdPath(idPath)\n    return RmlResource().apply {\n        this.rmlTag = property\n        this.rmlFile = rmlFile\n    }\n}\n","package featurea.rml\n\nimport featurea.content.ResourceTag\nimport featurea.utils.splitAndTrim\n\ntypealias RmlTag = ResourceTag\n\ntypealias ResourceAttributeBlock = suspend (resourceTag: ResourceTag, key: String, value: String) -> Unit\n\nfun ResourceTag.startObject(rmlResource: RmlResource?): Any {\n    return rmlResource?.startObjectByRmlTag?.get(this) ?: throw RuntimeException()\n}\n\nfun ResourceTag.endObject(rmlResource: RmlResource?): Any {\n    return rmlResource?.endObjectByRmlTag?.get(this) ?: throw RuntimeException()\n}\n\nfun ResourceTag.indexOfSelf(): Int {\n    return parent?.children?.indexOf(this) ?: -1\n}\n\nfun ResourceTag.findResource(): String {\n    return if (isRoot) filePath else \"${parent?.findResource()}:/${idOrNull}\"\n}\n\nfun ResourceTag.isLeaf(): Boolean {\n    return properties.isEmpty() && children.isEmpty()\n}\n\nfun ResourceTag.findAttribute(key: String): String? {\n    val value: String? = attributes[key]\n    if (value != null) return value\n    val link: ResourceTag? = findLinkOrNull()\n    if (link != null) return link.findAttribute(key)\n    return null\n}\n\nfun ResourceTag.findLinkOrNull(): ResourceTag? {\n    val link: String = attributes[\"link\"] ?: return null\n    val linkRmlTag: ResourceTag? = when {\n        link.startsWith(\"/\") -> root.properties[link]\n        else -> parent!!.properties[link] ?: root.properties[link]\n    }\n    if (linkRmlTag == null) return null\n    if (linkRmlTag.containsRecursively(this)) {\n        error(\"recursion not supported\")\n    }\n    return linkRmlTag\n}\n\nfun ResourceTag.deepCopy(parent: ResourceTag? = this.parent): ResourceTag {\n    val copy: ResourceTag = if (parent != null) {\n        ResourceTag(name, parent)\n    } else {\n        ResourceTag(name, filePath)\n    }\n    for ((key, value) in attributes) {\n        copy.attributes[key] = value\n    }\n    for ((key, property) in properties) {\n        copy.properties[key] = property\n    }\n    for (child in children) {\n        copy.children.add(child.deepCopy(parent = copy))\n    }\n    return copy\n}\n\nfun ResourceTag.findPropertyByIdPath(idPath: String?): ResourceTag {\n    return findPropertyByIdPathOrNull(idPath) ?: error(\"idPath: $idPath\")\n}\n\nfun ResourceTag.findPropertyByIdPathOrNull(idPath: String?): ResourceTag? {\n    if (idPath == null) return this\n    var currentProperty: ResourceTag = this\n    val ids: List<String> = idPath.splitAndTrim(\"/\")\n    for (id in ids) {\n        currentProperty = currentProperty.properties[id] ?: return null\n    }\n    return currentProperty\n}\n\nfun ResourceTag.containsRecursively(child: ResourceTag): Boolean {\n    var ancestor: ResourceTag? = child.parent\n    while (true) {\n        if (ancestor == null) return false\n        if (ancestor == this) return true\n        ancestor = ancestor.parent\n    }\n}\n\nfun ResourceTag.findParent(predicate: (parent: ResourceTag) -> Boolean): ResourceTag? {\n    var currentParent: ResourceTag? = parent\n    while (currentParent != null) {\n        if (predicate(currentParent)) return currentParent\n        currentParent = currentParent.parent\n    }\n    return null\n}\n\nfun ResourceTag.anyParent(predicate: (parent: ResourceTag) -> Boolean): Boolean {\n    return findParent(predicate) != null\n}\n\nsuspend fun ResourceTag.forEachResourceAttribute(block: ResourceAttributeBlock) {\n    for ((key, value) in attributes) {\n        block(this, key, value)\n    }\n    for (child in children) {\n        child.forEachResourceAttribute(block)\n    }\n}\n\nfun ResourceTag.selectionPathRelativeTo(parentRmlTag: ResourceTag): IntArray {\n    val list: ArrayList<Int> = ArrayList<Int>()\n    var currentRmlTag: ResourceTag = this\n    while (currentRmlTag.parent != null && currentRmlTag !== parentRmlTag) {\n        list.add(currentRmlTag.parent!!.children.indexOf(currentRmlTag))\n        currentRmlTag = currentRmlTag.parent!!\n    }\n    val listIndices: IntArray = IntArray(list.size)\n    list.reverse()\n    for (index in list.indices) {\n        listIndices[index] = list[index]\n    }\n    return listIndices\n}\n\nfun ResourceTag.renameId(newId: String) {\n    if (newId == idOrNull) return\n    val resourceTag: ResourceTag = this\n\n    val parentRmlTag: ResourceTag = parent!!\n    val currentId: String? = idOrNull\n\n    parentRmlTag.properties.remove(currentId)\n    parentRmlTag.children.removeAll { it.idOrNull == currentId }\n\n    attributes[\"id\"] = newId\n\n    parentRmlTag.properties[newId] = resourceTag\n    parentRmlTag.children.add(resourceTag)\n}\n","package featurea.rml\n\nimport featurea.content.contentTypes\nimport featurea.runtime.Artifact\n\nval artifact = Artifact(\"featurea.rml\") {\n    include(featurea.rml.reader.artifact)\n    include(featurea.script.artifact)\n\n    contentTypes {\n        \"RmlContentType\" to ::RmlContentType\n    }\n}\n","@file:Suppress(\"UNCHECKED_CAST\", \"RemoveExplicitTypeArguments\")\n\npackage featurea.rml\n\nimport featurea.content.ResourceTag\nimport featurea.content.UNDEFINED_RESOURCE_PATH\nimport featurea.rml.reader.RmlContent\nimport featurea.rml.reader.RmlFile\nimport featurea.runtime.Component\nimport featurea.runtime.DependencyRegistry\nimport featurea.runtime.Module\nimport featurea.runtime.import\n\nsuspend fun <T : Any> Component.buildResource(resourcePath: String, source: String? = null): T {\n    val rmlContent: RmlContent = import()\n    val rmlResource: RmlResource = rmlContent.readRmlResource(resourcePath, source)\n    val resource: T = module.buildResource<T>(rmlResource)\n    return resource\n}\n\n// quickfix todo refactor `buildResourceWithoutCache` to something more conceptual\nsuspend fun <T : Any> Component.buildResourceWithoutCache(idPath: String, source: String): T {\n    val rmlContent: RmlContent = import()\n    val rmlFile: RmlFile = RmlFile()\n    rmlFile.init(source, UNDEFINED_RESOURCE_PATH) {\n        rmlContent.findRmlSchema(packageId)\n    }\n    val property: ResourceTag? = rmlFile.rmlTag.findPropertyByIdPathOrNull(idPath)\n    checkNotNull(property)\n    val rmlResource: RmlResource = RmlResource().apply { rmlTag = property; this.rmlFile = rmlFile }\n    val resource: T = module.buildResource<T>(rmlResource)\n    return resource\n}\n\nfun RmlResource.initRmlBuilder(module: Module, init: RmlBuilderInit): RmlBuilder {\n    val rmlResource: RmlResource = this\n    val dependencyRegistry: DependencyRegistry = module.container.dependencyRegistry\n    val builderCanonicalName: String = \"${rmlResource.canonicalClassName}Builder\"\n    val builder: RmlBuilder = if (dependencyRegistry.moduleComponents.containsKey(builderCanonicalName)) {\n        module.createComponent(builderCanonicalName) { /*intentionally blank for js*/ }\n    } else {\n        init()\n    }\n    rmlResource.builder = builder\n    return rmlResource.builder ?: error(\"builderCanonicalName: $builderCanonicalName\")\n}\n\n/*internals*/\n\nprivate suspend fun <T : Any> Module.buildResource(rmlResource: RmlResource): T {\n    val module: Module = this\n    rmlResource.initRmlBuilder(module) {\n        DefaultRmlResourceBuilder<T>(module) as RmlBuilder\n    }\n    val resource: T = with(rmlResource) { rmlTag.createRmlTagEndObject<T>() }\n    return resource\n}\n","package featurea.script\n\nimport featurea.utils.Scope\n\ninterface Script {\n    suspend fun execute(action: String, args: List<Any?> = emptyList(), scope: Scope = Scope.Inner): Any?\n}\n\nsuspend fun Script.findScript(key: String): Script = findScriptOrNull(key) ?: error(\"key: $key\")\n\nsuspend fun Script.findScriptOrNull(key: String): Script? {\n    val result: Any? = execute(key)\n    return result as Script?\n}\n","package featurea.script\n\nimport featurea.utils.Stack\n\n@OptIn(ExperimentalStdlibApi::class)\nclass ScriptCall(val interpreter: ScriptInterpreter, val imports: Imports, val script: Script, val source: String, val context: ScriptCallContext) {\n\n    constructor(interpreter: ScriptInterpreter, source: String, script: Script, args: Args, imports: Map<String, String>) :\n            this(interpreter, imports, script, source, ScriptCallContext(Stack(args.reversed())))\n\n    suspend fun <T : Any?> execute(): T {\n        val expressions: List<ScriptExpression> = interpreter.parseSource(source)\n        for (index in 0 until expressions.lastIndex) {\n            expressions[index].execute(this)\n        }\n        return expressions.last().execute(this) as T\n    }\n\n    suspend fun eval(): String {\n        var result: String = source\n        val matchResults: Sequence<MatchResult> = expressionRegex.findAll(result)\n        for (matchResult in matchResults) {\n            val script = matchResult.value.subSequence(2, matchResult.value.lastIndex).toString()\n            val executeResult = interpreter.execute<Any>(imports, this.script, script, context)\n            result = result.replaceFirst(matchResult.value, executeResult.toString())\n        }\n        return result\n    }\n\n}\n","package featurea.script\n\nimport featurea.utils.Stack\n\nclass ScriptCallContext {\n\n    val args: Stack<Any?>\n    val localVariables: MutableMap<String, Any?>\n    var result: Any? = null\n\n    constructor(args: Stack<Any?>) {\n        this.args = args\n        this.localVariables = mutableMapOf()\n    }\n\n    constructor(localVariables: MutableMap<String, Any?>) {\n        this.args = Stack()\n        this.localVariables = localVariables\n    }\n\n}\n\n/*convenience*/\n\nval ScriptCallContext.hasArguments: Boolean get() = args.isNotEmpty()\n\nval ScriptCallContext.hasLocalVariables: Boolean get() = localVariables.isNotEmpty()\n\nval ScriptCallContext.hasResult: Boolean get() = result != null\n","package featurea.script\n\nimport featurea.utils.Stack\nimport featurea.utils.splitWithWrappers\n\n@ExperimentalStdlibApi\nclass ScriptExpression(interpreter: ScriptInterpreter, value: String) {\n\n    private val leftHandOperators = Stack<ScriptLeftOperator>()\n    private val rightHandOperator: ScriptRightOperator\n\n    init {\n        val tokens = value.splitWithWrappers('=')\n        for (index in 0 until tokens.size - 1) {\n            val leftValue = tokens[index]\n            leftHandOperators.push(ScriptLeftOperator(interpreter, leftValue))\n        }\n        val rightValue = tokens[tokens.lastIndex]\n        rightHandOperator = ScriptRightOperator(interpreter, rightValue)\n    }\n\n    suspend fun execute(scriptCall: ScriptCall): Any? {\n        val rightValue = rightHandOperator.execute(scriptCall)\n        scriptCall.context.result = rightValue\n        var leftHandValue = rightValue\n        while (leftHandOperators.isNotEmpty()) {\n            leftHandValue = leftHandOperators.pop().execute(scriptCall)\n        }\n        return leftHandValue\n    }\n\n}\n","package featurea.script\n\nimport featurea.utils.toMap\n\nclass ScriptFunction(private val interpreter: ScriptInterpreter, private val value: String, private val argNames: List<String>) {\n\n    suspend fun execute(args: List<Any>, script: Script): Any? {\n        val context: ScriptCallContext = ScriptCallContext(argNames toMap args)\n        return interpreter.execute(script = script, source = value, context = context)\n    }\n\n}\n","package featurea.script\n\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.utils.Scope\nimport featurea.utils.splitAndTrim\n\nclass ScriptInterpreter {\n\n    val functions = mutableMapOf<String, ScriptFunction>()\n\n    suspend fun <T : Any?> execute(\n        imports: Imports = imports(),\n        script: Script,\n        source: String,\n        args: Args = args()\n    ): T {\n        return ScriptCall(this, source, script, args, imports).execute()\n    }\n\n    suspend fun <T : Any?> execute(\n        imports: Imports = imports(),\n        module: Module,\n        source: String,\n        context: ScriptCallContext\n    ): T {\n        return execute(imports, module.createScript(), source, context)\n    }\n\n    suspend fun <T : Any?> execute(\n        imports: Imports = imports(),\n        script: Script,\n        source: String,\n        context: ScriptCallContext\n    ): T {\n        return ScriptCall(this, imports, script, source, context).execute()\n    }\n\n    suspend fun eval(code: String, script: Script, args: Args = args(), imports: Imports = imports()): String {\n        return ScriptCall(this, code, script, args, imports).eval()\n    }\n\n}\n\nsuspend fun <T : Any?> Component.executeScript(script: String, vararg args: Any? = emptyArray()): T {\n    return module.executeScript(script, *args)\n}\n\nsuspend fun <T : Any?> Module.executeScript(script: String, vararg args: Any? = emptyArray()): T {\n    val scriptInterpreter: ScriptInterpreter = importComponent()\n    return scriptInterpreter.execute(imports(), createScript(), script, listOf(*args))\n}\n\n@ExperimentalStdlibApi\nfun ScriptInterpreter.firstCanonicalName(script: String): String {\n    val firstLine: String = script.splitAndTrim(\";\").first()\n    return ScriptRightOperator(this, firstLine).key\n}\n\n/*internals*/\n\nprivate fun Module.createScript(): Script = object : Script {\n    override suspend fun execute(action: String, args: Args, scope: Scope): ScriptResult {\n        return importComponent(action)\n    }\n}\n","package featurea.script\n\nimport featurea.utils.divide\nimport featurea.formula.Formula\nimport featurea.utils.packageId\nimport featurea.utils.splitWithWrappers\nimport featurea.utils.toSimpleName\n\nsealed class ScriptOperator(val interpreter: ScriptInterpreter, val value: String) {\n    abstract suspend fun execute(scriptCall: ScriptCall): Any?\n}\n\n@ExperimentalStdlibApi\nclass ScriptRightOperator(interpreter: ScriptInterpreter, value: String) : ScriptOperator(interpreter, value) {\n\n    val key: String\n    private val action: String?\n    private val argsString: String?\n\n    init {\n        val actionId: String\n        val firstIndexOfOpenBrace = value.indexOf('(')\n        val lastIndexOfCloseBrace = value.lastIndexOf(')')\n        if (firstIndexOfOpenBrace != -1 && lastIndexOfCloseBrace == value.lastIndex) {\n            actionId = value.substring(0, firstIndexOfOpenBrace)\n            this.argsString = value.substring(firstIndexOfOpenBrace + 1, value.lastIndex)\n        } else {\n            actionId = value\n            this.argsString = null\n        }\n        // >> quickfix todo improve\n        val lastDotIndex = actionId.lastIndexOf(\".\")\n        if (lastDotIndex != -1) {\n            this.key = actionId.substring(0, lastDotIndex)\n            this.action = actionId.substring(lastDotIndex + 1)\n        } else {\n            this.key = value\n            this.action = null\n        }\n        // <<\n    }\n\n    override suspend fun execute(scriptCall: ScriptCall): Any? {\n        val context: ScriptCallContext = scriptCall.context\n        val argsList = evaluateArguments(argsString, scriptCall)\n        run /*1. action*/ {\n            if (action != null && argsString != null) {\n                val importKey: String = scriptCall.imports[key] ?: key\n                val importedScript: Script? = context.localVariables[importKey] as Script?\n                val packageId: String = importKey.packageId\n                val simpleName: String = importKey.toSimpleName()\n                val docketName: String = \"${packageId}.Docket\"\n                val script: Script? = importedScript ?: scriptCall.script.findScriptOrNull(docketName)\n                if (script != null) {\n                    val docketAction: String = \"${simpleName}.${action}\"\n                    return script.execute(docketAction, argsList)\n                }\n            }\n        }\n        run /*2. local variable from stack*/ {\n            val localVariable: Any? = context.localVariables[value]\n            if (localVariable != null) {\n                return localVariable\n            }\n        }\n        run /*3. primitive value*/ {\n            val result: ScriptResult = scriptResultOf(value)\n            if (result is ScriptResult.Existing) {\n                return result.value\n            }\n        }\n        run /*4. argument*/ {\n            if (context.hasArguments) {\n                return context.args.pop()\n            }\n        }\n        /*5. execute config*/\n        /*run  {\n            if (key.endsWith(\"Config\")) {\n                val configName = key.removeSuffix(\"Config\")\n                val configValue = interpreter.contentCache.configCache.getValue(\"$configName:$action\")\n                if (configValue != null) {\n                    val configImports = interpreter.contentCache.scriptCache.importsOf(configName)\n                    return interpreter.execute(configImports, scriptRoutine.script, configValue, context)\n                }\n            }\n        }*/\n        run /*6. do math*/{\n            return evaluateMath(value, scriptCall)\n        }\n    }\n\n    /*internals*/\n\n    private suspend fun evaluateArguments(argsString: String?, scriptCall: ScriptCall): Args {\n        if (argsString == null) {\n            return emptyList()\n        }\n        val argsList = argsString.splitWithWrappers(',')\n        return argsList.map { ScriptRightOperator(interpreter, it).execute(scriptCall) }\n    }\n\n    private fun <T> evaluateMath(math: String, scriptCall: ScriptCall): T {\n        var value: String = math\n        for ((localVariableName, localVariable) in scriptCall.context.localVariables) {\n            value = value.replace(localVariableName, localVariable.toString())\n        }\n        val formula = Formula<T>(value)\n        return formula.calculate()\n    }\n\n}\n\nclass ScriptLeftOperator(interpreter: ScriptInterpreter, value: String) : ScriptOperator(interpreter, value) {\n\n    override suspend fun execute(scriptCall: ScriptCall): Any? {\n        val context: ScriptCallContext = scriptCall.context\n        val result: Any? = context.result\n        if (value.contains(\"var \")) {\n            // 1. create new local variable in stack\n            val varName = value.removePrefix(\"var \")\n            varName.validateVarName()\n            context.localVariables[varName] = result\n        } else if (context.localVariables.containsKey(value)) {\n            // 2. existing local variable\n            context.localVariables[value] = result\n        } else {\n            // 3. setter action\n            val (key, action) = value.divide(\".\")\n            if (action == null) {\n                throw IllegalArgumentException(\"value: $value\")\n            }\n            val importKey: String = scriptCall.imports[key] ?: key\n            val script: Script = scriptCall.script.findScript(importKey)\n            script.execute(action, args = listOf(result))\n        }\n        return result\n    }\n\n}\n\n/*internals*/\n\nprivate fun String.validateVarName() {\n    if (contains(\".\")) throw ScriptSyntaxException(\"Illegal var name because contains dot symbol: $this\")\n}\n\nprivate fun String.isImportDirective(): Boolean = startsWith(\"import \") && contains(\" as \")\n","package featurea.script\n\nimport featurea.utils.splitAndTrim\nimport featurea.utils.splitWithWrappers\n\nclass ScriptSyntaxException(message: String) : RuntimeException(message)\n\nconst val DOLLAR = \"$\"\nprivate val includeRegex = \"(include .*?\\\\.*?\\\\;)\".toRegex() // IntelliJ consider '\\\\' redundant but it's not\nprivate val functionRegex = \"(function .*?\\\\{.*?\\\\})\".toRegex() // IntelliJ consider '\\\\' redundant but it's not\ninternal val expressionRegex = \"\\\\$\\\\{(.*?)\\\\}\".toRegex() // IntelliJ consider '\\\\' redundant but it's not\n\n@OptIn(ExperimentalStdlibApi::class)\nsuspend fun ScriptInterpreter.parseSource(source: String): List<ScriptExpression> {\n    var scriptLine = source\n    val expressions = ArrayList<ScriptExpression>()\n    /*\n    run {\n        // 1. includes\n        for (matchResult in includeRegex.findAll(scriptLine)) {\n            val includeDirective = matchResult.value\n            addIncludeDirective(includeDirective)\n            scriptLine = scriptLine.replaceFirst(includeDirective, \"\")\n        }\n    }\n    */\n    run {\n        // 2. actions\n        for (matchResult in functionRegex.findAll(scriptLine)) {\n            val function = matchResult.value\n            addFunction(function)\n            scriptLine = scriptLine.replaceFirst(function, \"\")\n        }\n    }\n    run {\n        // 3. expressions\n        val tokens = scriptLine.splitWithWrappers(';')\n        for (token in tokens) {\n            expressions.add(ScriptExpression(this, token))\n        }\n    }\n    return expressions\n}\n\n/*internals*/\n\n/*\nprivate suspend fun ScriptInterpreter.addIncludeDirective(includeDirective: String) {\n    val scriptFilePath = includeDirective.trim().replaceFirst(\"include \", \"\").replaceFirst(\";\", \"\").withExtension(\"fs\")\n    val scriptFileText = textContent.getText(scriptFilePath)\n    if (scriptFileText != null) {\n        parseScript(scriptFileText)\n    }\n}\n*/\n\nprivate fun ScriptInterpreter.addFunction(actionDirective: String) {\n    val functionSignature = actionDirective.trim().replaceFirst(\"function \", \"\")\n    val indexOfOpenBracket = functionSignature.indexOf('(')\n    val indexOfCloseBracket = functionSignature.indexOf(')')\n    val indexOfOpenCurlyBracket = functionSignature.indexOf('{')\n    val functionId = functionSignature.substring(0, indexOfOpenBracket) // action id has single token by design\n    val argsList = functionSignature.substring(indexOfOpenBracket, indexOfCloseBracket).splitAndTrim(\",\")\n    val script = functionSignature.substring(indexOfOpenCurlyBracket, functionSignature.length - 1)\n    functions[functionId] = ScriptFunction(this, script, argsList)\n}\n","package featurea.script\n\nimport featurea.utils.isDouble\nimport featurea.utils.isInteger\nimport featurea.utils.isWrapped\nimport featurea.script.ScriptResult.Absent\nimport featurea.script.ScriptResult.Existing\n\ninternal sealed class ScriptResult {\n    object Absent : ScriptResult()\n    class Existing(val value: Any? = Unit) : ScriptResult()\n}\n\ninternal fun scriptResultOf(primitiveValue: String): ScriptResult = when {\n    primitiveValue == \"null\" -> Existing(null)\n    primitiveValue == \"false\" -> Existing(false)\n    primitiveValue == \"true\" -> Existing(true)\n    primitiveValue.isWrapped(\"'\") -> Existing(primitiveValue.substring(1, primitiveValue.lastIndex))\n    primitiveValue.isInteger() -> Existing(primitiveValue.toInt())\n    primitiveValue.isDouble() -> Existing(primitiveValue.toDouble())\n    else -> Absent\n}\n\n","package featurea.script\n\nimport featurea.runtime.Artifact\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.script\") {\n    \"ScriptInterpreter\" to ScriptInterpreter::class\n\n    static {\n        provideComponent(ScriptInterpreter())\n    }\n}\n\n/*types*/\n\ntypealias Args = List<Any?>\n\ntypealias Imports = Map<String, String>\n\nfun args(): Args = emptyList()\n\nfun imports(): Imports = emptyMap()\n","package featurea.loader\n\nimport featurea.*\nimport featurea.app.Application\nimport featurea.content.*\nimport featurea.rml.RmlResource\nimport featurea.app.buildApplication\nimport featurea.rml.forEachResourceAttribute\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.Task\nimport featurea.runtime.import\nimport featurea.text.TextContent\nimport featurea.utils.parseProperties\n\nclass Loader(override val module: Module) : Component {\n\n    private val app: Application = import()\n    private val content: Content = import()\n    private val controller: LoaderController = import()\n    private val contentTypeRegistry: ContentTypeRegistry = import()\n    private val system: System = import()\n    private val textContent: TextContent = import()\n\n    val listeners = mutableListOf<LoaderListener>()\n    private val loadedResources = mutableSetOf<String>()\n\n    fun loadResource(resource: String, complete: Task? = null) {\n        loadResources(listOf(resource), complete)\n    }\n\n    fun loadResources(resources: Iterable<String>, complete: Task? = null) {\n        val resourcesThatAreNotReallyLoaded: List<String> = resources.distinct().filterNot { isResourceLoaded(it) }\n        if (resourcesThatAreNotReallyLoaded.isNotEmpty()) {\n            controller.enqueueLoadingPool(resourcesThatAreNotReallyLoaded)\n            loadedResources.addAll(resourcesThatAreNotReallyLoaded)\n        }\n        if (complete != null) {\n            app.tasksToRunOnCompleteLoading.add(complete)\n        }\n    }\n\n    fun releaseResource(resource: String) {\n        releaseResources(listOf(resource))\n    }\n\n    fun releaseResources(resources: Iterable<String>) {\n        val resourcesThatAreLoadedIndeed: List<String> = resources.distinct().filter { isResourceLoaded(it) }\n        controller.enqueueReleasePool(resourcesThatAreLoadedIndeed)\n    }\n\n    suspend fun loadBundle(bundlePath: String, complete: Task? = null) {\n        // 1. filter\n        check(content.providedResources.isEmpty())\n\n        // 2. setup\n        system.workingDir = bundlePath\n        system.contentRoots.add(0, bundlePath) // quickfix todo avoid\n        val manifestSource: String = textContent.findTextOrNull(\"manifest.properties\") ?: error(\"manifest not found\")\n        val manifest: MutableMap<String, String> = parseProperties(manifestSource)\n        val providedResources: List<String> = manifest[\"resources\"]?.split(\", \") ?: error(\"resources not found\")\n        system.properties.putAll(manifest)\n        content.providedResources.addAll(providedResources)\n        val mainProject: String = system.properties.mainProject\n        val mainDocument: String = system.properties.mainDocument\n        val screenPath: String = \"$mainProject:/$mainDocument\"\n\n        // 3. action\n        for (listener in listeners) {\n            listener.start()\n        }\n        for (task in app.tasksToRepeatOnStartLoading) {\n            task()\n        }\n        loadResources(content.providedResources) {\n            app.delegate = module.buildApplication(screenPath)\n            if (complete != null) {\n                complete()\n            }\n        }\n    }\n\n    suspend fun loadRmlResource(rmlResource: RmlResource, complete: Task? = null) {\n        rmlResource.rmlTag.forEachResourceAttribute { rmlTag, key, value ->\n            loadRmlAttribute(rmlTag, key, value)\n        }\n        loadResources(content.providedResources, complete)\n    }\n\n    suspend fun loadRmlAttribute(rmlTag: ResourceTag, key: String, value: String, complete: Task? = null) {\n        val resourcePaths: List<String>? = contentTypeRegistry.parseOrNull(rmlTag, key, value)\n        if (resourcePaths != null) {\n            loadResources(resourcePaths, complete)\n        } else {\n            val resource: Resource? = content.findResourceOrNull(value)\n            if (resource != null) {\n                loadResource(resource.path, complete)\n            }\n        }\n    }\n\n    /*internals*/\n\n    private fun isResourceLoaded(resourcePath: String): Boolean {\n        return loadedResources.contains(resourcePath)\n    }\n\n}\n","package featurea.loader\n\nimport featurea.app.Application\nimport featurea.app.ApplicationController\nimport featurea.content.Content\nimport featurea.content.ContentTypeRegistry\nimport featurea.content.Resource\nimport featurea.runtime.Module\nimport featurea.runtime.import\n\nclass LoaderController(module: Module) : ApplicationController(module) {\n\n    private val app: Application = import()\n    private val content: Content = import()\n    private val contentTypeRegistry: ContentTypeRegistry = import()\n    private val loader: Loader = import()\n\n    var isActive = false\n        private set\n    private var loadingPool = mutableListOf<String>()\n    private var releasePool = mutableListOf<String>()\n    private var capacity: Float = 0f\n    private val progress: Float get() = if (capacity == 0f) 0f else (capacity - loadingPool.size) / capacity\n    private val loadingQueue = ArrayList<String>() // just for try todo replace with local variable\n    private val releaseQueue = ArrayList<String>() // just for try todo replace with local variable\n\n    fun enqueueLoadingPool(resourcesToLoad: List<String>) {\n        loadingPool.addAll(resourcesToLoad)\n        loadingPool = loadingPool.distinct().toMutableList()\n    }\n\n    fun enqueueReleasePool(resourcesToRelease: List<String>) {\n        releasePool.addAll(resourcesToRelease)\n        releasePool = releasePool.distinct().toMutableList()\n    }\n\n    override suspend fun update() {\n        if (!isActive && loadingPool.isNotEmpty()) {\n            activate()\n        }\n\n        if (isActive) {\n            // 1. clear all releasePool\n            if (releasePool.isNotEmpty()) {\n                for (resourcePath in releasePool) {\n                    val existingResource: Resource? = content.existingResources[resourcePath]\n                    if (existingResource != null) {\n                        contentTypeRegistry.releaseResource(existingResource, releaseQueue)\n                        releaseQueue.distinct().forEach { releasePool.remove(it) }\n                        releaseQueue.clear()\n                    } else {\n                        releasePool.remove(resourcePath) // just for now todo delete this\n                    }\n                }\n            }\n\n            // 2. load next resource from loadingPool\n            if (loadingPool.isNotEmpty()) {\n                val resourcePath: String = loadingPool[0]\n                try {\n                    val resource: Resource? = content.findResourceOrNull(resourcePath)\n                    if (resource != null) {\n                        contentTypeRegistry.loadResource(resource, loadingQueue)\n                        loadingQueue.distinct().forEach { loadingPool.remove(it) }\n                        loadingQueue.clear()\n                    }\n                } finally {\n                    loadingPool.remove(resourcePath) // IMPORTANT because `palette-desktop.properties`\n                }\n            }\n\n            // 3. inform ui that loading is progressed\n            updateProgress(progress)\n        }\n\n        // >> quickfix todo improve\n        if (isActive) {\n            app.delegate?.load(progress)\n        }\n        // <<\n    }\n\n    /*internals*/\n\n    private fun activate() {\n        isActive = true\n        capacity = loadingPool.size.toFloat()\n    }\n\n    private fun complete() {\n        isActive = false\n        capacity = 0f\n    }\n\n    private suspend fun updateProgress(progress: Float) {\n        for (listener in loader.listeners) {\n            listener.update(progress)\n        }\n        if (progress == 1f) {\n            // 1. listeners\n            complete()\n            for (listener in loader.listeners) {\n                listener.complete()\n            }\n\n            // 2. repeat tasks\n            for (task in app.tasksToRepeatOnBuildApplication) {\n                task()\n            }\n\n            // 3. run tasks\n            val tasks = app.tasksToRunOnCompleteLoading.swap()\n            for (task in tasks) {\n                task()\n            }\n            tasks.clear()\n        }\n    }\n\n}\n","package featurea.loader\n\nimport featurea.runtime.Artifact\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.loader\") {\n    include(featurea.rml.artifact)\n    include(featurea.script.artifact)\n\n    \"Loader\" to ::Loader\n    \"LoaderController\" to ::LoaderController\n\n    /*ApplicationPlugin {\n\n    }*/\n}\n","package featurea.opengl\n\nimport featurea.utils.Color\nimport featurea.utils.FloatBuffer\n\nabstract class Buffer(val drawCallSize: Int, val isMedium: Boolean) {\n\n    var data: FloatBuffer = FloatBuffer(limit = 0, isMedium)\n        private set\n    var drawCallLimit: Int = 0\n        private set\n    var vertexCount: Int = 0\n        private set\n    var isDirty: Boolean = true\n        internal set\n    val isNotDirty: Boolean\n        get() = !isDirty\n    val isEmpty: Boolean get() = data.size == 0\n    val isNotEmpty: Boolean get() = data.size != 0\n\n    fun vertex(vararg attributes: Float) {\n        data.pushAll(attributes)\n        vertexCount++\n    }\n\n    fun clear(drawCallLimit: Int) {\n        clear()\n        ensureDrawCallLimit(drawCallLimit)\n    }\n\n    fun clear() {\n        isDirty = true\n        data.clear()\n        vertexCount = 0\n    }\n\n    fun increaseDrawCallLimit(drawCallLimit: Int) {\n        if (this.drawCallLimit < drawCallLimit) {\n            ensureDrawCallLimit(drawCallLimit)\n        }\n    }\n\n    fun ensureDrawCallLimit(drawCallLimit: Int) {\n        if (this.drawCallLimit != drawCallLimit) {\n            clear()\n            this.drawCallLimit = drawCallLimit\n            data = FloatBuffer(drawCallLimit * drawCallSize, isMedium)\n        }\n    }\n\n}\n\nfun Buffer.vertex(vararg floats: Float, color: Color) {\n    val (r, g, b, a) = color\n    vertex(*floats, r, g, b, a)\n}\n","package featurea.opengl\n\nimport featurea.*\nimport featurea.layout.Camera\nimport featurea.layout.toScissorRectangle\nimport featurea.math.*\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.utils.Color\nimport featurea.utils.Colors\nimport featurea.utils.Logger\nimport featurea.utils.Stack\nimport featurea.window.Window\nimport featurea.window.toScissorRectangle\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.roundToInt\n\n/*GLES20*/\n\nconst val ACTIVE_ATTRIBUTE_MAX_LENGTH: Int = 0x8B8A\nconst val ACTIVE_ATTRIBUTES: Int = 0x8B89\nconst val ACTIVE_TEXTURE: Int = 0x84E0\nconst val ACTIVE_UNIFORM_MAX_LENGTH: Int = 0x8B87\nconst val ACTIVE_UNIFORMS: Int = 0x8B86\nconst val ALIASED_LINE_WIDTH_RANGE: Int = 0x846E\nconst val ALIASED_POINT_SIZE_RANGE: Int = 0x846D\nconst val ALPHA_BITS: Int = 0x0D55\nconst val ALPHA: Int = 0x1906\nconst val ALWAYS: Int = 0x0207\nconst val ARRAY_BUFFER_BINDING: Int = 0x8894\nconst val ARRAY_BUFFER: Int = 0x8892\nconst val ATTACHED_SHADERS: Int = 0x8B85\nconst val BACK: Int = 0x0405\nconst val BLEND_COLOR: Int = 0x8005\nconst val BLEND_DST_ALPHA: Int = 0x80CA\nconst val BLEND_DST_RGB: Int = 0x80C8\nconst val BLEND_EQUATION_ALPHA: Int = 0x883D\nconst val BLEND_EQUATION_RGB: Int = 0x8009\nconst val BLEND_EQUATION: Int = 0x8009\nconst val BLEND_SRC_ALPHA: Int = 0x80CB\nconst val BLEND_SRC_RGB: Int = 0x80C9\nconst val BLEND: Int = 0x0BE2\nconst val BLUE_BITS: Int = 0x0D54\nconst val BOOL_VEC2: Int = 0x8B57\nconst val BOOL_VEC3: Int = 0x8B58\nconst val BOOL_VEC4: Int = 0x8B59\nconst val BOOL: Int = 0x8B56\nconst val BUFFER_SIZE: Int = 0x8764\nconst val BUFFER_USAGE: Int = 0x8765\nconst val BYTE: Int = 0x1400\nconst val CCW: Int = 0x0901\nconst val CLAMP_TO_BORDER: Int = 0x812D\nconst val CLAMP_TO_EDGE: Int = 0x812F\nconst val COLOR_ATTACHMENT0: Int = 0x8CE0\nconst val COLOR_BUFFER_BIT: Int = 0x00004000\nconst val COLOR_CLEAR_VALUE: Int = 0x0C22\nconst val COLOR_WRITEMASK: Int = 0x0C23\nconst val COMPILE_STATUS: Int = 0x8B81\nconst val COMPRESSED_TEXTURE_FORMATS: Int = 0x86A3\nconst val CONSTANT_ALPHA: Int = 0x8003\nconst val CONSTANT_COLOR: Int = 0x8001\nconst val CULL_FACE_MODE: Int = 0x0B45\nconst val CULL_FACE: Int = 0x0B44\nconst val CURRENT_PROGRAM: Int = 0x8B8D\nconst val CURRENT_VERTEX_ATTRIB: Int = 0x8626\nconst val CW: Int = 0x0900\nconst val DECR_WRAP: Int = 0x8508\nconst val DECR: Int = 0x1E03\nconst val DELETE_STATUS: Int = 0x8B80\nconst val DEPTH_ATTACHMENT: Int = 0x8D00\nconst val DEPTH_BITS: Int = 0x0D56\nconst val DEPTH_BUFFER_BIT: Int = 0x00000100\nconst val DEPTH_CLEAR_VALUE: Int = 0x0B73\nconst val DEPTH_COMPONENT: Int = 0x1902\nconst val DEPTH_COMPONENT16: Int = 0x81A5\nconst val DEPTH_FUNC: Int = 0x0B74\nconst val DEPTH_RANGE: Int = 0x0B70\nconst val DEPTH_TEST: Int = 0x0B71\nconst val DEPTH_WRITEMASK: Int = 0x0B72\nconst val DITHER: Int = 0x0BD0\nconst val DONT_CARE: Int = 0x1100\nconst val DST_ALPHA: Int = 0x0304\nconst val DST_COLOR: Int = 0x0306\nconst val DYNAMIC_DRAW: Int = 0x88E8\nconst val ELEMENT_ARRAY_BUFFER_BINDING: Int = 0x8895\nconst val ELEMENT_ARRAY_BUFFER: Int = 0x8893\nconst val EQUAL: Int = 0x0202\nconst val EXTENSIONS: Int = 0x1F03\nconst val FALSE: Int = 0\nconst val FASTEST: Int = 0x1101\nconst val FILL: Int = 0x1B02\nconst val FIXED: Int = 0x140C\nconst val FLOAT_MAT2: Int = 0x8B5A\nconst val FLOAT_MAT3: Int = 0x8B5B\nconst val FLOAT_MAT4: Int = 0x8B5C\nconst val FLOAT_VEC2: Int = 0x8B50\nconst val FLOAT_VEC3: Int = 0x8B51\nconst val FLOAT_VEC4: Int = 0x8B52\nconst val FLOAT: Int = 0x1406\nconst val FRAGMENT_SHADER: Int = 0x8B30\nconst val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int = 0x8CD1\nconst val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int = 0x8CD0\nconst val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int = 0x8CD3\nconst val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int = 0x8CD2\nconst val FRAMEBUFFER_BINDING: Int = 0x8CA6\nconst val FRAMEBUFFER_COMPLETE: Int = 0x8CD5\nconst val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int = 0x8CD6\nconst val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int = 0x8CD9\nconst val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int = 0x8CD7\nconst val FRAMEBUFFER_UNSUPPORTED: Int = 0x8CDD\nconst val FRAMEBUFFER: Int = 0x8D40\nconst val FRONT_AND_BACK: Int = 0x0408\nconst val FRONT_FACE: Int = 0x0B46\nconst val FRONT: Int = 0x0404\nconst val FUNC_ADD: Int = 0x8006\nconst val FUNC_REVERSE_SUBTRACT: Int = 0x800B\nconst val FUNC_SUBTRACT: Int = 0x800A\nconst val GENERATE_MIPMAP_HINT: Int = 0x8192\nconst val GEQUAL: Int = 0x0206\nconst val GREATER: Int = 0x0204\nconst val GREEN_BITS: Int = 0x0D53\nconst val HIGH_FLOAT: Int = 0x8DF2\nconst val HIGH_INT: Int = 0x8DF5\nconst val IMPLEMENTATION_COLOR_READ_FORMAT: Int = 0x8B9B\nconst val IMPLEMENTATION_COLOR_READ_TYPE: Int = 0x8B9A\nconst val INCR_WRAP: Int = 0x8507\nconst val INCR: Int = 0x1E02\nconst val INFO_LOG_LENGTH: Int = 0x8B84\nconst val INT_VEC2: Int = 0x8B53\nconst val INT_VEC3: Int = 0x8B54\nconst val INT_VEC4: Int = 0x8B55\nconst val INT: Int = 0x1404\nconst val INVALID_ENUM: Int = 0x0500\nconst val INVALID_FRAMEBUFFER_OPERATION: Int = 0x0506\nconst val INVALID_OPERATION: Int = 0x0502\nconst val INVALID_VALUE: Int = 0x0501\nconst val INVERT: Int = 0x150A\nconst val KEEP: Int = 0x1E00\nconst val LEQUAL: Int = 0x0203\nconst val LESS: Int = 0x0201\nconst val LINE_LOOP: Int = 0x0002\nconst val LINE_SMOOTH: Int = 0xB20\nconst val LINE_STRIP: Int = 0x0003\nconst val LINE_WIDTH: Int = 0x0B21\nconst val LINE: Int = 0x1B01\nconst val LINEAR_MIPMAP_LINEAR: Int = 0x2703\nconst val LINEAR_MIPMAP_NEAREST: Int = 0x2701\nconst val LINEAR: Int = 0x2601\nconst val LINES: Int = 0x0001\nconst val LINK_STATUS: Int = 0x8B82\nconst val LOW_FLOAT: Int = 0x8DF0\nconst val LOW_INT: Int = 0x8DF3\nconst val LUMINANCE_ALPHA: Int = 0x190A\nconst val LUMINANCE: Int = 0x1909\nconst val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int = 0x8B4D\nconst val MAX_CUBE_MAP_TEXTURE_SIZE: Int = 0x851C\nconst val MAX_FRAGMENT_UNIFORM_VECTORS: Int = 0x8DFD\nconst val MAX_RENDERBUFFER_SIZE: Int = 0x84E8\nconst val MAX_TEXTURE_IMAGE_UNITS: Int = 0x8872\nconst val MAX_TEXTURE_SIZE: Int = 0x0D33\nconst val MAX_VARYING_VECTORS: Int = 0x8DFC\nconst val MAX_VERTEX_ATTRIBS: Int = 0x8869\nconst val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int = 0x8B4C\nconst val MAX_VERTEX_UNIFORM_VECTORS: Int = 0x8DFB\nconst val MAX_VIEWPORT_DIMS: Int = 0x0D3A\nconst val MAX: Int = 0x8008\nconst val MEDIUM_FLOAT: Int = 0x8DF1\nconst val MEDIUM_INT: Int = 0x8DF4\nconst val MIN: Int = 0x8007\nconst val MIRRORED_REPEAT: Int = 0x8370\nconst val MULTISAMPLE: Int = 0x809D\nconst val NEAREST_MIPMAP_LINEAR: Int = 0x2702\nconst val NEAREST_MIPMAP_NEAREST: Int = 0x2700\nconst val NEAREST: Int = 0x2600\nconst val NEVER: Int = 0x0200\nconst val NICEST: Int = 0x1102\nconst val NO_ERROR: Int = 0\nconst val NONE: Int = 0\nconst val NOTEQUAL: Int = 0x0205\nconst val NUM_COMPRESSED_TEXTURE_FORMATS: Int = 0x86A2\nconst val NUM_SHADER_BINARY_FORMATS: Int = 0x8DF9\nconst val ONE_MINUS_CONSTANT_ALPHA: Int = 0x8004\nconst val ONE_MINUS_CONSTANT_COLOR: Int = 0x8002\nconst val ONE_MINUS_DST_ALPHA: Int = 0x0305\nconst val ONE_MINUS_DST_COLOR: Int = 0x0307\nconst val ONE_MINUS_SRC_ALPHA: Int = 0x0303\nconst val ONE_MINUS_SRC_COLOR: Int = 0x0301\nconst val ONE: Int = 1\nconst val OUT_OF_MEMORY: Int = 0x0505\nconst val PACK_ALIGNMENT: Int = 0x0D05\nconst val POINTS: Int = 0x0000\nconst val POLYGON_OFFSET_FACTOR: Int = 0x8038\nconst val POLYGON_OFFSET_FILL: Int = 0x8037\nconst val POLYGON_OFFSET_UNITS: Int = 0x2A00\nconst val POLYGON_SMOOTH: Int = 0xb41\nconst val RED_BITS: Int = 0x0D52\nconst val RENDERBUFFER_ALPHA_SIZE: Int = 0x8D53\nconst val RENDERBUFFER_BINDING: Int = 0x8CA7\nconst val RENDERBUFFER_BLUE_SIZE: Int = 0x8D52\nconst val RENDERBUFFER_DEPTH_SIZE: Int = 0x8D54\nconst val RENDERBUFFER_GREEN_SIZE: Int = 0x8D51\nconst val RENDERBUFFER_HEIGHT: Int = 0x8D43\nconst val RENDERBUFFER_INTERNAL_FORMAT: Int = 0x8D44\nconst val RENDERBUFFER_RED_SIZE: Int = 0x8D50\nconst val RENDERBUFFER_STENCIL_SIZE: Int = 0x8D55\nconst val RENDERBUFFER_WIDTH: Int = 0x8D42\nconst val RENDERBUFFER: Int = 0x8D41\nconst val RENDERER: Int = 0x1F01\nconst val REPEAT: Int = 0x2901\nconst val REPLACE: Int = 0x1E01\nconst val RGB: Int = 0x1907\nconst val RGB5_A1: Int = 0x8057\nconst val RGB565: Int = 0x8D62\nconst val RGBA: Int = 0x1908\nconst val RGBA4: Int = 0x8056\nconst val SAMPLE_ALPHA_TO_COVERAGE: Int = 0x809E\nconst val SAMPLE_BUFFERS: Int = 0x80A8\nconst val SAMPLE_COVERAGE_INVERT: Int = 0x80AB\nconst val SAMPLE_COVERAGE_VALUE: Int = 0x80AA\nconst val SAMPLE_COVERAGE: Int = 0x80A0\nconst val SAMPLER_2D: Int = 0x8B5E\nconst val SAMPLER_CUBE: Int = 0x8B60\nconst val SAMPLES: Int = 0x80A9\nconst val SCISSOR_BOX: Int = 0x0C10\nconst val SCISSOR_TEST: Int = 0x0C11\nconst val SHADER_BINARY_FORMATS: Int = 0x8DF8\nconst val SHADER_COMPILER: Int = 0x8DFA\nconst val SHADER_SOURCE_LENGTH: Int = 0x8B88\nconst val SHADER_TYPE: Int = 0x8B4F\nconst val SHADING_LANGUAGE_VERSION: Int = 0x8B8C\nconst val SHORT: Int = 0x1402\nconst val SRC_ALPHA_SATURATE: Int = 0x0308\nconst val SRC_ALPHA: Int = 0x0302\nconst val SRC_COLOR: Int = 0x0300\nconst val STATIC_DRAW: Int = 0x88E4\nconst val STENCIL_ATTACHMENT: Int = 0x8D20\nconst val STENCIL_BACK_FAIL: Int = 0x8801\nconst val STENCIL_BACK_FUNC: Int = 0x8800\nconst val STENCIL_BACK_PASS_DEPTH_FAIL: Int = 0x8802\nconst val STENCIL_BACK_PASS_DEPTH_PASS: Int = 0x8803\nconst val STENCIL_BACK_REF: Int = 0x8CA3\nconst val STENCIL_BACK_VALUE_MASK: Int = 0x8CA4\nconst val STENCIL_BACK_WRITEMASK: Int = 0x8CA5\nconst val STENCIL_BITS: Int = 0x0D57\nconst val STENCIL_BUFFER_BIT: Int = 0x00000400\nconst val STENCIL_CLEAR_VALUE: Int = 0x0B91\nconst val STENCIL_FAIL: Int = 0x0B94\nconst val STENCIL_FUNC: Int = 0x0B92\nconst val STENCIL_INDEX8: Int = 0x8D48\nconst val STENCIL_PASS_DEPTH_FAIL: Int = 0x0B95\nconst val STENCIL_PASS_DEPTH_PASS: Int = 0x0B96\nconst val STENCIL_REF: Int = 0x0B97\nconst val STENCIL_TEST: Int = 0x0B90\nconst val STENCIL_VALUE_MASK: Int = 0x0B93\nconst val STENCIL_WRITEMASK: Int = 0x0B98\nconst val STREAM_DRAW: Int = 0x88E0\nconst val SUBPIXEL_BITS: Int = 0x0D50\nconst val TEXTURE_2D: Int = 0x0DE1\nconst val TEXTURE_BINDING_2D: Int = 0x8069\nconst val TEXTURE_BINDING_CUBE_MAP: Int = 0x8514\nconst val TEXTURE_BORDER_COLOR: Int = 0x1004\nconst val TEXTURE_CUBE_MAP_NEGATIVE_X: Int = 0x8516\nconst val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int = 0x8518\nconst val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int = 0x851A\nconst val TEXTURE_CUBE_MAP_POSITIVE_X: Int = 0x8515\nconst val TEXTURE_CUBE_MAP_POSITIVE_Y: Int = 0x8517\nconst val TEXTURE_CUBE_MAP_POSITIVE_Z: Int = 0x8519\nconst val TEXTURE_CUBE_MAP: Int = 0x8513\nconst val TEXTURE_MAG_FILTER: Int = 0x2800\nconst val TEXTURE_MIN_FILTER: Int = 0x2801\nconst val TEXTURE_WRAP_S: Int = 0x2802\nconst val TEXTURE_WRAP_T: Int = 0x2803\nconst val TEXTURE: Int = 0x1702\nconst val TEXTURE0: Int = 0x84C0\nconst val TEXTURE1: Int = 0x84C1\nconst val TEXTURE10: Int = 0x84CA\nconst val TEXTURE11: Int = 0x84CB\nconst val TEXTURE12: Int = 0x84CC\nconst val TEXTURE13: Int = 0x84CD\nconst val TEXTURE14: Int = 0x84CE\nconst val TEXTURE15: Int = 0x84CF\nconst val TEXTURE16: Int = 0x84D0\nconst val TEXTURE17: Int = 0x84D1\nconst val TEXTURE18: Int = 0x84D2\nconst val TEXTURE19: Int = 0x84D3\nconst val TEXTURE2: Int = 0x84C2\nconst val TEXTURE20: Int = 0x84D4\nconst val TEXTURE21: Int = 0x84D5\nconst val TEXTURE22: Int = 0x84D6\nconst val TEXTURE23: Int = 0x84D7\nconst val TEXTURE24: Int = 0x84D8\nconst val TEXTURE25: Int = 0x84D9\nconst val TEXTURE26: Int = 0x84DA\nconst val TEXTURE27: Int = 0x84DB\nconst val TEXTURE28: Int = 0x84DC\nconst val TEXTURE29: Int = 0x84DD\nconst val TEXTURE3: Int = 0x84C3\nconst val TEXTURE30: Int = 0x84DE\nconst val TEXTURE31: Int = 0x84DF\nconst val TEXTURE4: Int = 0x84C4\nconst val TEXTURE5: Int = 0x84C5\nconst val TEXTURE6: Int = 0x84C6\nconst val TEXTURE7: Int = 0x84C7\nconst val TEXTURE8: Int = 0x84C8\nconst val TEXTURE9: Int = 0x84C9\nconst val TRIANGLE_FAN: Int = 0x0006\nconst val TRIANGLE_STRIP: Int = 0x0005\nconst val TRIANGLES: Int = 0x0004\nconst val TRUE: Int = 1\nconst val UNPACK_ALIGNMENT: Int = 0x0CF5\nconst val UNSIGNED_BYTE: Int = 0x1401\nconst val UNSIGNED_INT: Int = 0x1405\nconst val UNSIGNED_SHORT_4_4_4_4: Int = 0x8033\nconst val UNSIGNED_SHORT_5_5_5_1: Int = 0x8034\nconst val UNSIGNED_SHORT_5_6_5: Int = 0x8363\nconst val UNSIGNED_SHORT: Int = 0x1403\nconst val VALIDATE_STATUS: Int = 0x8B83\nconst val VENDOR: Int = 0x1F00\nconst val VERSION: Int = 0x1F02\nconst val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int = 0x889F\nconst val VERTEX_ATTRIB_ARRAY_ENABLED: Int = 0x8622\nconst val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int = 0x886A\nconst val VERTEX_ATTRIB_ARRAY_POINTER: Int = 0x8645\nconst val VERTEX_ATTRIB_ARRAY_SIZE: Int = 0x8623\nconst val VERTEX_ATTRIB_ARRAY_STRIDE: Int = 0x8624\nconst val VERTEX_ATTRIB_ARRAY_TYPE: Int = 0x8625\nconst val VERTEX_SHADER: Int = 0x8B31\nconst val VIEWPORT: Int = 0x0BA2\nconst val ZERO: Int = 0\n\nabstract class Opengl(override val module: Module) : Component {\n\n    abstract fun activeTexture(texture: Int)\n    abstract fun attachShader(program: Program, shader: Shader)\n    abstract fun bindAttributeLocation(program: Program, index: Int, name: String)\n    abstract fun bindBuffer(target: Int, buffer: Buffer?)\n    abstract fun bindTexture(target: Int, texture: Texture?)\n    abstract fun blendColor(red: Float, green: Float, blue: Float, alpha: Float)\n    abstract fun blendEquation(mode: Int)\n    abstract fun blendFunction(sourceFactor: Int, destinationFactor: Int)\n    abstract fun blendFunctionSeparate(srcRgb: Int, dstRgb: Int, srcAlpha: Int, dstAlpha: Int)\n    abstract fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int)\n    abstract fun bufferData(target: Int, data: FloatArray, usage: Int)\n    abstract fun bufferData(target: Int, data: IntArray, usage: Int)\n    abstract fun bufferSubData(target: Int, offset: Long, size: Long, data: FloatArray)\n    abstract fun clear(mask: Int)\n    abstract fun clearColor(red: Float, green: Float, blue: Float, alpha: Float)\n    abstract fun compileShader(shader: Shader)\n    abstract fun createProgram(): Program\n    abstract fun createShader(type: Int): Shader\n    abstract fun cullFace(mode: Int)\n    abstract fun deleteBuffer(buffer: Buffer)\n    abstract fun deleteShader(shader: Shader)\n    abstract fun deleteTexture(texture: Texture)\n    abstract fun depthFunction(function: Int)\n    abstract fun disable(capability: Int)\n    abstract fun disableVertexAttributeArray(index: Int)\n    abstract fun drawArrays(mode: Int, first: Int, count: Int)\n    abstract fun drawElements(mode: Int, count: Int, type: Int, indices: IntArray)\n    abstract fun enable(capability: Int)\n    abstract fun enableVertexAttribArray(index: Int)\n    abstract fun generateMipmap(target: Int)\n    abstract fun getAttributeLocation(program: Program, name: String): Int\n    abstract fun getProgramInfoLog(program: Program): String\n    abstract fun getProgramParameter(program: Program, parameter: Int): Int\n    abstract fun getShaderInfoLog(shader: Shader): String\n    abstract fun getShaderParameter(shader: Shader, parameter: Int): Int\n    abstract fun getString(name: Int): String\n    abstract fun getUniformLocation(program: Program, name: String): UniformLocation\n    abstract fun lineWidth(width: Float)\n    abstract fun linkProgram(program: Program)\n    abstract fun pixelStore(parameter: Int, value: Int)\n    abstract fun polygonMode(face: Int, mode: Int)\n    abstract fun scissor(x: Int, y: Int, width: Int, height: Int)\n    abstract fun shaderSource(shader: Shader, source: String)\n    abstract fun textureParameter(target: Int, parameter: Int, value: Int)\n    abstract fun uniform(location: UniformLocation, float: Float)\n    abstract fun uniform(location: UniformLocation, int: Int)\n    abstract fun uniform(location: UniformLocation, float1: Float, float2: Float)\n    abstract fun uniform(location: UniformLocation, float1: Float, float2: Float, float3: Float)\n    abstract fun uniform(location: UniformLocation, float1: Float, float2: Float, float3: Float, float4: Float)\n    abstract fun uniform(location: UniformLocation, matrix: Matrix)\n    abstract fun useProgram(program: Program?)\n    abstract fun vertexAttributePointer(index: Int, size: Int, type: Int, stride: Int, offset: Int)\n    abstract fun viewport(x: Int, y: Int, width: Int, height: Int)\n\n    /*custom*/\n\n    val logger: Logger = Logger(tag = \"Opengl\")\n    var program: Program? = null\n    var precision: Precision = Precision.MEDIUM\n    val window: Window = import()\n    private val system: System = import()\n    private val utilityVector: Vector2.Result = Vector2().Result()\n    private val scissorStack: Stack<IntRectangle> = Stack<IntRectangle>()\n\n    init {\n        logger.isEnable = system.properties[\"featurea.opengl.logger\"] ?: false\n    }\n\n    abstract fun createTexture(texturePath: String): Texture\n\n    abstract fun createBuffer(drawCallSize: Int, isMedium: Boolean): Buffer\n\n    fun clear(color: Color = Colors.blackColor) {\n        clearColor(color.red, color.green, color.blue, color.alpha)\n        clear(COLOR_BUFFER_BIT)\n    }\n\n    fun drawTriangles(buffer: Buffer, usage: Int = STATIC_DRAW) {\n        val program: Program = checkNotNull(program)\n        program.bindBuffer(buffer)\n        bindBuffer(ARRAY_BUFFER, buffer)\n        if (buffer.isDirty) {\n            bufferData(ARRAY_BUFFER, buffer.data.toFloatArray(), usage)\n            buffer.isDirty = false\n        }\n        drawArrays(TRIANGLES, 0, buffer.vertexCount)\n    }\n\n    fun drawTriangleFan(buffer: Buffer, usage: Int = STATIC_DRAW) {\n        val program: Program = checkNotNull(program)\n        program.bindBuffer(buffer)\n        bindBuffer(ARRAY_BUFFER, buffer)\n        if (buffer.isDirty) {\n            bufferData(ARRAY_BUFFER, buffer.data.toFloatArray(), usage)\n            buffer.isDirty = false\n        }\n        drawArrays(TRIANGLE_FAN, 0, buffer.vertexCount)\n    }\n\n    fun drawTriangleStrip(buffer: Buffer, count: Int = buffer.vertexCount, usage: Int = STATIC_DRAW) {\n        val program: Program = checkNotNull(program)\n        program.bindBuffer(buffer)\n        bindBuffer(ARRAY_BUFFER, buffer)\n        if (buffer.isDirty) {\n            bufferData(ARRAY_BUFFER, buffer.data.toFloatArray(), usage)\n            buffer.isDirty = false\n        }\n        drawArrays(TRIANGLE_STRIP, 0, count)\n    }\n\n    fun drawLineLoop(buffer: Buffer, isSmooth: Boolean = false) {\n        val program: Program = checkNotNull(program)\n        program.bindBuffer(buffer)\n        if (buffer.isDirty) {\n            bufferData(ARRAY_BUFFER, buffer.data.toFloatArray(), STATIC_DRAW)\n            buffer.isDirty = false\n        }\n        if (isSmooth) {\n            enable(LINE_SMOOTH)\n        }\n        drawArrays(LINE_LOOP, 0, buffer.vertexCount)\n        if (isSmooth) {\n            disable(LINE_SMOOTH)\n        }\n    }\n\n    fun drawLines(buffer: Buffer, isSmooth: Boolean = false) {\n        val program: Program = checkNotNull(program)\n        program.bindBuffer(buffer)\n        if (buffer.isDirty) {\n            bufferData(ARRAY_BUFFER, buffer.data.toFloatArray(), STATIC_DRAW)\n            buffer.isDirty = false\n        }\n        if (isSmooth) {\n            enable(LINE_SMOOTH)\n        }\n        drawArrays(LINES, 0, buffer.vertexCount)\n        if (isSmooth) {\n            disable(LINE_SMOOTH)\n        }\n    }\n\n    fun drawLineStrip(buffer: Buffer, count: Int = buffer.vertexCount, isSmooth: Boolean = false) {\n        val program: Program = checkNotNull(program)\n        program.bindBuffer(buffer)\n        if (buffer.isDirty) {\n            bufferData(ARRAY_BUFFER, buffer.data.toFloatArray(), STATIC_DRAW)\n            buffer.isDirty = false\n        }\n        if (isSmooth) {\n            enable(LINE_SMOOTH)\n        }\n        drawArrays(LINE_STRIP, 0, count)\n        if (isSmooth) {\n            disable(LINE_SMOOTH)\n        }\n    }\n\n    fun scissor(camera: Camera, block: () -> Unit) {\n        if (window.useCamera) {\n            val (x1, y1, x2, y2) = camera.toScissorRectangle()\n            enableScissor(x1, y1, x2, y2)\n        }\n        block()\n        if (window.useCamera) {\n            disableScissor()\n        }\n    }\n\n    fun scissor(camera: Camera, scissor: Rectangle, isEnable: Boolean = true, block: () -> Unit) {\n        if (isEnable) {\n            enableScissorLocal(scissor, camera)\n        }\n        block()\n        if (isEnable) {\n            disableScissor()\n        }\n    }\n\n    fun enableScissor(rectangle: Rectangle) {\n        val (x1, y1, x2, y2) = rectangle\n        enableScissor(x1, y1, x2, y2)\n    }\n\n    fun enableScissorLocal(localRectangle: Rectangle, camera: Camera) {\n        val (x1, y1, x2, y2) = window.toScissorRectangle(camera, localRectangle, utilityVector)\n        enableScissor(x1, y1, x2, y2)\n    }\n\n    fun enableScissor(x1: Float, y1: Float, x2: Float, y2: Float) {\n        // flip\n        val y1: Float = window.surface.viewport.height - y1\n        val y2: Float = window.surface.viewport.height - y2\n\n        // round\n        var left: Int = when (precision) {\n            Precision.MEDIUM -> x1.prevIntMediumPrecision\n            else -> x1.roundToInt()\n        }\n        var top: Int = when (precision) {\n            Precision.MEDIUM -> y1.nextIntMediumPrecision\n            else -> y1.roundToInt()\n        }\n        var right: Int = when (precision) {\n            Precision.MEDIUM -> x2.nextIntMediumPrecision\n            else -> x2.roundToInt()\n        }\n        var bottom: Int = when (precision) {\n            Precision.MEDIUM -> y2.prevIntMediumPrecision\n            else -> y2.roundToInt()\n        }\n\n        // adjust\n        val prevRectangle: IntRectangle? = scissorStack.lastOrNull()\n        if (prevRectangle != null) {\n            val (prevLeft, prevTop, prevRight, prevBottom) = prevRectangle\n            left = max(left, prevLeft)\n            top = min(top, prevTop)\n            right = min(right, prevRight)\n            bottom = max(bottom, prevBottom)\n        }\n\n        // action\n        enable(SCISSOR_TEST)\n        val width: Int = right - left\n        val height: Int = top - bottom\n        scissor(left, bottom, width, height)\n        scissorStack.push(IntRectangle(left, top, right, bottom))\n    }\n\n    fun disableScissor() {\n        scissorStack.pop()\n        val prevRectangle: IntRectangle? = scissorStack.lastOrNull()\n        if (prevRectangle != null) {\n            val (left, top, right, bottom) = prevRectangle\n            enable(SCISSOR_TEST)\n            val width: Int = right - left\n            val height: Int = top - bottom\n            scissor(left, bottom, width, height)\n        } else {\n            disable(SCISSOR_TEST)\n        }\n    }\n\n    fun clearColorBuffer(red: Float, green: Float, blue: Float, alpha: Float) {\n        clearColor(red, green, blue, alpha)\n        clear(COLOR_BUFFER_BIT)\n    }\n\n    fun clearColorBufferAndDepthBuffer(red: Float, green: Float, blue: Float, alpha: Float) {\n        clearColor(red, green, blue, alpha)\n        enable(DEPTH_TEST)\n        clear(COLOR_BUFFER_BIT or DEPTH_BUFFER_BIT)\n    }\n\n}\n\n/*convenience*/\n\nexpect class Shader\nexpect class Texture\nexpect class UniformLocation\n\nfun Opengl.bindBufferData(buffer: Buffer, data: FloatArray, usage: Int) {\n    bindBuffer(ARRAY_BUFFER, buffer)\n    bufferData(ARRAY_BUFFER, data, usage)\n}","package featurea.opengl\n\nimport featurea.utils.exitProcess\nimport featurea.utils.isInstrumentationEnabled\nimport featurea.utils.log\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.shader.reader.Attributes\nimport featurea.shader.reader.ShaderSource\nimport featurea.shader.reader.offsetOf\nimport featurea.shader.reader.withLineNumbers\n\nabstract class Program(override val module: Module) : Component {\n\n    private val gl: Opengl = import(OpenglProxy)\n\n    val uniforms: Uniforms = Uniforms(this)\n    val attributes: Attributes = Attributes()\n\n    fun enableAttributes(type: Int = FLOAT) {\n        val stride: Int = attributes.vertexSizeInBytes\n        for (attribute in attributes) {\n            gl.enableVertexAttribArray(attribute.location)\n            gl.vertexAttributePointer(attribute.location, attribute.size, type, stride, attribute.offset)\n        }\n    }\n\n    fun createBuffer(drawCallLimit: Int = 0, verticesPerDraw: Int, isMedium: Boolean = false): Buffer {\n        val drawCallSize: Int = verticesPerDraw * attributes.vertexSize\n        val buffer: Buffer = gl.createBuffer(drawCallSize, isMedium)\n        buffer.ensureDrawCallLimit(drawCallLimit)\n        return buffer\n    }\n\n    fun compile(shaderPath: String, source: ShaderSource) {\n        /*\n        log(\"Graphics.linkShaders\")\n        log(vertexSource)\n        log(\"---\")\n        log(fragmentSource)\n        log(\"---\")\n        */\n        val program: Program = this\n        val (vertexShaderSource, pixelShaderSource, attributes) = source\n\n        val vertexShader: Shader = gl.createShader(VERTEX_SHADER)\n        gl.shaderSource(vertexShader, vertexShaderSource)\n        gl.compileShader(vertexShader)\n        if (gl.getShaderParameter(vertexShader, COMPILE_STATUS) == FALSE) {\n            log(\"${gl.getShaderInfoLog(vertexShader)}$shaderPath:vertex\\n${source.vertexShaderSource.withLineNumbers()}\")\n            if (isInstrumentationEnabled) exitProcess(1)\n        }\n\n        val pixelShader: Shader = gl.createShader(FRAGMENT_SHADER)\n        gl.shaderSource(pixelShader, pixelShaderSource)\n        gl.compileShader(pixelShader)\n        if (gl.getShaderParameter(pixelShader, COMPILE_STATUS) == FALSE) {\n            log(\"${gl.getShaderInfoLog(pixelShader)}$shaderPath:pixel\\n${source.pixelShaderSource.withLineNumbers()}\")\n            if (isInstrumentationEnabled) exitProcess(1)\n        }\n\n        gl.attachShader(program, vertexShader)\n        gl.attachShader(program, pixelShader)\n        gl.linkProgram(program)\n        if (gl.getProgramParameter(program, LINK_STATUS) == FALSE) {\n            log(\"${gl.getProgramInfoLog(program)}$shaderPath\")\n            if (isInstrumentationEnabled) exitProcess(1)\n        }\n\n        for ((index, attribute) in attributes.withIndex()) {\n            val location: Int = gl.getAttributeLocation(program, attribute.name)\n            check(location != -1)\n            attribute.location = location\n            attribute.offset = attributes.offsetOf(index)\n        }\n        program.attributes.init(attributes)\n\n        gl.deleteShader(vertexShader)\n        gl.deleteShader(pixelShader)\n    }\n\n    fun enable() {\n        gl.useProgram(this)\n        gl.program = this\n    }\n\n    fun disable() {\n        gl.useProgram(null)\n        gl.program = null\n        bindBuffer(null) // quickfix todo improve\n    }\n\n    fun bindBuffer(buffer: Buffer?) {\n        if (buffer != null) {\n            gl.bindBuffer(ARRAY_BUFFER, buffer)\n            val stride: Int = attributes.vertexSizeInBytes\n            for (attribute in attributes) {\n                gl.enableVertexAttribArray(attribute.location)\n                gl.vertexAttributePointer(attribute.location, attribute.size, FLOAT, stride, attribute.offset)\n            }\n        } else {\n            for (attribute in attributes) {\n                gl.disableVertexAttributeArray(attribute.location)\n            }\n            gl.bindBuffer(ARRAY_BUFFER, null)\n        }\n    }\n\n    fun bindTexture(name: String, slot: Int, texture: Texture?, sampling: Sampling = Sampling()) {\n        if (texture != null) {\n            // glsl: texture -> slot 0\n            uniforms[name] = slot // texture -> slot 0\n            // kotlin: texture -> slot 0\n            gl.activeTexture(TEXTURE0 + slot) // -> slot 0\n            gl.bindTexture(TEXTURE_2D, texture) // texture ->\n\n            gl.textureParameter(TEXTURE_2D, TEXTURE_WRAP_S, sampling.wrappingFunction.first)\n            gl.textureParameter(TEXTURE_2D, TEXTURE_WRAP_T, sampling.wrappingFunction.second)\n            gl.textureParameter(TEXTURE_2D, TEXTURE_MIN_FILTER, sampling.minificationFilter)\n            gl.textureParameter(TEXTURE_2D, TEXTURE_MAG_FILTER, sampling.magnificationFilter)\n        } else {\n            gl.bindTexture(TEXTURE_2D, null)\n        }\n    }\n\n}\n","package featurea.opengl\n\nimport featurea.utils.MutablePair\nimport featurea.utils.mto\n\nclass Sampling {\n    var wrappingFunction: MutablePair<Int, Int> = REPEAT mto REPEAT\n    var minificationFilter: Int = LINEAR\n    var magnificationFilter: Int = LINEAR\n}\n\nfun textureWrapOf(value: String): Int = when (value) {\n    \"CLAMP_TO_EDGE\" -> CLAMP_TO_EDGE\n    \"CLAMP_TO_BORDER\" -> CLAMP_TO_BORDER\n    \"MIRRORED_REPEAT\" -> MIRRORED_REPEAT\n    \"REPEAT\" -> REPEAT\n    \"MIRROR_CLAMP_TO_EDGE\" -> REPEAT\n    else -> error(\"value: $value\")\n}\n","package featurea.opengl\n\nimport featurea.utils.Color\nimport featurea.math.*\nimport featurea.runtime.import\n\n// https://stackoverflow.com/a/16622177/909169\nclass Uniforms(val program: Program) {\n\n    private val gl: Opengl = program.import(OpenglProxy)\n\n    operator fun set(name: String, b1: Boolean) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, if (b1) 1 else 0)\n    }\n\n    operator fun set(name: String, i1: Int) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, i1)\n    }\n\n    operator fun set(name: String, f1: Float) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, f1)\n    }\n\n    operator fun set(name: String, f1: Float, f2: Float) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, f1, f2)\n    }\n\n    operator fun set(name: String, f1: Float, f2: Float, f3: Float) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, f1, f2, f3)\n    }\n\n    operator fun set(name: String, f1: Float, f2: Float, f3: Float, f4: Float) {\n        val location: UniformLocation = findLocation(name)\n        gl.uniform(location, f1, f2, f3, f4)\n    }\n\n    operator fun set(name: String, color: Color) {\n        val location: UniformLocation = findLocation(name)\n        gl.uniform(location, color.red, color.green, color.blue, color.alpha)\n    }\n\n    operator fun set(name: String, matrix: Matrix4) {\n        val location: UniformLocation = findLocation(name)\n        gl.uniform(location, matrix)\n    }\n\n    operator fun set(name: String, vector: Vector2) {\n        val location: UniformLocation = findLocation(name)\n        gl.uniform(location, vector.x, vector.y) // quickfix todo\n    }\n\n    operator fun set(name: String, vector: Vector) {\n        val (x, y, z) = vector\n        val location: UniformLocation = findLocation(name)\n        gl.uniform(location, x, y, z)\n    }\n\n    operator fun set(name: String, size: Size) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, size.width, size.height)\n    }\n\n    operator fun set(name: String, rect: Rectangle) {\n        val location: UniformLocation = findLocation(name)\n        return gl.uniform(location, rect.x1, rect.y1, rect.x2, rect.y2)\n    }\n\n    operator fun set(name: String, sampler: Sampler) {\n        val location: UniformLocation = findLocation(name)\n        gl.uniform(location, sampler.slot)\n        gl.activeTexture(TEXTURE0 + sampler.slot)\n        gl.bindTexture(TEXTURE_2D, sampler.texture)\n        val sampling: Sampling = sampler.sampling\n        gl.textureParameter(TEXTURE_2D, TEXTURE_MIN_FILTER, sampling.minificationFilter)\n        gl.textureParameter(TEXTURE_2D, TEXTURE_MAG_FILTER, sampling.magnificationFilter)\n        gl.textureParameter(TEXTURE_2D, TEXTURE_WRAP_S, sampling.wrappingFunction.first)\n        gl.textureParameter(TEXTURE_2D, TEXTURE_WRAP_T, sampling.wrappingFunction.second)\n    }\n\n    /*internals*/\n\n    private val locations = mutableMapOf<String, UniformLocation>()\n\n    private fun findLocation(name: String): UniformLocation {\n        // existing\n        val existingLocation: UniformLocation? = locations[name]\n        if (existingLocation != null) {\n            return existingLocation\n        }\n\n        // newly created\n        val location: UniformLocation = gl.getUniformLocation(program, name)\n        locations[name] = location\n        return location\n    }\n\n}\n","package featurea.opengl\n\nimport featurea.runtime.Artifact\nimport featurea.runtime.Delegate\nimport featurea.runtime.DependencyBuilder\nimport featurea.runtime.Proxy\n\n/*dependencies*/\n\nexpect fun DependencyBuilder.includeExternals()\n\nval artifact = Artifact(\"featurea.opengl\") {\n    includeExternals()\n    include(featurea.window.artifact)\n\n    \"OpenglProxy\" to OpenglProxy::class\n}\n\nclass OpenglProxy(override var delegate: Opengl) : Proxy<Opengl> {\n    companion object : Delegate<Opengl>(OpenglProxy::class)\n}\n","package featurea.opengl\n\nimport featurea.js.HTMLCanvasElementProxy\nimport featurea.js.dynamicMapOf\nimport featurea.runtime.Component\nimport featurea.runtime.Provide\nimport featurea.runtime.import\nimport featurea.runtime.provide\nimport org.khronos.webgl.WebGLRenderingContext\nimport org.w3c.dom.HTMLCanvasElement\n\n// https://stackoverflow.com/a/39354174/909169\n@Provide(OpenglProxy::class)\nfun Component.provideOpenglProxy() {\n    val mainCanvas: HTMLCanvasElement = import(HTMLCanvasElementProxy)\n    val gl: OpenglImpl = OpenglImpl(module)\n    gl.context = mainCanvas.getContext(\"webgl\", dynamicMapOf(\"alpha\" to false)) as WebGLRenderingContext\n    provide(OpenglProxy(gl))\n}\n","package featurea.opengl\n\nimport featurea.utils.emptyString\nimport featurea.math.Matrix\nimport featurea.math.copyToArray16\nimport featurea.runtime.Module\nimport org.khronos.webgl.*\n\nclass BufferImpl(drawCallSize: Int, isMedium: Boolean, val instance: WebGLBuffer) : Buffer(drawCallSize, isMedium)\nclass ProgramImpl(module: Module, val instance: WebGLProgram) : Program(module)\nactual class Shader(val instance: WebGLShader)\nactual class Texture(val instance: WebGLTexture)\nactual class UniformLocation(val instance: WebGLUniformLocation?)\n\nclass OpenglImpl(module: Module) : Opengl(module) {\n\n    private val floatArray16: FloatArray = FloatArray(size = 16)\n\n    lateinit var context: WebGLRenderingContext\n\n    override fun activeTexture(texture: Int) {\n        context.activeTexture(texture)\n    }\n\n    override fun createProgram(): Program {\n        return ProgramImpl(module, instance = checkNotNull(context.createProgram()))\n    }\n\n    override fun bindAttributeLocation(program: Program, index: Int, name: String) {\n        program as ProgramImpl\n        context.bindAttribLocation(program.instance, index, name)\n    }\n\n    override fun attachShader(program: Program, shader: Shader) {\n        program as ProgramImpl\n        context.attachShader(program.instance, shader.instance)\n    }\n\n    override fun linkProgram(program: Program) {\n        program as ProgramImpl\n        context.linkProgram(program.instance)\n    }\n\n    override fun getProgramParameter(program: Program, parameter: Int): Int {\n        program as ProgramImpl\n        return context.getProgramParameter(program.instance, parameter).toIntCode()\n    }\n\n    override fun getShaderParameter(shader: Shader, parameter: Int): Int {\n        return context.getShaderParameter(shader.instance, parameter).toIntCode()\n    }\n\n    override fun getString(name: Int): String {\n        return context.getParameter(name) as String\n    }\n\n    override fun shaderSource(shader: Shader, source: String) {\n        context.shaderSource(shader.instance, source)\n    }\n\n    override fun compileShader(shader: Shader) {\n        context.compileShader(shader.instance)\n    }\n\n    override fun getProgramInfoLog(program: Program): String {\n        program as ProgramImpl\n        return context.getProgramInfoLog(program.instance) ?: emptyString\n    }\n\n    override fun getShaderInfoLog(shader: Shader): String {\n        return context.getShaderInfoLog(shader.instance) ?: emptyString\n    }\n\n    override fun useProgram(program: Program?) {\n        program as ProgramImpl?\n        context.useProgram(program?.instance)\n    }\n\n    override fun enableVertexAttribArray(index: Int) {\n        context.enableVertexAttribArray(index)\n    }\n\n    override fun vertexAttributePointer(index: Int, size: Int, type: Int, stride: Int, offset: Int) {\n        context.vertexAttribPointer(index, size, type, false, stride, offset)\n    }\n\n    override fun disableVertexAttributeArray(index: Int) {\n        context.disableVertexAttribArray(index)\n    }\n\n    override fun uniform(location: UniformLocation, matrix: Matrix) {\n        context.uniformMatrix4fv(location.instance, false, matrix.copyToArray16(floatArray16) as Float32Array)\n    }\n\n    override fun uniform(location: UniformLocation, float: Float) {\n        context.uniform1f(location.instance, float)\n    }\n\n    override fun uniform(location: UniformLocation, int: Int) {\n        context.uniform1i(location.instance, int)\n    }\n\n    override fun uniform(location: UniformLocation, float1: Float, float2: Float) {\n        context.uniform2f(location.instance, float1, float2)\n    }\n\n    override fun uniform(location: UniformLocation, float1: Float, float2: Float, float3: Float) {\n        context.uniform3f(location.instance, float1, float2, float3)\n    }\n\n    override fun uniform(location: UniformLocation, float1: Float, float2: Float, float3: Float, float4: Float) {\n        context.uniform4f(location.instance, float1, float2, float3, float4)\n    }\n\n    override fun getUniformLocation(program: Program, name: String): UniformLocation {\n        program as ProgramImpl\n        return UniformLocation(instance = context.getUniformLocation(program.instance, name))\n    }\n\n    override fun getAttributeLocation(program: Program, name: String): Int {\n        program as ProgramImpl\n        val location: Int = context.getAttribLocation(program.instance, name)\n        return location\n    }\n\n    override fun drawArrays(mode: Int, first: Int, count: Int) {\n        context.drawArrays(mode, first, count)\n    }\n\n    override fun drawElements(mode: Int, count: Int, type: Int, indices: IntArray) {\n        context.drawElements(mode, count, type, 0)\n    }\n\n    override fun createTexture(texturePath: String): Texture {\n        return Texture(checkNotNull(context.createTexture()))\n    }\n\n    override fun enable(capability: Int) {\n        if (hasCapability(capability)) {\n            context.enable(capability)\n        }\n    }\n\n    override fun cullFace(mode: Int) {\n        context.cullFace(mode)\n    }\n\n    override fun blendFunction(sourceFactor: Int, destinationFactor: Int) {\n        context.blendFunc(sourceFactor, destinationFactor)\n    }\n\n    override fun blendFunctionSeparate(\n        srcRgb: Int,\n        dstRgb: Int,\n        srcAlpha: Int,\n        dstAlpha: Int\n    ) {\n        context.blendFuncSeparate(srcRgb, dstRgb, srcAlpha, dstAlpha)\n\n    }\n\n    override fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int) {\n        context.blendEquationSeparate(modeRGB, modeAlpha)\n    }\n\n    override fun blendColor(red: Float, green: Float, blue: Float, alpha: Float) {\n        context.blendColor(red, green, blue, alpha)\n    }\n\n    override fun blendEquation(mode: Int) {\n        context.blendEquation(mode)\n    }\n\n    override fun bindTexture(target: Int, texture: Texture?) {\n        context.bindTexture(target, texture?.instance)\n    }\n\n    override fun textureParameter(target: Int, parameter: Int, value: Int) {\n        context.texParameteri(target, parameter, value)\n    }\n\n    override fun generateMipmap(target: Int) {\n        context.generateMipmap(target)\n    }\n\n    override fun disable(capability: Int) {\n        if (hasCapability(capability)) {\n            context.disable(capability)\n        }\n    }\n\n    override fun deleteTexture(texture: Texture) {\n        context.deleteTexture(texture.instance)\n    }\n\n    override fun deleteBuffer(buffer: Buffer) {\n        buffer as BufferImpl\n        context.deleteBuffer(buffer.instance)\n    }\n\n    override fun bindBuffer(target: Int, buffer: Buffer?) {\n        buffer as BufferImpl?\n        context.bindBuffer(target, buffer?.instance)\n    }\n\n    override fun bufferData(target: Int, data: FloatArray, usage: Int) {\n        @Suppress(\"UNCHECKED_CAST_TO_EXTERNAL_INTERFACE\", \"CAST_NEVER_SUCCEEDS\")\n        context.bufferData(target, data as BufferDataSource, usage)\n    }\n\n    override fun bufferData(target: Int, data: IntArray, usage: Int) {\n        @Suppress(\"UNCHECKED_CAST_TO_EXTERNAL_INTERFACE\", \"CAST_NEVER_SUCCEEDS\")\n        context.bufferData(target, data as BufferDataSource, usage)\n    }\n\n    override fun bufferSubData(target: Int, offset: Long, size: Long, data: FloatArray) {\n        @Suppress(\"UNCHECKED_CAST_TO_EXTERNAL_INTERFACE\", \"CAST_NEVER_SUCCEEDS\")\n        context.bufferSubData(target, offset.toInt(), data as BufferDataSource)\n    }\n\n    override fun viewport(x: Int, y: Int, width: Int, height: Int) {\n        context.viewport(x, y, width, height)\n    }\n\n    override fun clear(mask: Int) {\n        context.clear(mask)\n    }\n\n    override fun clearColor(red: Float, green: Float, blue: Float, alpha: Float) {\n        context.clearColor(red, green, blue, alpha)\n    }\n\n    override fun depthFunction(function: Int) {\n        context.depthFunc(function)\n    }\n\n    override fun createShader(type: Int): Shader {\n        return Shader(checkNotNull(context.createShader(type)))\n    }\n\n    override fun deleteShader(shader: Shader) {\n        context.deleteShader(shader.instance)\n    }\n\n    override fun scissor(x: Int, y: Int, width: Int, height: Int) {\n        context.scissor(x, y, width, height)\n    }\n\n    override fun lineWidth(width: Float) {\n        context.lineWidth(width)\n    }\n\n    override fun pixelStore(parameter: Int, value: Int) {\n        context.pixelStorei(parameter, value)\n    }\n\n    override fun createBuffer(drawCallSize: Int, isMedium: Boolean): Buffer {\n        return BufferImpl(drawCallSize, isMedium, checkNotNull(context.createBuffer()))\n    }\n\n    override fun polygonMode(face: Int, mode: Int) = error(\"stub\")\n\n}\n\n/*internals*/\n\nprivate val skippedCapabilities: List<Int> = listOf(TEXTURE_2D)\n\nprivate fun hasCapability(capability: Int): Boolean = !skippedCapabilities.contains(capability)\n\nprivate fun Any?.toIntCode(): Int = when (this) {\n    null -> 0\n    is Boolean -> if (this) 1 else 0\n    is Number -> toInt()\n    else -> -1\n}\n","package featurea.opengl\n\nimport featurea.runtime.DependencyBuilder\nimport featurea.window.WindowPlugin\n\nactual fun DependencyBuilder.includeExternals() {\n    WindowPlugin {\n        \"provideOpenglProxy\" to { provideOpenglProxy() }\n    }\n}\n","package featurea.shader.reader\n\nclass ShaderAttribute(val name: String, val size: Int) {\n    var location: Int = -1\n    var offset: Int = -1\n    override fun toString() = \"Attribute(name=$name, size=$size, location=$location, offset=$offset)\"\n}\n\nfun List<ShaderAttribute>.offsetOf(location: Int): Int {\n    if (location == 0) return 0\n    var result = 0\n    for (index in 1..location) {\n        result += this[index - 1].size * Float.SIZE_BYTES\n    }\n    return result\n}\n\nclass Attributes : Iterable<ShaderAttribute> {\n\n    private val data = mutableListOf<ShaderAttribute>()\n    var vertexSize: Int = -1\n        private set\n    var vertexSizeInBytes: Int = -1\n        private set\n\n    operator fun get(index: Int): ShaderAttribute {\n        return data[index]\n    }\n\n    override fun iterator(): Iterator<ShaderAttribute> {\n        return data.iterator()\n    }\n\n    fun init(attributes: List<ShaderAttribute>) {\n        data.clear()\n        data.addAll(attributes)\n        vertexSize = sumBy { it.size }\n        vertexSizeInBytes = vertexSize * Float.SIZE_BYTES\n    }\n\n}\n","package featurea.shader.reader\n\nimport featurea.*\nimport featurea.content.Resource\nimport featurea.content.ResourceReader\nimport featurea.content.shaderExtension\nimport featurea.runtime.Container\nimport featurea.utils.existsFile\nimport featurea.utils.extension\nimport featurea.utils.replaceSuffix\n\nclass ShaderReader(container: Container) : ResourceReader {\n\n    private val system: System = container.import()\n\n    override suspend fun readOrNull(resourcePath: String, bundle: Bundle?): Resource? {\n        if (resourcePath.extension != shaderExtension) return null\n        if (bundle == null) return Resource(resourcePath)\n\n        val transpiledResourcePath = resourcePath.replaceSuffix(\".shader\", \"Transpiled.shader\")\n        when {\n            system.existsFile(transpiledResourcePath) -> return Resource(transpiledResourcePath)\n            else -> return Resource(resourcePath)\n        }\n    }\n\n}\n","package featurea.shader.reader\n\nimport featurea.System\nimport featurea.shader.reader.ShaderSourceBlock.*\nimport featurea.utils.*\nimport kotlin.text.startsWith\n\n// https://stackoverflow.com/a/4430934/909169\n// https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\ndata class ShaderSource(\n    val vertexShaderSource: String,\n    val pixelShaderSource: String,\n    val attributes: List<ShaderAttribute>\n)\n\n// todo add support for `#import` directive\n// todo add support for `import` config\nfun transpileShaderSource(text: String): ShaderSource {\n    val commonBlock: StringBuilder = StringBuilder()\n\n    val vertexSource: StringBuilder = StringBuilder()\n    val vertexAttributes = ArrayList<ShaderAttribute>()\n    val vertexAttributesBlock: StringBuilder = StringBuilder()\n    val vertexUniformsBlock: StringBuilder = StringBuilder()\n    val vertexDefinesBlock: StringBuilder = StringBuilder()\n    val vertexBodyBlock: StringBuilder = StringBuilder()\n\n    val pixelSource: StringBuilder = StringBuilder()\n    val varyingAttributes = ArrayList<String>()\n    val varyingBlock: StringBuilder = StringBuilder()\n    val pixelUniformsBlock: StringBuilder = StringBuilder()\n    val pixelDefinesBlock: StringBuilder = StringBuilder()\n    val pixelBodyBlock: StringBuilder = StringBuilder()\n\n    var block: ShaderSourceBlock = COMMON\n    fun updateStep(line: String): Boolean {\n        if (line.startsWith(\"//\")) return false\n\n        if (line.startsWith(\"#shader vertex\")) {\n            block = VERTEX_DECLARATION\n        } else if (block == VERTEX_DECLARATION) {\n            block = VERTEX_UNIFORMS\n        }\n        if (block == VERTEX_UNIFORMS && line.contains(\"(\")) {\n            block = VERTEX_BODY\n        }\n        if (line.startsWith(\"#shader pixel\")) {\n            block = PIXEL_DECLARATION\n        } else if (block == PIXEL_DECLARATION) {\n            block = PIXEL_UNIFORMS\n        }\n        if (block == PIXEL_UNIFORMS && (line.contains(\"(\"))) {\n            block = PIXEL_BODY\n        }\n        return true\n    }\n\n    val lines: Sequence<String> = text.lineSequence()\n    for (line in lines) {\n        // filter\n        if (isInstrumentationEnabled) {\n            if (line.trim().startsWith(\"#transpile\")) continue\n        }\n\n        // action\n        if (!updateStep(line)) continue\n        when (block) {\n            COMMON -> {\n                commonBlock.appendLine(line)\n            }\n            VERTEX_UNIFORMS -> {\n                if (line.isBlank()) continue\n                else if (line.startsWith(\"#define \")) vertexDefinesBlock.appendLine(line)\n                else if (line.startsWith(\"struct \"))\n                else vertexUniformsBlock.append(\"uniform \").appendLine(line)\n            }\n            VERTEX_DECLARATION -> {\n                val declaration = line.replace(\"#shader vertex\", \"\").removePrefix(\"(\").removeSuffix(\")\")\n                if (declaration.isBlank()) continue\n                val tokens = declaration.split(\",\").map { it.trim() }\n                for (token in tokens) {\n                    val (type, name) = token.split(\" \")\n                    vertexAttributes.add(ShaderAttribute(name, sizeOf(type)))\n                    vertexAttributesBlock.append(\"attribute \").append(token).append(\";\").appendLine()\n                }\n            }\n            VERTEX_BODY -> {\n                val bodyLine = when {\n                    line.trim().startsWith(\"pixel.\") -> line.replace(\"pixel.\", \"pixel_\")\n                    else -> line\n                }\n                vertexBodyBlock.appendLine(bodyLine)\n            }\n            PIXEL_UNIFORMS -> {\n                if (line.isBlank()) continue\n                else if (line.startsWith(\"#define \")) pixelDefinesBlock.appendLine(line)\n                else pixelUniformsBlock.append(\"uniform \").appendLine(line)\n            }\n            PIXEL_DECLARATION -> {\n                val declaration = line.replace(\"#shader pixel\", \"\").removePrefix(\"(\").removeSuffix(\")\")\n                if (declaration.isBlank()) continue\n                val tokens = declaration.split(\",\").map { it.trim() }\n                for (token in tokens) {\n                    try {\n                        val (type, name) = token.split(\" \")\n                        varyingAttributes.add(name)\n                        varyingBlock.append(\"varying \").append(type).append(\" pixel_\").append(name).appendLine(\";\")\n                    } catch (e: Exception) {\n                        log(\"token: $token\")\n                        log(e)\n                    }\n                }\n            }\n            PIXEL_BODY -> {\n                var bodyLine: String = line\n                for (name in varyingAttributes) {\n                    bodyLine = bodyLine\n                        .replace(\"(${name} \", \"(pixel_${name} \")\n                        .replace(\"(${name},\", \"(pixel_${name},\")\n                        .replace(\"(${name}.\", \"(pixel_${name}.\")\n                        .replace(\"(${name})\", \"(pixel_${name})\")\n\n                        .replace(\" ${name} \", \" pixel_${name} \")\n                        .replace(\" ${name},\", \" pixel_${name},\")\n                        .replace(\" ${name}.\", \" pixel_${name}.\")\n                        .replace(\" ${name})\", \" pixel_${name})\")\n                        .replace(\" ${name};\", \" pixel_${name};\")\n                }\n                pixelBodyBlock.appendLine(bodyLine)\n            }\n        }\n    }\n\n    // result\n    vertexSource.apply {\n        if (!System.target.isDesktop) appendLine(\"precision highp float;\").appendLine()\n        if (vertexDefinesBlock.isNotBlank()) appendLine(vertexDefinesBlock)\n        if (vertexAttributesBlock.isNotBlank()) appendLine(vertexAttributesBlock)\n        if (varyingBlock.isNotBlank()) appendLine(varyingBlock)\n        if (commonBlock.isNotBlank()) appendLine(commonBlock)\n        if (vertexUniformsBlock.isNotBlank()) appendLine(vertexUniformsBlock)\n        appendLine(\"/*standard*/\").appendLine()\n        appendLine(glslBlock).appendLine()\n        if (isStandardShaderLibraryIncluded) {\n            if (System.target.isDesktop) {\n                appendLine(uniformsBlock).appendLine()\n            } else {\n                appendLine(uniformsMediumPrecisionBlock).appendLine()\n            }\n            appendLine(exportAllBlock).appendLine()\n        }\n        appendLine(\"/*source*/\").appendLine()\n        appendLine(vertexBodyBlock.trim())\n    }\n    pixelSource.apply {\n        if (!System.target.isDesktop) appendLine(\"precision mediump float;\").appendLine()\n        if (pixelDefinesBlock.isNotBlank()) appendLine(pixelDefinesBlock)\n        if (varyingBlock.isNotBlank()) appendLine(varyingBlock)\n        if (commonBlock.isNotBlank()) appendLine(commonBlock)\n        if (pixelUniformsBlock.isNotBlank()) appendLine(pixelUniformsBlock)\n        appendLine(\"/*standard*/\").appendLine()\n        appendLine(glslBlock).appendLine()\n        if (isStandardShaderLibraryIncluded) {\n            if (System.target.isDesktop) {\n                appendLine(uniformsBlock).appendLine()\n            } else {\n                appendLine(uniformsMediumPrecisionBlock).appendLine()\n            }\n            appendLine(exportAllBlock).appendLine()\n        }\n        appendLine(\"/*source*/\").appendLine()\n        appendLine(pixelBodyBlock.trim())\n    }\n    return ShaderSource(vertexSource.toString(), pixelSource.toString(), vertexAttributes)\n}\n\n/*internals*/\n\nprivate enum class ShaderSourceBlock {\n    COMMON,\n    VERTEX_DECLARATION,\n    VERTEX_UNIFORMS,\n    VERTEX_BODY,\n    PIXEL_DECLARATION,\n    PIXEL_UNIFORMS,\n    PIXEL_BODY,\n}\n\nprivate fun sizeOf(type: String): Int = when (type) {\n    \"int\" -> 1\n    \"float\" -> 1\n    \"vec2\" -> 2\n    \"vec3\" -> 3\n    \"vec4\" -> 4\n    else -> error(\"type: $type\")\n}\n\nfun String.withLineNumbers(): String {\n    val maxLength: Int = split(\"\\n\").size.toString().length\n    return split(\"\\n\").mapIndexed { index, line -> \"${(index + 1).toString().ensureLength(maxLength, \"0\")}: $line\" }\n        .joinToString(\"\\n\")\n}\n","// todo make this file automatically generated from `res/featurea/shader/*.c` files\npackage featurea.shader.reader\n\nval exportAllBlock: String by lazy { exportProperties.values.joinToString(\"\\n\\n\") }\n\nval glslBlock: String = \"\"\"\n    #define outPosition gl_Position\n    #define outColor gl_FragColor\n    #define PIXEL_POSITION gl_FragCoord\n\"\"\".trimIndent()\n\nval uniformsBlock: String = \"\"\"\n    uniform mat4 MODEL_MATRIX;\n    uniform mat4 VIEW_MATRIX;\n    uniform mat4 PROJECTION_MATRIX;\n    uniform mat4 VIEW_PROJECTION_MATRIX;\n    uniform vec2 VIEW_SCALE;\n    uniform vec2 WINDOW_SIZE;\n\"\"\".trimIndent()\n\n\nval uniformsMediumPrecisionBlock: String = \"\"\"\n    uniform mediump mat4 MODEL_MATRIX;\n    uniform mediump mat4 VIEW_MATRIX;\n    uniform mediump mat4 PROJECTION_MATRIX;\n    uniform mediump mat4 VIEW_PROJECTION_MATRIX;\n    uniform mediump vec2 VIEW_SCALE;\n    uniform mediump vec2 WINDOW_SIZE;\n\"\"\".trimIndent()\n\n// IMPORTANT order has meaning: 1. glsl, 2. uniforms, 3. the rest\nval exportProperties: Map<String, String> = linkedMapOf(\n\n    \"color.blend\" to \"\"\"\n        vec4 blend(vec4 color1, vec4 color2) {\n            vec3 mixColor = mix(color1.rgb, color2.rgb, color2.a);\n            return vec4(mixColor.rgb, color2.a);\n        }\n    \"\"\".trimIndent(),\n\n    \"color.srgb\" to \"\"\"\n        vec4 srgb(vec4 color) {\n            return pow(max(color, 0.0), vec4(1.0 / 2.2));\n        }\n    \"\"\".trimIndent(),\n\n    \"conversion.toPixelPerfectFloat\" to \"\"\"\n        float toPixelPerfectFloat(float value) {\n            return floor(value - 0.0009765625) + 0.5;\n        }\n    \"\"\".trimIndent(),\n\n    \"conversion.viewportPosition\" to \"\"\"\n        vec2 viewportPosition(vec2 point) {\n            vec2 result = (VIEW_MATRIX * vec4(point, 0, 1)).xy;\n            result.y = WINDOW_SIZE.y - result.y;\n            return result;\n        }\n    \"\"\".trimIndent(),\n\n    \"conversion.viewportX\" to \"\"\"\n        float viewportX(float x) {\n            x *= VIEW_SCALE.x;\n            return x;\n        }\n    \"\"\".trimIndent(),\n\n    \"conversion.viewportY\" to \"\"\"\n        float viewportY(float y) {\n            y *= VIEW_SCALE.y;\n            return y;\n        }\n    \"\"\".trimIndent(),\n\n    \"conversion.viewportSize\" to \"\"\"\n        vec2 viewportSize(vec2 size) {\n            size.x *= VIEW_SCALE.x;\n            size.y *= VIEW_SCALE.y;\n            return size;\n        }\n    \"\"\".trimIndent(),\n\n    \"math.PI\" to \"\"\"\n        const float PI = 3.141592;\n    \"\"\".trimIndent(),\n\n    \"math.degree\" to \"\"\"\n        float degree(vec2 vector) {\n            return atan(vector.y, vector.x) / PI * 180.0;\n        }\n    \"\"\".trimIndent(),\n\n    \"mvp\" to \"\"\"\n        vec2 m(vec2 position) {\n            return (MODEL_MATRIX * vec4(position, 0, 1)).xy;\n        }\n        \n        vec2 mv(vec2 position) {\n            return (VIEW_MATRIX * MODEL_MATRIX * vec4(position, 0, 1)).xy;\n        }\n        \n        vec4 mvp(vec2 position) {\n            return VIEW_PROJECTION_MATRIX * MODEL_MATRIX * vec4(position, 0, 1);\n        }\n    \"\"\".trimIndent(),\n\n    \"transform.inverse\" to \"\"\"\n        float inverse(float m) {\n            return 1.0 / m;\n        }\n\n        mat2 inverse(mat2 m) {\n            return mat2(m[1][1],-m[0][1], -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n        }\n\n        mat3 inverse(mat3 m) {\n            float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n            float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n            float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n            \n            float b01 = a22 * a11 - a12 * a21;\n            float b11 = -a22 * a10 + a12 * a20;\n            float b21 = a21 * a10 - a11 * a20;\n            \n            float det = a00 * b01 + a01 * b11 + a02 * b21;\n            \n            return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n                      b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n                      b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n        }\n\n        mat4 inverse(mat4 m) {\n            float\n                a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n                a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n                a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n                a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n                \n                b00 = a00 * a11 - a01 * a10,\n                b01 = a00 * a12 - a02 * a10,\n                b02 = a00 * a13 - a03 * a10,\n                b03 = a01 * a12 - a02 * a11,\n                b04 = a01 * a13 - a03 * a11,\n                b05 = a02 * a13 - a03 * a12,\n                b06 = a20 * a31 - a21 * a30,\n                b07 = a20 * a32 - a22 * a30,\n                b08 = a20 * a33 - a23 * a30,\n                b09 = a21 * a32 - a22 * a31,\n                b10 = a21 * a33 - a23 * a31,\n                b11 = a22 * a33 - a23 * a32,\n                \n                det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n            return mat4(\n                a11 * b11 - a12 * b10 + a13 * b09,\n                a02 * b10 - a01 * b11 - a03 * b09,\n                a31 * b05 - a32 * b04 + a33 * b03,\n                a22 * b04 - a21 * b05 - a23 * b03,\n                a12 * b08 - a10 * b11 - a13 * b07,\n                a00 * b11 - a02 * b08 + a03 * b07,\n                a32 * b02 - a30 * b05 - a33 * b01,\n                a20 * b05 - a22 * b02 + a23 * b01,\n                a10 * b10 - a11 * b08 + a13 * b06,\n                a01 * b08 - a00 * b10 - a03 * b06,\n                a30 * b04 - a31 * b02 + a33 * b00,\n                a21 * b02 - a20 * b04 - a23 * b00,\n                a11 * b07 - a10 * b09 - a12 * b06,\n                a00 * b09 - a01 * b07 + a02 * b06,\n                a31 * b01 - a30 * b03 - a32 * b00,\n                a20 * b03 - a21 * b01 + a22 * b00) / det;\n        }\n    \"\"\".trimIndent(),\n\n    \"transform.transpose\" to \"\"\"        \n        mat4 transpose(mat4 inMatrix) {\n            vec4 i0 = inMatrix[0];\n            vec4 i1 = inMatrix[1];\n            vec4 i2 = inMatrix[2];\n            vec4 i3 = inMatrix[3];\n\n            mat4 outMatrix = mat4(\n                vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w)\n            );\n\n            return outMatrix;\n        }\n    \"\"\".trimIndent(),\n\n    \"transform.ext_mat3\" to \"\"\"\n        mat3 ext_mat3(mat4 original) {\n            return mat3(original[0].xyz, original[1].xyz, original[2].xyz);\n        }\n    \"\"\".trimIndent(),\n\n    )\n","package featurea.shader.reader\n\nimport featurea.runtime.Artifact\n\nval artifact = Artifact(\"featurea.shader.reader\") {\n    include(featurea.content.artifact)\n\n    \"ShaderReader\" to ShaderReader::class\n\n    static {\n        provideComponent(ShaderReader(container = this))\n    }\n}\n",null,"package featurea.examples.webgl.js\n\nfun main() { \n    featurea.js.loadRootElementAsBody {\n        featurea.examples.webgl.test1() \n    } \n}\n","package featurea.examples.webgl\n\nimport featurea.app.applicationScope\nimport featurea.app.bootstrapApplication\nimport featurea.math.Size\nimport featurea.opengl.*\nimport featurea.runtime.import\nimport featurea.utils.isStandardShaderLibraryIncluded\nimport featurea.utils.log\nimport featurea.window.WindowListener\nimport featurea.window.notifyResize\n\nfun bootstrapTest(setup: Context.() -> Unit) = bootstrapApplication(export = components) {\n    val context: Context = applicationScope { import() }\n    with(context) {\n        window.size = Size(320, 480)\n        window.title = \"Draw Lines\"\n        // projectionMatrix\n        window.listeners.add(object : WindowListener {\n            override fun init() {\n                log(\"[bootstrapTest] init: ${gl.getString(SHADING_LANGUAGE_VERSION)}\")\n                gl.enable(BLEND)\n                gl.blendFunction(SRC_ALPHA, ONE_MINUS_SRC_ALPHA)\n            }\n\n            override fun resize(width: Int, height: Int) {\n                gl.viewport(0, 0, width, height)\n                window.surface.matrix.assignOrtho(0, 0, width, height)\n                window.surface.viewport.assign(width, height)\n                projectionMatrix.assign(window.surface.matrix).translate(window.surface.origin)\n            }\n        })\n\n        // load\n        isStandardShaderLibraryIncluded = false\n        loader.loadResources(bootstrapResources) {\n            setup()\n            window.notifyResize()\n        }\n    }\n}\n",null,null,"package featurea.examples.webgl\n\nimport featurea.app.ApplicationContext\nimport featurea.input.Input\nimport featurea.loader.Loader\nimport featurea.math.Matrix\nimport featurea.opengl.*\nimport featurea.runtime.import\nimport featurea.shader.ShaderContent\nimport featurea.window.Window\n\nclass Context : ApplicationContext() {\n\n    val gl: Opengl = import(OpenglProxy)\n    val input: Input = import()\n    val loader: Loader = import()\n    val shaderContent: ShaderContent = import()\n    val window: Window = import()\n\n    val projectionMatrix: Matrix = Matrix()\n\n}\n","package featurea.examples.webgl\n\nimport featurea.*\nimport featurea.examples.webgl.Resources.test1Shader\nimport featurea.input.Input\nimport featurea.loader.Loader\nimport featurea.math.Matrix\nimport featurea.math.Size\nimport featurea.opengl.*\nimport featurea.runtime.Artifact\nimport featurea.runtime.import\nimport featurea.shader.ShaderContent\nimport featurea.utils.featureaDir\nimport featurea.window.Window\nimport featurea.window.WindowListener\nimport featurea.window.notifyResize\n\n/*artifact*/\n\nval components = Artifact(\"featurea.examples.webgl\") {\n    includeContentRoot { \"$featureaDir/engine/examples/webgl/res\" }\n    include(featurea.input.artifact)\n    include(featurea.shader.artifact)\n\n    \"Context\" to { _ -> Context() }\n}\n\n/*content*/\n\nobject Resources {\n    val test1Shader = \"test1.shader\"\n}\n\nval bootstrapResources: List<String> = listOf(test1Shader)\n","package featurea.examples.webgl\n\nimport featurea.examples.webgl.Resources.test1Shader\nimport featurea.opengl.Buffer\nimport featurea.opengl.Program\n\nfun test1() = bootstrapTest {\n    val program: Program = shaderContent.findProgram(test1Shader)\n    val buffer: Buffer = program.createBuffer(drawCallLimit = 1, verticesPerDraw = 4)\n    buffer.apply {\n        vertex(-1f, 1f)\n        vertex(-1f, -1f)\n        vertex(1f, -1f)\n        vertex(1f, 1f)\n    }\n    app.repeatOnUpdate {\n        program.enable()\n        program.uniforms[\"viewport\"] = window.surface.viewport\n        gl.drawTriangleFan(buffer)\n        program.disable()\n    }\n}\n",null,"//! @version @js-joda/core - 3.1.0\n//! @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors\n//! @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n//! @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nfunction createErrorType(name, init, superErrorClass) {\n  if (superErrorClass === void 0) {\n    superErrorClass = Error;\n  }\n\n  function JsJodaException(message) {\n    if (!Error.captureStackTrace) {\n      this.stack = new Error().stack;\n    } else {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.message = message;\n    init && init.apply(this, arguments);\n\n    this.toString = function () {\n      return this.name + \": \" + this.message;\n    };\n  }\n\n  JsJodaException.prototype = Object.create(superErrorClass.prototype);\n  JsJodaException.prototype.name = name;\n  JsJodaException.prototype.constructor = JsJodaException;\n  return JsJodaException;\n}\n\nvar DateTimeException = createErrorType('DateTimeException', messageWithCause);\nvar DateTimeParseException = createErrorType('DateTimeParseException', messageForDateTimeParseException);\nvar UnsupportedTemporalTypeException = createErrorType('UnsupportedTemporalTypeException', null, DateTimeException);\nvar ArithmeticException = createErrorType('ArithmeticException');\nvar IllegalArgumentException = createErrorType('IllegalArgumentException');\nvar IllegalStateException = createErrorType('IllegalStateException');\nvar NullPointerException = createErrorType('NullPointerException');\n\nfunction messageWithCause(message, cause) {\n  if (cause === void 0) {\n    cause = null;\n  }\n\n  var msg = message || this.name;\n\n  if (cause !== null && cause instanceof Error) {\n    msg += '\\n-------\\nCaused by: ' + cause.stack + '\\n-------\\n';\n  }\n\n  this.message = msg;\n}\n\nfunction messageForDateTimeParseException(message, text, index, cause) {\n  if (text === void 0) {\n    text = '';\n  }\n\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (cause === void 0) {\n    cause = null;\n  }\n\n  var msg = message || this.name;\n  msg += ': ' + text + ', at index: ' + index;\n\n  if (cause !== null && cause instanceof Error) {\n    msg += '\\n-------\\nCaused by: ' + cause.stack + '\\n-------\\n';\n  }\n\n  this.message = msg;\n\n  this.parsedString = function () {\n    return text;\n  };\n\n  this.errorIndex = function () {\n    return index;\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nfunction assert(assertion, msg, error) {\n  if (!assertion) {\n    if (error) {\n      throw new error(msg);\n    } else {\n      throw new Error(msg);\n    }\n  }\n}\nfunction requireNonNull(value, parameterName) {\n  if (value == null) {\n    throw new NullPointerException(parameterName + ' must not be null');\n  }\n\n  return value;\n}\nfunction requireInstance(value, _class, parameterName) {\n  if (!(value instanceof _class)) {\n    throw new IllegalArgumentException(parameterName + ' must be an instance of ' + (_class.name ? _class.name : _class) + (value && value.constructor && value.constructor.name ? ', but is ' + value.constructor.name : ''));\n  }\n\n  return value;\n}\nfunction abstractMethodFail(methodName) {\n  throw new TypeError('abstract method \"' + methodName + '\" is not implemented');\n}\n\nvar assert$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    assert: assert,\n    requireNonNull: requireNonNull,\n    requireInstance: requireInstance,\n    abstractMethodFail: abstractMethodFail\n});\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar MIN_SAFE_INTEGER = -9007199254740991;\nvar MathUtil = function () {\n  function MathUtil() {}\n\n  MathUtil.intDiv = function intDiv(x, y) {\n    var r = x / y;\n    r = MathUtil.roundDown(r);\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.intMod = function intMod(x, y) {\n    var r = x - MathUtil.intDiv(x, y) * y;\n    r = MathUtil.roundDown(r);\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.roundDown = function roundDown(r) {\n    if (r < 0) {\n      return Math.ceil(r);\n    } else {\n      return Math.floor(r);\n    }\n  };\n\n  MathUtil.floorDiv = function floorDiv(x, y) {\n    var r = Math.floor(x / y);\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.floorMod = function floorMod(x, y) {\n    var r = x - MathUtil.floorDiv(x, y) * y;\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.safeAdd = function safeAdd(x, y) {\n    MathUtil.verifyInt(x);\n    MathUtil.verifyInt(y);\n\n    if (x === 0) {\n      return MathUtil.safeZero(y);\n    }\n\n    if (y === 0) {\n      return MathUtil.safeZero(x);\n    }\n\n    var r = MathUtil.safeToInt(x + y);\n\n    if (r === x || r === y) {\n      throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n    }\n\n    return r;\n  };\n\n  MathUtil.safeSubtract = function safeSubtract(x, y) {\n    MathUtil.verifyInt(x);\n    MathUtil.verifyInt(y);\n\n    if (x === 0 && y === 0) {\n      return 0;\n    } else if (x === 0) {\n      return MathUtil.safeZero(-1 * y);\n    } else if (y === 0) {\n      return MathUtil.safeZero(x);\n    }\n\n    return MathUtil.safeToInt(x - y);\n  };\n\n  MathUtil.safeMultiply = function safeMultiply(x, y) {\n    MathUtil.verifyInt(x);\n    MathUtil.verifyInt(y);\n\n    if (x === 1) {\n      return MathUtil.safeZero(y);\n    }\n\n    if (y === 1) {\n      return MathUtil.safeZero(x);\n    }\n\n    if (x === 0 || y === 0) {\n      return 0;\n    }\n\n    var r = MathUtil.safeToInt(x * y);\n\n    if (r / y !== x || x === MIN_SAFE_INTEGER && y === -1 || y === MIN_SAFE_INTEGER && x === -1) {\n      throw new ArithmeticException('Multiplication overflows: ' + x + ' * ' + y);\n    }\n\n    return r;\n  };\n\n  MathUtil.parseInt = function (_parseInt) {\n    function parseInt(_x) {\n      return _parseInt.apply(this, arguments);\n    }\n\n    parseInt.toString = function () {\n      return _parseInt.toString();\n    };\n\n    return parseInt;\n  }(function (value) {\n    var r = parseInt(value);\n    return MathUtil.safeToInt(r);\n  });\n\n  MathUtil.safeToInt = function safeToInt(value) {\n    MathUtil.verifyInt(value);\n    return MathUtil.safeZero(value);\n  };\n\n  MathUtil.verifyInt = function verifyInt(value) {\n    if (value == null) {\n      throw new ArithmeticException(\"Invalid value: '\" + value + \"', using null or undefined as argument\");\n    }\n\n    if (isNaN(value)) {\n      throw new ArithmeticException('Invalid int value, using NaN as argument');\n    }\n\n    if (value % 1 !== 0) {\n      throw new ArithmeticException(\"Invalid value: '\" + value + \"' is a float\");\n    }\n\n    if (value > MAX_SAFE_INTEGER || value < MIN_SAFE_INTEGER) {\n      throw new ArithmeticException('Calculation overflows an int: ' + value);\n    }\n  };\n\n  MathUtil.safeZero = function safeZero(value) {\n    return value === 0 ? 0 : +value;\n  };\n\n  MathUtil.compareNumbers = function compareNumbers(a, b) {\n    if (a < b) {\n      return -1;\n    }\n\n    if (a > b) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  MathUtil.smi = function smi(int) {\n    return int >>> 1 & 0x40000000 | int & 0xBFFFFFFF;\n  };\n\n  MathUtil.hash = function hash(number) {\n    if (number !== number || number === Infinity) {\n      return 0;\n    }\n\n    var result = number;\n\n    while (number > 0xFFFFFFFF) {\n      number /= 0xFFFFFFFF;\n      result ^= number;\n    }\n\n    return MathUtil.smi(result);\n  };\n\n  MathUtil.hashCode = function hashCode() {\n    var result = 17;\n\n    for (var _len = arguments.length, numbers = new Array(_len), _key = 0; _key < _len; _key++) {\n      numbers[_key] = arguments[_key];\n    }\n\n    for (var _i = 0, _numbers = numbers; _i < _numbers.length; _i++) {\n      var n = _numbers[_i];\n      result = (result << 5) - result + MathUtil.hash(n);\n    }\n\n    return MathUtil.hash(result);\n  };\n\n  return MathUtil;\n}();\nMathUtil.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nMathUtil.MIN_SAFE_INTEGER = MIN_SAFE_INTEGER;\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar Enum = function () {\n  function Enum(name) {\n    this._name = name;\n  }\n\n  var _proto = Enum.prototype;\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  _proto.toString = function toString() {\n    return this._name;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Enum;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalAmount = function () {\n  function TemporalAmount() {}\n\n  var _proto = TemporalAmount.prototype;\n\n  _proto.get = function get(unit) {\n    abstractMethodFail('get');\n  };\n\n  _proto.units = function units() {\n    abstractMethodFail('units');\n  };\n\n  _proto.addTo = function addTo(temporal) {\n    abstractMethodFail('addTo');\n  };\n\n  _proto.subtractFrom = function subtractFrom(temporal) {\n    abstractMethodFail('subtractFrom');\n  };\n\n  return TemporalAmount;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalUnit = function () {\n  function TemporalUnit() {}\n\n  var _proto = TemporalUnit.prototype;\n\n  _proto.duration = function duration() {\n    abstractMethodFail('duration');\n  };\n\n  _proto.isDurationEstimated = function isDurationEstimated() {\n    abstractMethodFail('isDurationEstimated');\n  };\n\n  _proto.isDateBased = function isDateBased() {\n    abstractMethodFail('isDateBased');\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    abstractMethodFail('isTimeBased');\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    abstractMethodFail('isSupportedBy');\n  };\n\n  _proto.addTo = function addTo(dateTime, periodToAdd) {\n    abstractMethodFail('addTo');\n  };\n\n  _proto.between = function between(temporal1, temporal2) {\n    abstractMethodFail('between');\n  };\n\n  return TemporalUnit;\n}();\n\nvar Duration = function (_TemporalAmount) {\n  _inheritsLoose(Duration, _TemporalAmount);\n\n  function Duration(seconds, nanos) {\n    var _this;\n\n    _this = _TemporalAmount.call(this) || this;\n    _this._seconds = MathUtil.safeToInt(seconds);\n    _this._nanos = MathUtil.safeToInt(nanos);\n    return _this;\n  }\n\n  Duration.ofDays = function ofDays(days) {\n    return Duration._create(MathUtil.safeMultiply(days, LocalTime.SECONDS_PER_DAY), 0);\n  };\n\n  Duration.ofHours = function ofHours(hours) {\n    return Duration._create(MathUtil.safeMultiply(hours, LocalTime.SECONDS_PER_HOUR), 0);\n  };\n\n  Duration.ofMinutes = function ofMinutes(minutes) {\n    return Duration._create(MathUtil.safeMultiply(minutes, LocalTime.SECONDS_PER_MINUTE), 0);\n  };\n\n  Duration.ofSeconds = function ofSeconds(seconds, nanoAdjustment) {\n    if (nanoAdjustment === void 0) {\n      nanoAdjustment = 0;\n    }\n\n    var secs = MathUtil.safeAdd(seconds, MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND));\n    var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n    return Duration._create(secs, nos);\n  };\n\n  Duration.ofMillis = function ofMillis(millis) {\n    var secs = MathUtil.intDiv(millis, 1000);\n    var mos = MathUtil.intMod(millis, 1000);\n\n    if (mos < 0) {\n      mos += 1000;\n      secs--;\n    }\n\n    return Duration._create(secs, mos * 1000000);\n  };\n\n  Duration.ofNanos = function ofNanos(nanos) {\n    var secs = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_SECOND);\n    var nos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_SECOND);\n\n    if (nos < 0) {\n      nos += LocalTime.NANOS_PER_SECOND;\n      secs--;\n    }\n\n    return this._create(secs, nos);\n  };\n\n  Duration.of = function of(amount, unit) {\n    return Duration.ZERO.plus(amount, unit);\n  };\n\n  Duration.from = function from(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount);\n    var duration = Duration.ZERO;\n    amount.units().forEach(function (unit) {\n      duration = duration.plus(amount.get(unit), unit);\n    });\n    return duration;\n  };\n\n  Duration.between = function between(startInclusive, endExclusive) {\n    requireNonNull(startInclusive, 'startInclusive');\n    requireNonNull(endExclusive, 'endExclusive');\n    var secs = startInclusive.until(endExclusive, ChronoUnit.SECONDS);\n    var nanos = 0;\n\n    if (startInclusive.isSupported(ChronoField.NANO_OF_SECOND) && endExclusive.isSupported(ChronoField.NANO_OF_SECOND)) {\n      try {\n        var startNos = startInclusive.getLong(ChronoField.NANO_OF_SECOND);\n        nanos = endExclusive.getLong(ChronoField.NANO_OF_SECOND) - startNos;\n\n        if (secs > 0 && nanos < 0) {\n          nanos += LocalTime.NANOS_PER_SECOND;\n        } else if (secs < 0 && nanos > 0) {\n          nanos -= LocalTime.NANOS_PER_SECOND;\n        } else if (secs === 0 && nanos !== 0) {\n          var adjustedEnd = endExclusive.with(ChronoField.NANO_OF_SECOND, startNos);\n          secs = startInclusive.until(adjustedEnd, ChronoUnit.SECONDS);\n        }\n      } catch (e) {}\n    }\n\n    return this.ofSeconds(secs, nanos);\n  };\n\n  Duration.parse = function parse(text) {\n    requireNonNull(text, 'text');\n    var PATTERN = new RegExp('([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?', 'i');\n    var matches = PATTERN.exec(text);\n\n    if (matches !== null) {\n      if ('T' === matches[3] === false) {\n        var negate = '-' === matches[1];\n        var dayMatch = matches[2];\n        var hourMatch = matches[4];\n        var minuteMatch = matches[5];\n        var secondMatch = matches[6];\n        var fractionMatch = matches[7];\n\n        if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {\n          var daysAsSecs = Duration._parseNumber(text, dayMatch, LocalTime.SECONDS_PER_DAY, 'days');\n\n          var hoursAsSecs = Duration._parseNumber(text, hourMatch, LocalTime.SECONDS_PER_HOUR, 'hours');\n\n          var minsAsSecs = Duration._parseNumber(text, minuteMatch, LocalTime.SECONDS_PER_MINUTE, 'minutes');\n\n          var seconds = Duration._parseNumber(text, secondMatch, 1, 'seconds');\n\n          var negativeSecs = secondMatch != null && secondMatch.charAt(0) === '-';\n\n          var nanos = Duration._parseFraction(text, fractionMatch, negativeSecs ? -1 : 1);\n\n          try {\n            return Duration._create(negate, daysAsSecs, hoursAsSecs, minsAsSecs, seconds, nanos);\n          } catch (ex) {\n            throw new DateTimeParseException('Text cannot be parsed to a Duration: overflow', text, 0, ex);\n          }\n        }\n      }\n    }\n\n    throw new DateTimeParseException('Text cannot be parsed to a Duration', text, 0);\n  };\n\n  Duration._parseNumber = function _parseNumber(text, parsed, multiplier, errorText) {\n    if (parsed == null) {\n      return 0;\n    }\n\n    try {\n      if (parsed[0] === '+') {\n        parsed = parsed.substring(1);\n      }\n\n      return MathUtil.safeMultiply(parseFloat(parsed), multiplier);\n    } catch (ex) {\n      throw new DateTimeParseException('Text cannot be parsed to a Duration: ' + errorText, text, 0, ex);\n    }\n  };\n\n  Duration._parseFraction = function _parseFraction(text, parsed, negate) {\n    if (parsed == null || parsed.length === 0) {\n      return 0;\n    }\n\n    parsed = (parsed + '000000000').substring(0, 9);\n    return parseFloat(parsed) * negate;\n  };\n\n  Duration._create = function _create() {\n    if (arguments.length <= 2) {\n      return Duration._createSecondsNanos(arguments[0], arguments[1]);\n    } else {\n      return Duration._createNegateDaysHoursMinutesSecondsNanos(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n    }\n  };\n\n  Duration._createNegateDaysHoursMinutesSecondsNanos = function _createNegateDaysHoursMinutesSecondsNanos(negate, daysAsSecs, hoursAsSecs, minsAsSecs, secs, nanos) {\n    var seconds = MathUtil.safeAdd(daysAsSecs, MathUtil.safeAdd(hoursAsSecs, MathUtil.safeAdd(minsAsSecs, secs)));\n\n    if (negate) {\n      return Duration.ofSeconds(seconds, nanos).negated();\n    }\n\n    return Duration.ofSeconds(seconds, nanos);\n  };\n\n  Duration._createSecondsNanos = function _createSecondsNanos(seconds, nanoAdjustment) {\n    if (seconds === void 0) {\n      seconds = 0;\n    }\n\n    if (nanoAdjustment === void 0) {\n      nanoAdjustment = 0;\n    }\n\n    if (seconds === 0 && nanoAdjustment === 0) {\n      return Duration.ZERO;\n    }\n\n    return new Duration(seconds, nanoAdjustment);\n  };\n\n  var _proto = Duration.prototype;\n\n  _proto.get = function get(unit) {\n    if (unit === ChronoUnit.SECONDS) {\n      return this._seconds;\n    } else if (unit === ChronoUnit.NANOS) {\n      return this._nanos;\n    } else {\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n  };\n\n  _proto.units = function units() {\n    return [ChronoUnit.SECONDS, ChronoUnit.NANOS];\n  };\n\n  _proto.isZero = function isZero() {\n    return this._seconds === 0 && this._nanos === 0;\n  };\n\n  _proto.isNegative = function isNegative() {\n    return this._seconds < 0;\n  };\n\n  _proto.seconds = function seconds() {\n    return this._seconds;\n  };\n\n  _proto.nano = function nano() {\n    return this._nanos;\n  };\n\n  _proto.withSeconds = function withSeconds(seconds) {\n    return Duration._create(seconds, this._nanos);\n  };\n\n  _proto.withNanos = function withNanos(nanoOfSecond) {\n    ChronoField.NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);\n    return Duration._create(this._seconds, nanoOfSecond);\n  };\n\n  _proto.plusDuration = function plusDuration(duration) {\n    requireNonNull(duration, 'duration');\n    return this.plus(duration.seconds(), duration.nano());\n  };\n\n  _proto.plus = function plus(durationOrNumber, unitOrNumber) {\n    if (arguments.length === 1) {\n      return this.plusDuration(durationOrNumber);\n    } else if (arguments.length === 2 && unitOrNumber instanceof TemporalUnit) {\n      return this.plusAmountUnit(durationOrNumber, unitOrNumber);\n    } else {\n      return this.plusSecondsNanos(durationOrNumber, unitOrNumber);\n    }\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n\n    if (unit === ChronoUnit.DAYS) {\n      return this.plusSecondsNanos(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY), 0);\n    }\n\n    if (unit.isDurationEstimated()) {\n      throw new UnsupportedTemporalTypeException('Unit must not have an estimated duration');\n    }\n\n    if (amountToAdd === 0) {\n      return this;\n    }\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this.plusSecondsNanos(MathUtil.intDiv(amountToAdd, 1000000 * 1000) * 1000, MathUtil.intMod(amountToAdd, 1000000 * 1000) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusMillis(amountToAdd);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n      }\n\n      return this.plusSecondsNanos(MathUtil.safeMultiply(unit.duration().seconds(), amountToAdd), 0);\n    }\n\n    var duration = unit.duration().multipliedBy(amountToAdd);\n    return this.plusSecondsNanos(duration.seconds(), duration.nano());\n  };\n\n  _proto.plusDays = function plusDays(daysToAdd) {\n    return this.plusSecondsNanos(MathUtil.safeMultiply(daysToAdd, LocalTime.SECONDS_PER_DAY), 0);\n  };\n\n  _proto.plusHours = function plusHours(hoursToAdd) {\n    return this.plusSecondsNanos(MathUtil.safeMultiply(hoursToAdd, LocalTime.SECONDS_PER_HOUR), 0);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutesToAdd) {\n    return this.plusSecondsNanos(MathUtil.safeMultiply(minutesToAdd, LocalTime.SECONDS_PER_MINUTE), 0);\n  };\n\n  _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n    return this.plusSecondsNanos(secondsToAdd, 0);\n  };\n\n  _proto.plusMillis = function plusMillis(millisToAdd) {\n    return this.plusSecondsNanos(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * 1000000);\n  };\n\n  _proto.plusNanos = function plusNanos(nanosToAdd) {\n    return this.plusSecondsNanos(0, nanosToAdd);\n  };\n\n  _proto.plusSecondsNanos = function plusSecondsNanos(secondsToAdd, nanosToAdd) {\n    requireNonNull(secondsToAdd, 'secondsToAdd');\n    requireNonNull(nanosToAdd, 'nanosToAdd');\n\n    if (secondsToAdd === 0 && nanosToAdd === 0) {\n      return this;\n    }\n\n    var epochSec = MathUtil.safeAdd(this._seconds, secondsToAdd);\n    epochSec = MathUtil.safeAdd(epochSec, MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND));\n    nanosToAdd = MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n    var nanoAdjustment = MathUtil.safeAdd(this._nanos, nanosToAdd);\n    return Duration.ofSeconds(epochSec, nanoAdjustment);\n  };\n\n  _proto.minus = function minus(durationOrNumber, unit) {\n    if (arguments.length === 1) {\n      return this.minusDuration(durationOrNumber);\n    } else {\n      return this.minusAmountUnit(durationOrNumber, unit);\n    }\n  };\n\n  _proto.minusDuration = function minusDuration(duration) {\n    requireNonNull(duration, 'duration');\n    var secsToSubtract = duration.seconds();\n    var nanosToSubtract = duration.nano();\n\n    if (secsToSubtract === MIN_SAFE_INTEGER) {\n      return this.plus(MAX_SAFE_INTEGER, -nanosToSubtract);\n    }\n\n    return this.plus(-secsToSubtract, -nanosToSubtract);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    return amountToSubtract === MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit) : this.plusAmountUnit(-amountToSubtract, unit);\n  };\n\n  _proto.minusDays = function minusDays(daysToSubtract) {\n    return daysToSubtract === MIN_SAFE_INTEGER ? this.plusDays(MAX_SAFE_INTEGER) : this.plusDays(-daysToSubtract);\n  };\n\n  _proto.minusHours = function minusHours(hoursToSubtract) {\n    return hoursToSubtract === MIN_SAFE_INTEGER ? this.plusHours(MAX_SAFE_INTEGER) : this.plusHours(-hoursToSubtract);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutesToSubtract) {\n    return minutesToSubtract === MIN_SAFE_INTEGER ? this.plusMinutes(MAX_SAFE_INTEGER) : this.plusMinutes(-minutesToSubtract);\n  };\n\n  _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n    return secondsToSubtract === MIN_SAFE_INTEGER ? this.plusSeconds(MAX_SAFE_INTEGER) : this.plusSeconds(-secondsToSubtract);\n  };\n\n  _proto.minusMillis = function minusMillis(millisToSubtract) {\n    return millisToSubtract === MIN_SAFE_INTEGER ? this.plusMillis(MAX_SAFE_INTEGER) : this.plusMillis(-millisToSubtract);\n  };\n\n  _proto.minusNanos = function minusNanos(nanosToSubtract) {\n    return nanosToSubtract === MIN_SAFE_INTEGER ? this.plusNanos(MAX_SAFE_INTEGER) : this.plusNanos(-nanosToSubtract);\n  };\n\n  _proto.multipliedBy = function multipliedBy(multiplicand) {\n    if (multiplicand === 0) {\n      return Duration.ZERO;\n    }\n\n    if (multiplicand === 1) {\n      return this;\n    }\n\n    var secs = MathUtil.safeMultiply(this._seconds, multiplicand);\n    var nos = MathUtil.safeMultiply(this._nanos, multiplicand);\n    secs = secs + MathUtil.intDiv(nos, LocalTime.NANOS_PER_SECOND);\n    nos = MathUtil.intMod(nos, LocalTime.NANOS_PER_SECOND);\n    return Duration.ofSeconds(secs, nos);\n  };\n\n  _proto.dividedBy = function dividedBy(divisor) {\n    if (divisor === 0) {\n      throw new ArithmeticException('Cannot divide by zero');\n    }\n\n    if (divisor === 1) {\n      return this;\n    }\n\n    var secs = MathUtil.intDiv(this._seconds, divisor);\n    var secsMod = MathUtil.roundDown((this._seconds / divisor - secs) * LocalTime.NANOS_PER_SECOND);\n    var nos = MathUtil.intDiv(this._nanos, divisor);\n    nos = secsMod + nos;\n    return Duration.ofSeconds(secs, nos);\n  };\n\n  _proto.negated = function negated() {\n    return this.multipliedBy(-1);\n  };\n\n  _proto.abs = function abs() {\n    return this.isNegative() ? this.negated() : this;\n  };\n\n  _proto.addTo = function addTo(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._seconds !== 0) {\n      temporal = temporal.plus(this._seconds, ChronoUnit.SECONDS);\n    }\n\n    if (this._nanos !== 0) {\n      temporal = temporal.plus(this._nanos, ChronoUnit.NANOS);\n    }\n\n    return temporal;\n  };\n\n  _proto.subtractFrom = function subtractFrom(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._seconds !== 0) {\n      temporal = temporal.minus(this._seconds, ChronoUnit.SECONDS);\n    }\n\n    if (this._nanos !== 0) {\n      temporal = temporal.minus(this._nanos, ChronoUnit.NANOS);\n    }\n\n    return temporal;\n  };\n\n  _proto.toDays = function toDays() {\n    return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_DAY);\n  };\n\n  _proto.toHours = function toHours() {\n    return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n  };\n\n  _proto.toMinutes = function toMinutes() {\n    return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n  };\n\n  _proto.toMillis = function toMillis() {\n    var millis = Math.round(MathUtil.safeMultiply(this._seconds, 1000));\n    millis = MathUtil.safeAdd(millis, MathUtil.intDiv(this._nanos, 1000000));\n    return millis;\n  };\n\n  _proto.toNanos = function toNanos() {\n    var totalNanos = MathUtil.safeMultiply(this._seconds, LocalTime.NANOS_PER_SECOND);\n    totalNanos = MathUtil.safeAdd(totalNanos, this._nanos);\n    return totalNanos;\n  };\n\n  _proto.compareTo = function compareTo(otherDuration) {\n    requireNonNull(otherDuration, 'otherDuration');\n    requireInstance(otherDuration, Duration, 'otherDuration');\n    var cmp = MathUtil.compareNumbers(this._seconds, otherDuration.seconds());\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return this._nanos - otherDuration.nano();\n  };\n\n  _proto.equals = function equals(otherDuration) {\n    if (this === otherDuration) {\n      return true;\n    }\n\n    if (otherDuration instanceof Duration) {\n      return this.seconds() === otherDuration.seconds() && this.nano() === otherDuration.nano();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    if (this === Duration.ZERO) {\n      return 'PT0S';\n    }\n\n    var hours = MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n    var minutes = MathUtil.intDiv(MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_HOUR), LocalTime.SECONDS_PER_MINUTE);\n    var secs = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n    var rval = 'PT';\n\n    if (hours !== 0) {\n      rval += hours + 'H';\n    }\n\n    if (minutes !== 0) {\n      rval += minutes + 'M';\n    }\n\n    if (secs === 0 && this._nanos === 0 && rval.length > 2) {\n      return rval;\n    }\n\n    if (secs < 0 && this._nanos > 0) {\n      if (secs === -1) {\n        rval += '-0';\n      } else {\n        rval += secs + 1;\n      }\n    } else {\n      rval += secs;\n    }\n\n    if (this._nanos > 0) {\n      rval += '.';\n      var nanoString;\n\n      if (secs < 0) {\n        nanoString = '' + (2 * LocalTime.NANOS_PER_SECOND - this._nanos);\n      } else {\n        nanoString = '' + (LocalTime.NANOS_PER_SECOND + this._nanos);\n      }\n\n      nanoString = nanoString.slice(1, nanoString.length);\n      rval += nanoString;\n\n      while (rval.charAt(rval.length - 1) === '0') {\n        rval = rval.slice(0, rval.length - 1);\n      }\n    }\n\n    rval += 'S';\n    return rval;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Duration;\n}(TemporalAmount);\nfunction _init() {\n  Duration.ZERO = new Duration(0, 0);\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\nvar YearConstants = function YearConstants() {};\nfunction _init$1() {\n  YearConstants.MIN_VALUE = -999999;\n  YearConstants.MAX_VALUE = 999999;\n}\n\nvar ChronoUnit = function (_TemporalUnit) {\n  _inheritsLoose(ChronoUnit, _TemporalUnit);\n\n  function ChronoUnit(name, estimatedDuration) {\n    var _this;\n\n    _this = _TemporalUnit.call(this) || this;\n    _this._name = name;\n    _this._duration = estimatedDuration;\n    return _this;\n  }\n\n  var _proto = ChronoUnit.prototype;\n\n  _proto.duration = function duration() {\n    return this._duration;\n  };\n\n  _proto.isDurationEstimated = function isDurationEstimated() {\n    return this.isDateBased() || this === ChronoUnit.FOREVER;\n  };\n\n  _proto.isDateBased = function isDateBased() {\n    return this.compareTo(ChronoUnit.DAYS) >= 0 && this !== ChronoUnit.FOREVER;\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    return this.compareTo(ChronoUnit.DAYS) < 0;\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    if (this === ChronoUnit.FOREVER) {\n      return false;\n    }\n\n    try {\n      temporal.plus(1, this);\n      return true;\n    } catch (e) {\n      try {\n        temporal.plus(-1, this);\n        return true;\n      } catch (e2) {\n        return false;\n      }\n    }\n  };\n\n  _proto.addTo = function addTo(temporal, amount) {\n    return temporal.plus(amount, this);\n  };\n\n  _proto.between = function between(temporal1, temporal2) {\n    return temporal1.until(temporal2, this);\n  };\n\n  _proto.toString = function toString() {\n    return this._name;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    return this.duration().compareTo(other.duration());\n  };\n\n  return ChronoUnit;\n}(TemporalUnit);\nfunction _init$2() {\n  ChronoUnit.NANOS = new ChronoUnit('Nanos', Duration.ofNanos(1));\n  ChronoUnit.MICROS = new ChronoUnit('Micros', Duration.ofNanos(1000));\n  ChronoUnit.MILLIS = new ChronoUnit('Millis', Duration.ofNanos(1000000));\n  ChronoUnit.SECONDS = new ChronoUnit('Seconds', Duration.ofSeconds(1));\n  ChronoUnit.MINUTES = new ChronoUnit('Minutes', Duration.ofSeconds(60));\n  ChronoUnit.HOURS = new ChronoUnit('Hours', Duration.ofSeconds(3600));\n  ChronoUnit.HALF_DAYS = new ChronoUnit('HalfDays', Duration.ofSeconds(43200));\n  ChronoUnit.DAYS = new ChronoUnit('Days', Duration.ofSeconds(86400));\n  ChronoUnit.WEEKS = new ChronoUnit('Weeks', Duration.ofSeconds(7 * 86400));\n  ChronoUnit.MONTHS = new ChronoUnit('Months', Duration.ofSeconds(31556952 / 12));\n  ChronoUnit.YEARS = new ChronoUnit('Years', Duration.ofSeconds(31556952));\n  ChronoUnit.DECADES = new ChronoUnit('Decades', Duration.ofSeconds(31556952 * 10));\n  ChronoUnit.CENTURIES = new ChronoUnit('Centuries', Duration.ofSeconds(31556952 * 100));\n  ChronoUnit.MILLENNIA = new ChronoUnit('Millennia', Duration.ofSeconds(31556952 * 1000));\n  ChronoUnit.ERAS = new ChronoUnit('Eras', Duration.ofSeconds(31556952 * (YearConstants.MAX_VALUE + 1)));\n  ChronoUnit.FOREVER = new ChronoUnit('Forever', Duration.ofSeconds(MathUtil.MAX_SAFE_INTEGER, 999999999));\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nvar TemporalField = function () {\n  function TemporalField() {}\n\n  var _proto = TemporalField.prototype;\n\n  _proto.isDateBased = function isDateBased() {\n    abstractMethodFail('isDateBased');\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    abstractMethodFail('isTimeBased');\n  };\n\n  _proto.baseUnit = function baseUnit() {\n    abstractMethodFail('baseUnit');\n  };\n\n  _proto.rangeUnit = function rangeUnit() {\n    abstractMethodFail('rangeUnit');\n  };\n\n  _proto.range = function range() {\n    abstractMethodFail('range');\n  };\n\n  _proto.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    abstractMethodFail('rangeRefinedBy');\n  };\n\n  _proto.getFrom = function getFrom(temporal) {\n    abstractMethodFail('getFrom');\n  };\n\n  _proto.adjustInto = function adjustInto(temporal, newValue) {\n    abstractMethodFail('adjustInto');\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    abstractMethodFail('isSupportedBy');\n  };\n\n  _proto.displayName = function displayName() {\n    abstractMethodFail('displayName');\n  };\n\n  _proto.equals = function equals(other) {\n    abstractMethodFail('equals');\n  };\n\n  _proto.name = function name() {\n    abstractMethodFail('name');\n  };\n\n  return TemporalField;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ValueRange = function () {\n  function ValueRange(minSmallest, minLargest, maxSmallest, maxLargest) {\n    assert(!(minSmallest > minLargest), 'Smallest minimum value \\'' + minSmallest + '\\' must be less than largest minimum value \\'' + minLargest + '\\'', IllegalArgumentException);\n    assert(!(maxSmallest > maxLargest), 'Smallest maximum value \\'' + maxSmallest + '\\' must be less than largest maximum value \\'' + maxLargest + '\\'', IllegalArgumentException);\n    assert(!(minLargest > maxLargest), 'Minimum value \\'' + minLargest + '\\' must be less than maximum value \\'' + maxLargest + '\\'', IllegalArgumentException);\n    this._minSmallest = minSmallest;\n    this._minLargest = minLargest;\n    this._maxLargest = maxLargest;\n    this._maxSmallest = maxSmallest;\n  }\n\n  var _proto = ValueRange.prototype;\n\n  _proto.isFixed = function isFixed() {\n    return this._minSmallest === this._minLargest && this._maxSmallest === this._maxLargest;\n  };\n\n  _proto.minimum = function minimum() {\n    return this._minSmallest;\n  };\n\n  _proto.largestMinimum = function largestMinimum() {\n    return this._minLargest;\n  };\n\n  _proto.maximum = function maximum() {\n    return this._maxLargest;\n  };\n\n  _proto.smallestMaximum = function smallestMaximum() {\n    return this._maxSmallest;\n  };\n\n  _proto.isValidValue = function isValidValue(value) {\n    return this.minimum() <= value && value <= this.maximum();\n  };\n\n  _proto.checkValidValue = function checkValidValue(value, field) {\n    var msg;\n\n    if (!this.isValidValue(value)) {\n      if (field != null) {\n        msg = 'Invalid value for ' + field + ' (valid values ' + this.toString() + '): ' + value;\n      } else {\n        msg = 'Invalid value (valid values ' + this.toString() + '): ' + value;\n      }\n\n      return assert(false, msg, DateTimeException);\n    }\n\n    return value;\n  };\n\n  _proto.checkValidIntValue = function checkValidIntValue(value, field) {\n    if (this.isValidIntValue(value) === false) {\n      throw new DateTimeException('Invalid int value for ' + field + ': ' + value);\n    }\n\n    return value;\n  };\n\n  _proto.isValidIntValue = function isValidIntValue(value) {\n    return this.isIntValue() && this.isValidValue(value);\n  };\n\n  _proto.isIntValue = function isIntValue() {\n    return this.minimum() >= MathUtil.MIN_SAFE_INTEGER && this.maximum() <= MathUtil.MAX_SAFE_INTEGER;\n  };\n\n  _proto.equals = function equals(other) {\n    if (other === this) {\n      return true;\n    }\n\n    if (other instanceof ValueRange) {\n      return this._minSmallest === other._minSmallest && this._minLargest === other._minLargest && this._maxSmallest === other._maxSmallest && this._maxLargest === other._maxLargest;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._minSmallest, this._minLargest, this._maxSmallest, this._maxLargest);\n  };\n\n  _proto.toString = function toString() {\n    var str = this.minimum() + (this.minimum() !== this.largestMinimum() ? '/' + this.largestMinimum() : '');\n    str += ' - ';\n    str += this.smallestMaximum() + (this.smallestMaximum() !== this.maximum() ? '/' + this.maximum() : '');\n    return str;\n  };\n\n  ValueRange.of = function of() {\n    if (arguments.length === 2) {\n      return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[1]);\n    } else if (arguments.length === 3) {\n      return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[2]);\n    } else if (arguments.length === 4) {\n      return new ValueRange(arguments[0], arguments[1], arguments[2], arguments[3]);\n    } else {\n      return assert(false, 'Invalid number of arguments ' + arguments.length, IllegalArgumentException);\n    }\n  };\n\n  return ValueRange;\n}();\n\nvar ChronoField = function (_TemporalField) {\n  _inheritsLoose(ChronoField, _TemporalField);\n\n  ChronoField.byName = function byName(fieldName) {\n    for (var prop in ChronoField) {\n      if (ChronoField[prop]) {\n        if (ChronoField[prop] instanceof ChronoField && ChronoField[prop].name() === fieldName) {\n          return ChronoField[prop];\n        }\n      }\n    }\n  };\n\n  function ChronoField(name, baseUnit, rangeUnit, range) {\n    var _this;\n\n    _this = _TemporalField.call(this) || this;\n    _this._name = name;\n    _this._baseUnit = baseUnit;\n    _this._rangeUnit = rangeUnit;\n    _this._range = range;\n    return _this;\n  }\n\n  var _proto = ChronoField.prototype;\n\n  _proto.name = function name() {\n    return this._name;\n  };\n\n  _proto.baseUnit = function baseUnit() {\n    return this._baseUnit;\n  };\n\n  _proto.rangeUnit = function rangeUnit() {\n    return this._rangeUnit;\n  };\n\n  _proto.range = function range() {\n    return this._range;\n  };\n\n  _proto.displayName = function displayName() {\n    return this.toString();\n  };\n\n  _proto.checkValidValue = function checkValidValue(value) {\n    return this.range().checkValidValue(value, this);\n  };\n\n  _proto.checkValidIntValue = function checkValidIntValue(value) {\n    return this.range().checkValidIntValue(value, this);\n  };\n\n  _proto.isDateBased = function isDateBased() {\n    var dateBased = this === ChronoField.DAY_OF_WEEK || this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH || this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR || this === ChronoField.DAY_OF_MONTH || this === ChronoField.DAY_OF_YEAR || this === ChronoField.EPOCH_DAY || this === ChronoField.ALIGNED_WEEK_OF_MONTH || this === ChronoField.ALIGNED_WEEK_OF_YEAR || this === ChronoField.MONTH_OF_YEAR || this === ChronoField.YEAR_OF_ERA || this === ChronoField.YEAR || this === ChronoField.ERA;\n    return dateBased;\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    var timeBased = this === ChronoField.NANO_OF_SECOND || this === ChronoField.NANO_OF_DAY || this === ChronoField.MICRO_OF_SECOND || this === ChronoField.MICRO_OF_DAY || this === ChronoField.MILLI_OF_SECOND || this === ChronoField.MILLI_OF_DAY || this === ChronoField.SECOND_OF_MINUTE || this === ChronoField.SECOND_OF_DAY || this === ChronoField.MINUTE_OF_HOUR || this === ChronoField.MINUTE_OF_DAY || this === ChronoField.HOUR_OF_AMPM || this === ChronoField.CLOCK_HOUR_OF_AMPM || this === ChronoField.HOUR_OF_DAY || this === ChronoField.CLOCK_HOUR_OF_DAY || this === ChronoField.AMPM_OF_DAY;\n    return timeBased;\n  };\n\n  _proto.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    return temporal.range(this);\n  };\n\n  _proto.getFrom = function getFrom(temporal) {\n    return temporal.getLong(this);\n  };\n\n  _proto.toString = function toString() {\n    return this.name();\n  };\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  _proto.adjustInto = function adjustInto(temporal, newValue) {\n    return temporal.with(this, newValue);\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(this);\n  };\n\n  return ChronoField;\n}(TemporalField);\nfunction _init$3() {\n  ChronoField.NANO_OF_SECOND = new ChronoField('NanoOfSecond', ChronoUnit.NANOS, ChronoUnit.SECONDS, ValueRange.of(0, 999999999));\n  ChronoField.NANO_OF_DAY = new ChronoField('NanoOfDay', ChronoUnit.NANOS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000000 - 1));\n  ChronoField.MICRO_OF_SECOND = new ChronoField('MicroOfSecond', ChronoUnit.MICROS, ChronoUnit.SECONDS, ValueRange.of(0, 999999));\n  ChronoField.MICRO_OF_DAY = new ChronoField('MicroOfDay', ChronoUnit.MICROS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000 - 1));\n  ChronoField.MILLI_OF_SECOND = new ChronoField('MilliOfSecond', ChronoUnit.MILLIS, ChronoUnit.SECONDS, ValueRange.of(0, 999));\n  ChronoField.MILLI_OF_DAY = new ChronoField('MilliOfDay', ChronoUnit.MILLIS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000 - 1));\n  ChronoField.SECOND_OF_MINUTE = new ChronoField('SecondOfMinute', ChronoUnit.SECONDS, ChronoUnit.MINUTES, ValueRange.of(0, 59));\n  ChronoField.SECOND_OF_DAY = new ChronoField('SecondOfDay', ChronoUnit.SECONDS, ChronoUnit.DAYS, ValueRange.of(0, 86400 - 1));\n  ChronoField.MINUTE_OF_HOUR = new ChronoField('MinuteOfHour', ChronoUnit.MINUTES, ChronoUnit.HOURS, ValueRange.of(0, 59));\n  ChronoField.MINUTE_OF_DAY = new ChronoField('MinuteOfDay', ChronoUnit.MINUTES, ChronoUnit.DAYS, ValueRange.of(0, 24 * 60 - 1));\n  ChronoField.HOUR_OF_AMPM = new ChronoField('HourOfAmPm', ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(0, 11));\n  ChronoField.CLOCK_HOUR_OF_AMPM = new ChronoField('ClockHourOfAmPm', ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(1, 12));\n  ChronoField.HOUR_OF_DAY = new ChronoField('HourOfDay', ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(0, 23));\n  ChronoField.CLOCK_HOUR_OF_DAY = new ChronoField('ClockHourOfDay', ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(1, 24));\n  ChronoField.AMPM_OF_DAY = new ChronoField('AmPmOfDay', ChronoUnit.HALF_DAYS, ChronoUnit.DAYS, ValueRange.of(0, 1));\n  ChronoField.DAY_OF_WEEK = new ChronoField('DayOfWeek', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n  ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH = new ChronoField('AlignedDayOfWeekInMonth', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n  ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR = new ChronoField('AlignedDayOfWeekInYear', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n  ChronoField.DAY_OF_MONTH = new ChronoField('DayOfMonth', ChronoUnit.DAYS, ChronoUnit.MONTHS, ValueRange.of(1, 28, 31), 'day');\n  ChronoField.DAY_OF_YEAR = new ChronoField('DayOfYear', ChronoUnit.DAYS, ChronoUnit.YEARS, ValueRange.of(1, 365, 366));\n  ChronoField.EPOCH_DAY = new ChronoField('EpochDay', ChronoUnit.DAYS, ChronoUnit.FOREVER, ValueRange.of(Math.floor(YearConstants.MIN_VALUE * 365.25), Math.floor(YearConstants.MAX_VALUE * 365.25)));\n  ChronoField.ALIGNED_WEEK_OF_MONTH = new ChronoField('AlignedWeekOfMonth', ChronoUnit.WEEKS, ChronoUnit.MONTHS, ValueRange.of(1, 4, 5));\n  ChronoField.ALIGNED_WEEK_OF_YEAR = new ChronoField('AlignedWeekOfYear', ChronoUnit.WEEKS, ChronoUnit.YEARS, ValueRange.of(1, 53));\n  ChronoField.MONTH_OF_YEAR = new ChronoField('MonthOfYear', ChronoUnit.MONTHS, ChronoUnit.YEARS, ValueRange.of(1, 12), 'month');\n  ChronoField.PROLEPTIC_MONTH = new ChronoField('ProlepticMonth', ChronoUnit.MONTHS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE * 12, YearConstants.MAX_VALUE * 12 + 11));\n  ChronoField.YEAR_OF_ERA = new ChronoField('YearOfEra', ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(1, YearConstants.MAX_VALUE, YearConstants.MAX_VALUE + 1));\n  ChronoField.YEAR = new ChronoField('Year', ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE, YearConstants.MAX_VALUE), 'year');\n  ChronoField.ERA = new ChronoField('Era', ChronoUnit.ERAS, ChronoUnit.FOREVER, ValueRange.of(0, 1));\n  ChronoField.INSTANT_SECONDS = new ChronoField('InstantSeconds', ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(MIN_SAFE_INTEGER, MAX_SAFE_INTEGER));\n  ChronoField.OFFSET_SECONDS = new ChronoField('OffsetSeconds', ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(-18 * 3600, 18 * 3600));\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalQueries = function () {\n  function TemporalQueries() {}\n\n  TemporalQueries.zoneId = function zoneId() {\n    return TemporalQueries.ZONE_ID;\n  };\n\n  TemporalQueries.chronology = function chronology() {\n    return TemporalQueries.CHRONO;\n  };\n\n  TemporalQueries.precision = function precision() {\n    return TemporalQueries.PRECISION;\n  };\n\n  TemporalQueries.zone = function zone() {\n    return TemporalQueries.ZONE;\n  };\n\n  TemporalQueries.offset = function offset() {\n    return TemporalQueries.OFFSET;\n  };\n\n  TemporalQueries.localDate = function localDate() {\n    return TemporalQueries.LOCAL_DATE;\n  };\n\n  TemporalQueries.localTime = function localTime() {\n    return TemporalQueries.LOCAL_TIME;\n  };\n\n  return TemporalQueries;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalAccessor = function () {\n  function TemporalAccessor() {}\n\n  var _proto = TemporalAccessor.prototype;\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.chronology() || _query === TemporalQueries.precision()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.get = function get(field) {\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (this.isSupported(field)) {\n        return field.range();\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  return TemporalAccessor;\n}();\n\nvar TemporalQuery = function (_Enum) {\n  _inheritsLoose(TemporalQuery, _Enum);\n\n  function TemporalQuery() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = TemporalQuery.prototype;\n\n  _proto.queryFrom = function queryFrom(temporal) {\n    abstractMethodFail('queryFrom');\n  };\n\n  return TemporalQuery;\n}(Enum);\nfunction createTemporalQuery(name, queryFromFunction) {\n  var ExtendedTemporalQuery = function (_TemporalQuery) {\n    _inheritsLoose(ExtendedTemporalQuery, _TemporalQuery);\n\n    function ExtendedTemporalQuery() {\n      return _TemporalQuery.apply(this, arguments) || this;\n    }\n\n    return ExtendedTemporalQuery;\n  }(TemporalQuery);\n\n  ExtendedTemporalQuery.prototype.queryFrom = queryFromFunction;\n  return new ExtendedTemporalQuery(name);\n}\n\nvar DayOfWeek = function (_TemporalAccessor) {\n  _inheritsLoose(DayOfWeek, _TemporalAccessor);\n\n  function DayOfWeek(ordinal, name) {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._ordinal = ordinal;\n    _this._name = name;\n    return _this;\n  }\n\n  var _proto = DayOfWeek.prototype;\n\n  _proto.ordinal = function ordinal() {\n    return this._ordinal;\n  };\n\n  _proto.name = function name() {\n    return this._name;\n  };\n\n  DayOfWeek.values = function values() {\n    return ENUMS.slice();\n  };\n\n  DayOfWeek.valueOf = function valueOf(name) {\n    var ordinal = 0;\n\n    for (ordinal; ordinal < ENUMS.length; ordinal++) {\n      if (ENUMS[ordinal].name() === name) {\n        break;\n      }\n    }\n\n    return DayOfWeek.of(ordinal + 1);\n  };\n\n  DayOfWeek.of = function of(dayOfWeek) {\n    if (dayOfWeek < 1 || dayOfWeek > 7) {\n      throw new DateTimeException('Invalid value for DayOfWeek: ' + dayOfWeek);\n    }\n\n    return ENUMS[dayOfWeek - 1];\n  };\n\n  DayOfWeek.from = function from(temporal) {\n    assert(temporal != null, 'temporal', NullPointerException);\n\n    if (temporal instanceof DayOfWeek) {\n      return temporal;\n    }\n\n    try {\n      return DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\n    } catch (ex) {\n      if (ex instanceof DateTimeException) {\n        throw new DateTimeException('Unable to obtain DayOfWeek from TemporalAccessor: ' + temporal + ', type ' + (temporal.constructor != null ? temporal.constructor.name : ''), ex);\n      } else {\n        throw ex;\n      }\n    }\n  };\n\n  _proto.value = function value() {\n    return this._ordinal + 1;\n  };\n\n  _proto.displayName = function displayName(style, locale) {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented yet!');\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.DAY_OF_WEEK;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field === ChronoField.DAY_OF_WEEK) {\n      return field.range();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    if (field === ChronoField.DAY_OF_WEEK) {\n      return this.value();\n    }\n\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field === ChronoField.DAY_OF_WEEK) {\n      return this.value();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.plus = function plus(days) {\n    var amount = MathUtil.floorMod(days, 7);\n    return ENUMS[MathUtil.floorMod(this._ordinal + (amount + 7), 7)];\n  };\n\n  _proto.minus = function minus(days) {\n    return this.plus(-1 * MathUtil.floorMod(days, 7));\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.DAYS;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    assert(_query != null, 'query', NullPointerException);\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    return temporal.with(ChronoField.DAY_OF_WEEK, this.value());\n  };\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  _proto.toString = function toString() {\n    return this._name;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, DayOfWeek, 'other');\n    return this._ordinal - other._ordinal;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return DayOfWeek;\n}(TemporalAccessor);\nvar ENUMS;\nfunction _init$4() {\n  DayOfWeek.MONDAY = new DayOfWeek(0, 'MONDAY');\n  DayOfWeek.TUESDAY = new DayOfWeek(1, 'TUESDAY');\n  DayOfWeek.WEDNESDAY = new DayOfWeek(2, 'WEDNESDAY');\n  DayOfWeek.THURSDAY = new DayOfWeek(3, 'THURSDAY');\n  DayOfWeek.FRIDAY = new DayOfWeek(4, 'FRIDAY');\n  DayOfWeek.SATURDAY = new DayOfWeek(5, 'SATURDAY');\n  DayOfWeek.SUNDAY = new DayOfWeek(6, 'SUNDAY');\n  DayOfWeek.FROM = createTemporalQuery('DayOfWeek.FROM', function (temporal) {\n    return DayOfWeek.from(temporal);\n  });\n  ENUMS = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY];\n}\n\nvar Month = function (_TemporalAccessor) {\n  _inheritsLoose(Month, _TemporalAccessor);\n\n  function Month(value, name) {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._value = MathUtil.safeToInt(value);\n    _this._name = name;\n    return _this;\n  }\n\n  var _proto = Month.prototype;\n\n  _proto.value = function value() {\n    return this._value;\n  };\n\n  _proto.ordinal = function ordinal() {\n    return this._value - 1;\n  };\n\n  _proto.name = function name() {\n    return this._name;\n  };\n\n  _proto.displayName = function displayName(style, locale) {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented yet!');\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (null === field) {\n      return false;\n    }\n\n    if (field instanceof ChronoField) {\n      return field === ChronoField.MONTH_OF_YEAR;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    if (field === ChronoField.MONTH_OF_YEAR) {\n      return this.value();\n    }\n\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field === ChronoField.MONTH_OF_YEAR) {\n      return this.value();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.plus = function plus(months) {\n    var amount = MathUtil.intMod(months, 12) + 12;\n    var newMonthVal = MathUtil.intMod(this.value() + amount, 12);\n    newMonthVal = newMonthVal === 0 ? 12 : newMonthVal;\n    return Month.of(newMonthVal);\n  };\n\n  _proto.minus = function minus(months) {\n    return this.plus(-1 * MathUtil.intMod(months, 12));\n  };\n\n  _proto.length = function length(leapYear) {\n    switch (this) {\n      case Month.FEBRUARY:\n        return leapYear ? 29 : 28;\n\n      case Month.APRIL:\n      case Month.JUNE:\n      case Month.SEPTEMBER:\n      case Month.NOVEMBER:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.minLength = function minLength() {\n    switch (this) {\n      case Month.FEBRUARY:\n        return 28;\n\n      case Month.APRIL:\n      case Month.JUNE:\n      case Month.SEPTEMBER:\n      case Month.NOVEMBER:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.maxLength = function maxLength() {\n    switch (this) {\n      case Month.FEBRUARY:\n        return 29;\n\n      case Month.APRIL:\n      case Month.JUNE:\n      case Month.SEPTEMBER:\n      case Month.NOVEMBER:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.firstDayOfYear = function firstDayOfYear(leapYear) {\n    var leap = leapYear ? 1 : 0;\n\n    switch (this) {\n      case Month.JANUARY:\n        return 1;\n\n      case Month.FEBRUARY:\n        return 32;\n\n      case Month.MARCH:\n        return 60 + leap;\n\n      case Month.APRIL:\n        return 91 + leap;\n\n      case Month.MAY:\n        return 121 + leap;\n\n      case Month.JUNE:\n        return 152 + leap;\n\n      case Month.JULY:\n        return 182 + leap;\n\n      case Month.AUGUST:\n        return 213 + leap;\n\n      case Month.SEPTEMBER:\n        return 244 + leap;\n\n      case Month.OCTOBER:\n        return 274 + leap;\n\n      case Month.NOVEMBER:\n        return 305 + leap;\n\n      case Month.DECEMBER:\n      default:\n        return 335 + leap;\n    }\n  };\n\n  _proto.firstMonthOfQuarter = function firstMonthOfQuarter() {\n    switch (this) {\n      case Month.JANUARY:\n      case Month.FEBRUARY:\n      case Month.MARCH:\n        return Month.JANUARY;\n\n      case Month.APRIL:\n      case Month.MAY:\n      case Month.JUNE:\n        return Month.APRIL;\n\n      case Month.JULY:\n      case Month.AUGUST:\n      case Month.SEPTEMBER:\n        return Month.JULY;\n\n      case Month.OCTOBER:\n      case Month.NOVEMBER:\n      case Month.DECEMBER:\n      default:\n        return Month.OCTOBER;\n    }\n  };\n\n  _proto.query = function query(_query) {\n    assert(_query != null, 'query() parameter must not be null', DateTimeException);\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.MONTHS;\n    }\n\n    return _TemporalAccessor.prototype.query.call(this, _query);\n  };\n\n  _proto.toString = function toString() {\n    switch (this) {\n      case Month.JANUARY:\n        return 'JANUARY';\n\n      case Month.FEBRUARY:\n        return 'FEBRUARY';\n\n      case Month.MARCH:\n        return 'MARCH';\n\n      case Month.APRIL:\n        return 'APRIL';\n\n      case Month.MAY:\n        return 'MAY';\n\n      case Month.JUNE:\n        return 'JUNE';\n\n      case Month.JULY:\n        return 'JULY';\n\n      case Month.AUGUST:\n        return 'AUGUST';\n\n      case Month.SEPTEMBER:\n        return 'SEPTEMBER';\n\n      case Month.OCTOBER:\n        return 'OCTOBER';\n\n      case Month.NOVEMBER:\n        return 'NOVEMBER';\n\n      case Month.DECEMBER:\n        return 'DECEMBER';\n\n      default:\n        return 'unknown Month, value: ' + this.value();\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.MONTH_OF_YEAR, this.value());\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Month, 'other');\n    return this._value - other._value;\n  };\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  Month.valueOf = function valueOf(name) {\n    var ordinal = 0;\n\n    for (ordinal; ordinal < MONTHS.length; ordinal++) {\n      if (MONTHS[ordinal].name() === name) {\n        break;\n      }\n    }\n\n    return Month.of(ordinal + 1);\n  };\n\n  Month.values = function values() {\n    return MONTHS.slice();\n  };\n\n  Month.of = function of(month) {\n    if (month < 1 || month > 12) {\n      assert(false, 'Invalid value for MonthOfYear: ' + month, DateTimeException);\n    }\n\n    return MONTHS[month - 1];\n  };\n\n  Month.from = function from(temporal) {\n    if (temporal instanceof Month) {\n      return temporal;\n    }\n\n    try {\n      return Month.of(temporal.get(ChronoField.MONTH_OF_YEAR));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain Month from TemporalAccessor: ' + temporal + ' of type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''), ex);\n    }\n  };\n\n  return Month;\n}(TemporalAccessor);\nvar MONTHS;\nfunction _init$5() {\n  Month.JANUARY = new Month(1, 'JANUARY');\n  Month.FEBRUARY = new Month(2, 'FEBRUARY');\n  Month.MARCH = new Month(3, 'MARCH');\n  Month.APRIL = new Month(4, 'APRIL');\n  Month.MAY = new Month(5, 'MAY');\n  Month.JUNE = new Month(6, 'JUNE');\n  Month.JULY = new Month(7, 'JULY');\n  Month.AUGUST = new Month(8, 'AUGUST');\n  Month.SEPTEMBER = new Month(9, 'SEPTEMBER');\n  Month.OCTOBER = new Month(10, 'OCTOBER');\n  Month.NOVEMBER = new Month(11, 'NOVEMBER');\n  Month.DECEMBER = new Month(12, 'DECEMBER');\n  MONTHS = [Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE, Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER];\n}\n\nvar PATTERN = /([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?/;\nvar Period = function (_TemporalAmount) {\n  _inheritsLoose(Period, _TemporalAmount);\n\n  function Period(years, months, days) {\n    var _this;\n\n    _this = _TemporalAmount.call(this) || this;\n\n    var _years = MathUtil.safeToInt(years);\n\n    var _months = MathUtil.safeToInt(months);\n\n    var _days = MathUtil.safeToInt(days);\n\n    if (_years === 0 && _months === 0 && _days === 0) {\n      if (!Period.ZERO) {\n        _this._years = _years;\n        _this._months = _months;\n        _this._days = _days;\n        Period.ZERO = _assertThisInitialized(_this);\n      }\n\n      return Period.ZERO || _assertThisInitialized(_this);\n    }\n\n    _this._years = _years;\n    _this._months = _months;\n    _this._days = _days;\n    return _this;\n  }\n\n  Period.ofYears = function ofYears(years) {\n    return Period.create(years, 0, 0);\n  };\n\n  Period.ofMonths = function ofMonths(months) {\n    return Period.create(0, months, 0);\n  };\n\n  Period.ofWeeks = function ofWeeks(weeks) {\n    return Period.create(0, 0, MathUtil.safeMultiply(weeks, 7));\n  };\n\n  Period.ofDays = function ofDays(days) {\n    return Period.create(0, 0, days);\n  };\n\n  Period.of = function of(years, months, days) {\n    return Period.create(years, months, days);\n  };\n\n  Period.from = function from(amount) {\n    if (amount instanceof Period) {\n      return amount;\n    }\n\n    requireNonNull(amount, 'amount');\n    var years = 0;\n    var months = 0;\n    var days = 0;\n    var units = amount.units();\n\n    for (var i = 0; i < units.length; i++) {\n      var unit = units[i];\n      var unitAmount = amount.get(unit);\n\n      if (unit === ChronoUnit.YEARS) {\n        years = MathUtil.safeToInt(unitAmount);\n      } else if (unit === ChronoUnit.MONTHS) {\n        months = MathUtil.safeToInt(unitAmount);\n      } else if (unit === ChronoUnit.DAYS) {\n        days = MathUtil.safeToInt(unitAmount);\n      } else {\n        throw new DateTimeException('Unit must be Years, Months or Days, but was ' + unit);\n      }\n    }\n\n    return Period.create(years, months, days);\n  };\n\n  Period.between = function between(startDate, endDate) {\n    requireNonNull(startDate, 'startDate');\n    requireNonNull(endDate, 'endDate');\n    requireInstance(startDate, LocalDate, 'startDate');\n    requireInstance(endDate, LocalDate, 'endDate');\n    return startDate.until(endDate);\n  };\n\n  Period.parse = function parse(text) {\n    requireNonNull(text, 'text');\n\n    try {\n      return Period._parse(text);\n    } catch (ex) {\n      if (ex instanceof ArithmeticException) {\n        throw new DateTimeParseException('Text cannot be parsed to a Period', text, 0, ex);\n      } else {\n        throw ex;\n      }\n    }\n  };\n\n  Period._parse = function _parse(text) {\n    var matches = PATTERN.exec(text);\n\n    if (matches != null) {\n      var negate = '-' === matches[1] ? -1 : 1;\n      var yearMatch = matches[2];\n      var monthMatch = matches[3];\n      var weekMatch = matches[4];\n      var dayMatch = matches[5];\n\n      if (yearMatch != null || monthMatch != null || weekMatch != null || dayMatch != null) {\n        var years = Period._parseNumber(text, yearMatch, negate);\n\n        var months = Period._parseNumber(text, monthMatch, negate);\n\n        var weeks = Period._parseNumber(text, weekMatch, negate);\n\n        var days = Period._parseNumber(text, dayMatch, negate);\n\n        days = MathUtil.safeAdd(days, MathUtil.safeMultiply(weeks, 7));\n        return Period.create(years, months, days);\n      }\n    }\n\n    throw new DateTimeParseException('Text cannot be parsed to a Period', text, 0);\n  };\n\n  Period._parseNumber = function _parseNumber(text, str, negate) {\n    if (str == null) {\n      return 0;\n    }\n\n    var val = MathUtil.parseInt(str);\n    return MathUtil.safeMultiply(val, negate);\n  };\n\n  Period.create = function create(years, months, days) {\n    return new Period(years, months, days);\n  };\n\n  var _proto = Period.prototype;\n\n  _proto.units = function units() {\n    return [ChronoUnit.YEARS, ChronoUnit.MONTHS, ChronoUnit.DAYS];\n  };\n\n  _proto.chronology = function chronology() {\n    return IsoChronology.INSTANCE;\n  };\n\n  _proto.get = function get(unit) {\n    if (unit === ChronoUnit.YEARS) {\n      return this._years;\n    }\n\n    if (unit === ChronoUnit.MONTHS) {\n      return this._months;\n    }\n\n    if (unit === ChronoUnit.DAYS) {\n      return this._days;\n    }\n\n    throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n  };\n\n  _proto.isZero = function isZero() {\n    return this === Period.ZERO;\n  };\n\n  _proto.isNegative = function isNegative() {\n    return this._years < 0 || this._months < 0 || this._days < 0;\n  };\n\n  _proto.years = function years() {\n    return this._years;\n  };\n\n  _proto.months = function months() {\n    return this._months;\n  };\n\n  _proto.days = function days() {\n    return this._days;\n  };\n\n  _proto.withYears = function withYears(years) {\n    if (years === this._years) {\n      return this;\n    }\n\n    return Period.create(years, this._months, this._days);\n  };\n\n  _proto.withMonths = function withMonths(months) {\n    if (months === this._months) {\n      return this;\n    }\n\n    return Period.create(this._years, months, this._days);\n  };\n\n  _proto.withDays = function withDays(days) {\n    if (days === this._days) {\n      return this;\n    }\n\n    return Period.create(this._years, this._months, days);\n  };\n\n  _proto.plus = function plus(amountToAdd) {\n    var amount = Period.from(amountToAdd);\n    return Period.create(MathUtil.safeAdd(this._years, amount._years), MathUtil.safeAdd(this._months, amount._months), MathUtil.safeAdd(this._days, amount._days));\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    return Period.create(MathUtil.safeToInt(MathUtil.safeAdd(this._years, yearsToAdd)), this._months, this._days);\n  };\n\n  _proto.plusMonths = function plusMonths(monthsToAdd) {\n    if (monthsToAdd === 0) {\n      return this;\n    }\n\n    return Period.create(this._years, MathUtil.safeToInt(MathUtil.safeAdd(this._months, monthsToAdd)), this._days);\n  };\n\n  _proto.plusDays = function plusDays(daysToAdd) {\n    if (daysToAdd === 0) {\n      return this;\n    }\n\n    return Period.create(this._years, this._months, MathUtil.safeToInt(MathUtil.safeAdd(this._days, daysToAdd)));\n  };\n\n  _proto.minus = function minus(amountToSubtract) {\n    var amount = Period.from(amountToSubtract);\n    return Period.create(MathUtil.safeSubtract(this._years, amount._years), MathUtil.safeSubtract(this._months, amount._months), MathUtil.safeSubtract(this._days, amount._days));\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return this.plusYears(-1 * yearsToSubtract);\n  };\n\n  _proto.minusMonths = function minusMonths(monthsToSubtract) {\n    return this.plusMonths(-1 * monthsToSubtract);\n  };\n\n  _proto.minusDays = function minusDays(daysToSubtract) {\n    return this.plusDays(-1 * daysToSubtract);\n  };\n\n  _proto.multipliedBy = function multipliedBy(scalar) {\n    if (this === Period.ZERO || scalar === 1) {\n      return this;\n    }\n\n    return Period.create(MathUtil.safeMultiply(this._years, scalar), MathUtil.safeMultiply(this._months, scalar), MathUtil.safeMultiply(this._days, scalar));\n  };\n\n  _proto.negated = function negated() {\n    return this.multipliedBy(-1);\n  };\n\n  _proto.normalized = function normalized() {\n    var totalMonths = this.toTotalMonths();\n    var splitYears = MathUtil.intDiv(totalMonths, 12);\n    var splitMonths = MathUtil.intMod(totalMonths, 12);\n\n    if (splitYears === this._years && splitMonths === this._months) {\n      return this;\n    }\n\n    return Period.create(MathUtil.safeToInt(splitYears), splitMonths, this._days);\n  };\n\n  _proto.toTotalMonths = function toTotalMonths() {\n    return this._years * 12 + this._months;\n  };\n\n  _proto.addTo = function addTo(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._years !== 0) {\n      if (this._months !== 0) {\n        temporal = temporal.plus(this.toTotalMonths(), ChronoUnit.MONTHS);\n      } else {\n        temporal = temporal.plus(this._years, ChronoUnit.YEARS);\n      }\n    } else if (this._months !== 0) {\n      temporal = temporal.plus(this._months, ChronoUnit.MONTHS);\n    }\n\n    if (this._days !== 0) {\n      temporal = temporal.plus(this._days, ChronoUnit.DAYS);\n    }\n\n    return temporal;\n  };\n\n  _proto.subtractFrom = function subtractFrom(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._years !== 0) {\n      if (this._months !== 0) {\n        temporal = temporal.minus(this.toTotalMonths(), ChronoUnit.MONTHS);\n      } else {\n        temporal = temporal.minus(this._years, ChronoUnit.YEARS);\n      }\n    } else if (this._months !== 0) {\n      temporal = temporal.minus(this._months, ChronoUnit.MONTHS);\n    }\n\n    if (this._days !== 0) {\n      temporal = temporal.minus(this._days, ChronoUnit.DAYS);\n    }\n\n    return temporal;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof Period) {\n      var other = obj;\n      return this._years === other._years && this._months === other._months && this._days === other._days;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._years, this._months, this._days);\n  };\n\n  _proto.toString = function toString() {\n    if (this === Period.ZERO) {\n      return 'P0D';\n    } else {\n      var buf = 'P';\n\n      if (this._years !== 0) {\n        buf += '' + this._years + 'Y';\n      }\n\n      if (this._months !== 0) {\n        buf += '' + this._months + 'M';\n      }\n\n      if (this._days !== 0) {\n        buf += '' + this._days + 'D';\n      }\n\n      return buf;\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Period;\n}(TemporalAmount);\nfunction _init$6() {\n  Period.ofDays(0);\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ParsePosition = function () {\n  function ParsePosition(index) {\n    this._index = index;\n    this._errorIndex = -1;\n  }\n\n  var _proto = ParsePosition.prototype;\n\n  _proto.getIndex = function getIndex() {\n    return this._index;\n  };\n\n  _proto.setIndex = function setIndex(index) {\n    this._index = index;\n  };\n\n  _proto.getErrorIndex = function getErrorIndex() {\n    return this._errorIndex;\n  };\n\n  _proto.setErrorIndex = function setErrorIndex(errorIndex) {\n    this._errorIndex = errorIndex;\n  };\n\n  return ParsePosition;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar EnumMap = function () {\n  function EnumMap() {\n    this._map = {};\n  }\n\n  var _proto = EnumMap.prototype;\n\n  _proto.putAll = function putAll(otherMap) {\n    for (var key in otherMap._map) {\n      this._map[key] = otherMap._map[key];\n    }\n\n    return this;\n  };\n\n  _proto.containsKey = function containsKey(key) {\n    return this._map.hasOwnProperty(key.name()) && this.get(key) !== undefined;\n  };\n\n  _proto.get = function get(key) {\n    return this._map[key.name()];\n  };\n\n  _proto.put = function put(key, val) {\n    return this.set(key, val);\n  };\n\n  _proto.set = function set(key, val) {\n    this._map[key.name()] = val;\n    return this;\n  };\n\n  _proto.retainAll = function retainAll(keyList) {\n    var map = {};\n\n    for (var i = 0; i < keyList.length; i++) {\n      var key = keyList[i].name();\n      map[key] = this._map[key];\n    }\n\n    this._map = map;\n    return this;\n  };\n\n  _proto.remove = function remove(key) {\n    var keyName = key.name();\n    var val = this._map[keyName];\n    this._map[keyName] = undefined;\n    return val;\n  };\n\n  _proto.keySet = function keySet() {\n    return this._map;\n  };\n\n  _proto.clear = function clear() {\n    this._map = {};\n  };\n\n  return EnumMap;\n}();\n\nvar ResolverStyle = function (_Enum) {\n  _inheritsLoose(ResolverStyle, _Enum);\n\n  function ResolverStyle() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  return ResolverStyle;\n}(Enum);\nResolverStyle.STRICT = new ResolverStyle('STRICT');\nResolverStyle.SMART = new ResolverStyle('SMART');\nResolverStyle.LENIENT = new ResolverStyle('LENIENT');\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalAdjuster = function () {\n  function TemporalAdjuster() {}\n\n  var _proto = TemporalAdjuster.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    abstractMethodFail('adjustInto');\n  };\n\n  return TemporalAdjuster;\n}();\n\nvar Temporal = function (_TemporalAccessor) {\n  _inheritsLoose(Temporal, _TemporalAccessor);\n\n  function Temporal() {\n    return _TemporalAccessor.apply(this, arguments) || this;\n  }\n\n  var _proto = Temporal.prototype;\n\n  _proto.isSupported = function isSupported(unit) {\n    abstractMethodFail('isSupported');\n  };\n\n  _proto.minus = function minus(p1, p2) {\n    if (arguments.length < 2) {\n      return this.minusAmount(p1);\n    } else {\n      return this.minusAmountUnit(p1, p2);\n    }\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    abstractMethodFail('minusAmount');\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    abstractMethodFail('minusAmountUnit');\n  };\n\n  _proto.plus = function plus(p1, p2) {\n    if (arguments.length < 2) {\n      return this.plusAmount(p1);\n    } else {\n      return this.plusAmountUnit(p1, p2);\n    }\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    abstractMethodFail('plusAmount');\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    abstractMethodFail('plusAmountUnit');\n  };\n\n  _proto.until = function until(endTemporal, unit) {\n    abstractMethodFail('until');\n  };\n\n  _proto.with = function _with(p1, p2) {\n    if (arguments.length < 2) {\n      return this.withAdjuster(p1);\n    } else {\n      return this.withFieldValue(p1, p2);\n    }\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    abstractMethodFail('withAdjuster');\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    abstractMethodFail('withFieldValue');\n  };\n\n  return Temporal;\n}(TemporalAccessor);\n\nvar DefaultInterfaceTemporal = function (_Temporal) {\n  _inheritsLoose(DefaultInterfaceTemporal, _Temporal);\n\n  function DefaultInterfaceTemporal() {\n    return _Temporal.apply(this, arguments) || this;\n  }\n\n  var _proto = DefaultInterfaceTemporal.prototype;\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    requireInstance(adjuster, TemporalAdjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n    return amountToSubtract === MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit).plusAmountUnit(1, unit) : this.plusAmount(-amountToSubtract, unit);\n  };\n\n  return DefaultInterfaceTemporal;\n}(Temporal);\n\nvar ChronoLocalDate = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(ChronoLocalDate, _DefaultInterfaceTemp);\n\n  function ChronoLocalDate() {\n    return _DefaultInterfaceTemp.apply(this, arguments) || this;\n  }\n\n  var _proto = ChronoLocalDate.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isDateBased();\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.chronology()) {\n      return this.chronology();\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.DAYS;\n    } else if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofEpochDay(this.toEpochDay());\n    } else if (_query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.EPOCH_DAY, this.toEpochDay());\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return ChronoLocalDate;\n}(DefaultInterfaceTemporal);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar StringUtil = function () {\n  function StringUtil() {}\n\n  StringUtil.startsWith = function startsWith(text, pattern) {\n    return text.indexOf(pattern) === 0;\n  };\n\n  StringUtil.hashCode = function hashCode(text) {\n    var len = text.length;\n\n    if (len === 0) {\n      return 0;\n    }\n\n    var hash = 0;\n\n    for (var i = 0; i < len; i++) {\n      var chr = text.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0;\n    }\n\n    return MathUtil.smi(hash);\n  };\n\n  return StringUtil;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneId = function () {\n  function ZoneId() {}\n\n  ZoneId.systemDefault = function systemDefault() {\n    throw new DateTimeException('not supported operation');\n  };\n\n  ZoneId.getAvailableZoneIds = function getAvailableZoneIds() {\n    throw new DateTimeException('not supported operation');\n  };\n\n  ZoneId.of = function of(zoneId) {\n    throw new DateTimeException('not supported operation' + zoneId);\n  };\n\n  ZoneId.ofOffset = function ofOffset(prefix, offset) {\n    throw new DateTimeException('not supported operation' + prefix + offset);\n  };\n\n  ZoneId.from = function from(temporal) {\n    throw new DateTimeException('not supported operation' + temporal);\n  };\n\n  var _proto = ZoneId.prototype;\n\n  _proto.id = function id() {\n    abstractMethodFail('ZoneId.id');\n  };\n\n  _proto.rules = function rules() {\n    abstractMethodFail('ZoneId.rules');\n  };\n\n  _proto.normalized = function normalized() {\n    var rules = this.rules();\n\n    if (rules.isFixedOffset()) {\n      return rules.offset(Instant.EPOCH);\n    }\n\n    return this;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ZoneId) {\n      return this.id() === other.id();\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return StringUtil.hashCode(this.id());\n  };\n\n  _proto.toString = function toString() {\n    return this.id();\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return ZoneId;\n}();\n\nvar ZoneRules = function () {\n  function ZoneRules() {}\n\n  ZoneRules.of = function of(offset) {\n    requireNonNull(offset, 'offset');\n    return new Fixed(offset);\n  };\n\n  var _proto = ZoneRules.prototype;\n\n  _proto.isFixedOffset = function isFixedOffset() {\n    abstractMethodFail('ZoneRules.isFixedOffset');\n  };\n\n  _proto.offset = function offset(instantOrLocalDateTime) {\n    if (instantOrLocalDateTime instanceof Instant) {\n      return this.offsetOfInstant(instantOrLocalDateTime);\n    } else {\n      return this.offsetOfLocalDateTime(instantOrLocalDateTime);\n    }\n  };\n\n  _proto.offsetOfInstant = function offsetOfInstant(instant) {\n    abstractMethodFail('ZoneRules.offsetInstant');\n  };\n\n  _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {\n    abstractMethodFail('ZoneRules.offsetOfEpochMilli');\n  };\n\n  _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {\n    abstractMethodFail('ZoneRules.offsetLocalDateTime');\n  };\n\n  _proto.validOffsets = function validOffsets(localDateTime) {\n    abstractMethodFail('ZoneRules.validOffsets');\n  };\n\n  _proto.transition = function transition(localDateTime) {\n    abstractMethodFail('ZoneRules.transition');\n  };\n\n  _proto.standardOffset = function standardOffset(instant) {\n    abstractMethodFail('ZoneRules.standardOffset');\n  };\n\n  _proto.daylightSavings = function daylightSavings(instant) {\n    abstractMethodFail('ZoneRules.daylightSavings');\n  };\n\n  _proto.isDaylightSavings = function isDaylightSavings(instant) {\n    abstractMethodFail('ZoneRules.isDaylightSavings');\n  };\n\n  _proto.isValidOffset = function isValidOffset(localDateTime, offset) {\n    abstractMethodFail('ZoneRules.isValidOffset');\n  };\n\n  _proto.nextTransition = function nextTransition(instant) {\n    abstractMethodFail('ZoneRules.nextTransition');\n  };\n\n  _proto.previousTransition = function previousTransition(instant) {\n    abstractMethodFail('ZoneRules.previousTransition');\n  };\n\n  _proto.transitions = function transitions() {\n    abstractMethodFail('ZoneRules.transitions');\n  };\n\n  _proto.transitionRules = function transitionRules() {\n    abstractMethodFail('ZoneRules.transitionRules');\n  };\n\n  _proto.toString = function toString() {\n    abstractMethodFail('ZoneRules.toString');\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return ZoneRules;\n}();\n\nvar Fixed = function (_ZoneRules) {\n  _inheritsLoose(Fixed, _ZoneRules);\n\n  function Fixed(offset) {\n    var _this;\n\n    _this = _ZoneRules.call(this) || this;\n    _this._offset = offset;\n    return _this;\n  }\n\n  var _proto2 = Fixed.prototype;\n\n  _proto2.isFixedOffset = function isFixedOffset() {\n    return true;\n  };\n\n  _proto2.offsetOfInstant = function offsetOfInstant() {\n    return this._offset;\n  };\n\n  _proto2.offsetOfEpochMilli = function offsetOfEpochMilli() {\n    return this._offset;\n  };\n\n  _proto2.offsetOfLocalDateTime = function offsetOfLocalDateTime() {\n    return this._offset;\n  };\n\n  _proto2.validOffsets = function validOffsets() {\n    return [this._offset];\n  };\n\n  _proto2.transition = function transition() {\n    return null;\n  };\n\n  _proto2.standardOffset = function standardOffset() {\n    return this._offset;\n  };\n\n  _proto2.daylightSavings = function daylightSavings() {\n    return Duration.ZERO;\n  };\n\n  _proto2.isDaylightSavings = function isDaylightSavings() {\n    return false;\n  };\n\n  _proto2.isValidOffset = function isValidOffset(localDateTime, offset) {\n    return this._offset.equals(offset);\n  };\n\n  _proto2.nextTransition = function nextTransition() {\n    return null;\n  };\n\n  _proto2.previousTransition = function previousTransition() {\n    return null;\n  };\n\n  _proto2.transitions = function transitions() {\n    return [];\n  };\n\n  _proto2.transitionRules = function transitionRules() {\n    return [];\n  };\n\n  _proto2.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof Fixed) {\n      return this._offset.equals(other._offset);\n    }\n\n    return false;\n  };\n\n  _proto2.toString = function toString() {\n    return 'FixedRules:' + this._offset.toString();\n  };\n\n  return Fixed;\n}(ZoneRules);\n\nvar SECONDS_CACHE = {};\nvar ID_CACHE = {};\nvar ZoneOffset = function (_ZoneId) {\n  _inheritsLoose(ZoneOffset, _ZoneId);\n\n  function ZoneOffset(totalSeconds) {\n    var _this;\n\n    _this = _ZoneId.call(this) || this;\n\n    ZoneOffset._validateTotalSeconds(totalSeconds);\n\n    _this._totalSeconds = MathUtil.safeToInt(totalSeconds);\n    _this._rules = ZoneRules.of(_assertThisInitialized(_this));\n    _this._id = ZoneOffset._buildId(totalSeconds);\n    return _this;\n  }\n\n  var _proto = ZoneOffset.prototype;\n\n  _proto.totalSeconds = function totalSeconds() {\n    return this._totalSeconds;\n  };\n\n  _proto.id = function id() {\n    return this._id;\n  };\n\n  ZoneOffset._buildId = function _buildId(totalSeconds) {\n    if (totalSeconds === 0) {\n      return 'Z';\n    } else {\n      var absTotalSeconds = Math.abs(totalSeconds);\n      var absHours = MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_HOUR);\n      var absMinutes = MathUtil.intMod(MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n      var buf = '' + (totalSeconds < 0 ? '-' : '+') + (absHours < 10 ? '0' : '') + absHours + (absMinutes < 10 ? ':0' : ':') + absMinutes;\n      var absSeconds = MathUtil.intMod(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE);\n\n      if (absSeconds !== 0) {\n        buf += (absSeconds < 10 ? ':0' : ':') + absSeconds;\n      }\n\n      return buf;\n    }\n  };\n\n  ZoneOffset._validateTotalSeconds = function _validateTotalSeconds(totalSeconds) {\n    if (Math.abs(totalSeconds) > ZoneOffset.MAX_SECONDS) {\n      throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n    }\n  };\n\n  ZoneOffset._validate = function _validate(hours, minutes, seconds) {\n    if (hours < -18 || hours > 18) {\n      throw new DateTimeException('Zone offset hours not in valid range: value ' + hours + ' is not in the range -18 to 18');\n    }\n\n    if (hours > 0) {\n      if (minutes < 0 || seconds < 0) {\n        throw new DateTimeException('Zone offset minutes and seconds must be positive because hours is positive');\n      }\n    } else if (hours < 0) {\n      if (minutes > 0 || seconds > 0) {\n        throw new DateTimeException('Zone offset minutes and seconds must be negative because hours is negative');\n      }\n    } else if (minutes > 0 && seconds < 0 || minutes < 0 && seconds > 0) {\n      throw new DateTimeException('Zone offset minutes and seconds must have the same sign');\n    }\n\n    if (Math.abs(minutes) > 59) {\n      throw new DateTimeException('Zone offset minutes not in valid range: abs(value) ' + Math.abs(minutes) + ' is not in the range 0 to 59');\n    }\n\n    if (Math.abs(seconds) > 59) {\n      throw new DateTimeException('Zone offset seconds not in valid range: abs(value) ' + Math.abs(seconds) + ' is not in the range 0 to 59');\n    }\n\n    if (Math.abs(hours) === 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {\n      throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n    }\n  };\n\n  ZoneOffset.of = function of(offsetId) {\n    requireNonNull(offsetId, 'offsetId');\n    var offset = ID_CACHE[offsetId];\n\n    if (offset != null) {\n      return offset;\n    }\n\n    var hours, minutes, seconds;\n\n    switch (offsetId.length) {\n      case 2:\n        offsetId = offsetId[0] + '0' + offsetId[1];\n\n      case 3:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = 0;\n        seconds = 0;\n        break;\n\n      case 5:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n        seconds = 0;\n        break;\n\n      case 6:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n        seconds = 0;\n        break;\n\n      case 7:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n        seconds = ZoneOffset._parseNumber(offsetId, 5, false);\n        break;\n\n      case 9:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n        seconds = ZoneOffset._parseNumber(offsetId, 7, true);\n        break;\n\n      default:\n        throw new DateTimeException('Invalid ID for ZoneOffset, invalid format: ' + offsetId);\n    }\n\n    var first = offsetId[0];\n\n    if (first !== '+' && first !== '-') {\n      throw new DateTimeException('Invalid ID for ZoneOffset, plus/minus not found when expected: ' + offsetId);\n    }\n\n    if (first === '-') {\n      return ZoneOffset.ofHoursMinutesSeconds(-hours, -minutes, -seconds);\n    } else {\n      return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, seconds);\n    }\n  };\n\n  ZoneOffset._parseNumber = function _parseNumber(offsetId, pos, precededByColon) {\n    if (precededByColon && offsetId[pos - 1] !== ':') {\n      throw new DateTimeException('Invalid ID for ZoneOffset, colon not found when expected: ' + offsetId);\n    }\n\n    var ch1 = offsetId[pos];\n    var ch2 = offsetId[pos + 1];\n\n    if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {\n      throw new DateTimeException('Invalid ID for ZoneOffset, non numeric characters found: ' + offsetId);\n    }\n\n    return (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n  };\n\n  ZoneOffset.ofHours = function ofHours(hours) {\n    return ZoneOffset.ofHoursMinutesSeconds(hours, 0, 0);\n  };\n\n  ZoneOffset.ofHoursMinutes = function ofHoursMinutes(hours, minutes) {\n    return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, 0);\n  };\n\n  ZoneOffset.ofHoursMinutesSeconds = function ofHoursMinutesSeconds(hours, minutes, seconds) {\n    ZoneOffset._validate(hours, minutes, seconds);\n\n    var totalSeconds = hours * LocalTime.SECONDS_PER_HOUR + minutes * LocalTime.SECONDS_PER_MINUTE + seconds;\n    return ZoneOffset.ofTotalSeconds(totalSeconds);\n  };\n\n  ZoneOffset.ofTotalMinutes = function ofTotalMinutes(totalMinutes) {\n    var totalSeconds = totalMinutes * LocalTime.SECONDS_PER_MINUTE;\n    return ZoneOffset.ofTotalSeconds(totalSeconds);\n  };\n\n  ZoneOffset.ofTotalSeconds = function ofTotalSeconds(totalSeconds) {\n    if (totalSeconds % (15 * LocalTime.SECONDS_PER_MINUTE) === 0) {\n      var totalSecs = totalSeconds;\n      var result = SECONDS_CACHE[totalSecs];\n\n      if (result == null) {\n        result = new ZoneOffset(totalSeconds);\n        SECONDS_CACHE[totalSecs] = result;\n        ID_CACHE[result.id()] = result;\n      }\n\n      return result;\n    } else {\n      return new ZoneOffset(totalSeconds);\n    }\n  };\n\n  _proto.rules = function rules() {\n    return this._rules;\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field === ChronoField.OFFSET_SECONDS) {\n      return this._totalSeconds;\n    } else if (field instanceof ChronoField) {\n      throw new DateTimeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n      return this;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.precision() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.OFFSET_SECONDS, this._totalSeconds);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    return other._totalSeconds - this._totalSeconds;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof ZoneOffset) {\n      return this._totalSeconds === obj._totalSeconds;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._totalSeconds;\n  };\n\n  _proto.toString = function toString() {\n    return this._id;\n  };\n\n  return ZoneOffset;\n}(ZoneId);\nfunction _init$7() {\n  ZoneOffset.MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\n  ZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\n  ZoneOffset.MIN = ZoneOffset.ofTotalSeconds(-ZoneOffset.MAX_SECONDS);\n  ZoneOffset.MAX = ZoneOffset.ofTotalSeconds(ZoneOffset.MAX_SECONDS);\n}\n\nvar DateTimeBuilder = function (_TemporalAccessor) {\n  _inheritsLoose(DateTimeBuilder, _TemporalAccessor);\n\n  DateTimeBuilder.create = function create(field, value) {\n    var dtb = new DateTimeBuilder();\n\n    dtb._addFieldValue(field, value);\n\n    return dtb;\n  };\n\n  function DateTimeBuilder() {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this.fieldValues = new EnumMap();\n    _this.chrono = null;\n    _this.zone = null;\n    _this.date = null;\n    _this.time = null;\n    _this.leapSecond = false;\n    _this.excessDays = null;\n    return _this;\n  }\n\n  var _proto = DateTimeBuilder.prototype;\n\n  _proto.getFieldValue0 = function getFieldValue0(field) {\n    return this.fieldValues.get(field);\n  };\n\n  _proto._addFieldValue = function _addFieldValue(field, value) {\n    requireNonNull(field, 'field');\n    var old = this.getFieldValue0(field);\n\n    if (old != null && old !== value) {\n      throw new DateTimeException('Conflict found: ' + field + ' ' + old + ' differs from ' + field + ' ' + value + ': ' + this);\n    }\n\n    return this._putFieldValue0(field, value);\n  };\n\n  _proto._putFieldValue0 = function _putFieldValue0(field, value) {\n    this.fieldValues.put(field, value);\n    return this;\n  };\n\n  _proto.resolve = function resolve(resolverStyle, resolverFields) {\n    if (resolverFields != null) {\n      this.fieldValues.retainAll(resolverFields);\n    }\n\n    this._mergeDate(resolverStyle);\n\n    this._mergeTime(resolverStyle);\n\n    this._resolveTimeInferZeroes(resolverStyle);\n\n    if (this.excessDays != null && this.excessDays.isZero() === false && this.date != null && this.time != null) {\n      this.date = this.date.plus(this.excessDays);\n      this.excessDays = Period.ZERO;\n    }\n\n    this._resolveInstant();\n\n    return this;\n  };\n\n  _proto._mergeDate = function _mergeDate(resolverStyle) {\n    this._checkDate(IsoChronology.INSTANCE.resolveDate(this.fieldValues, resolverStyle));\n  };\n\n  _proto._checkDate = function _checkDate(date) {\n    if (date != null) {\n      this._addObject(date);\n\n      for (var fieldName in this.fieldValues.keySet()) {\n        var field = ChronoField.byName(fieldName);\n\n        if (field) {\n          if (this.fieldValues.get(field) !== undefined) {\n            if (field.isDateBased()) {\n              var val1 = void 0;\n\n              try {\n                val1 = date.getLong(field);\n              } catch (ex) {\n                if (ex instanceof DateTimeException) {\n                  continue;\n                } else {\n                  throw ex;\n                }\n              }\n\n              var val2 = this.fieldValues.get(field);\n\n              if (val1 !== val2) {\n                throw new DateTimeException('Conflict found: Field ' + field + ' ' + val1 + ' differs from ' + field + ' ' + val2 + ' derived from ' + date);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  _proto._mergeTime = function _mergeTime(resolverStyle) {\n    if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_DAY)) {\n      var ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        if (resolverStyle === ResolverStyle.SMART && ch === 0) ; else {\n          ChronoField.CLOCK_HOUR_OF_DAY.checkValidValue(ch);\n        }\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, ch === 24 ? 0 : ch);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_AMPM)) {\n      var _ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_AMPM);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        if (resolverStyle === ResolverStyle.SMART && _ch === 0) ; else {\n          ChronoField.CLOCK_HOUR_OF_AMPM.checkValidValue(_ch);\n        }\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_AMPM, _ch === 12 ? 0 : _ch);\n    }\n\n    if (resolverStyle !== ResolverStyle.LENIENT) {\n      if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY)) {\n        ChronoField.AMPM_OF_DAY.checkValidValue(this.fieldValues.get(ChronoField.AMPM_OF_DAY));\n      }\n\n      if (this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n        ChronoField.HOUR_OF_AMPM.checkValidValue(this.fieldValues.get(ChronoField.HOUR_OF_AMPM));\n      }\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY) && this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n      var ap = this.fieldValues.remove(ChronoField.AMPM_OF_DAY);\n      var hap = this.fieldValues.remove(ChronoField.HOUR_OF_AMPM);\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, ap * 12 + hap);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.NANO_OF_DAY)) {\n      var nod = this.fieldValues.remove(ChronoField.NANO_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.NANO_OF_DAY.checkValidValue(nod);\n      }\n\n      this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(nod, 1000000000));\n\n      this._addFieldValue(ChronoField.NANO_OF_SECOND, MathUtil.intMod(nod, 1000000000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MICRO_OF_DAY)) {\n      var cod = this.fieldValues.remove(ChronoField.MICRO_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.MICRO_OF_DAY.checkValidValue(cod);\n      }\n\n      this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(cod, 1000000));\n\n      this._addFieldValue(ChronoField.MICRO_OF_SECOND, MathUtil.intMod(cod, 1000000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MILLI_OF_DAY)) {\n      var lod = this.fieldValues.remove(ChronoField.MILLI_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.MILLI_OF_DAY.checkValidValue(lod);\n      }\n\n      this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(lod, 1000));\n\n      this._addFieldValue(ChronoField.MILLI_OF_SECOND, MathUtil.intMod(lod, 1000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.SECOND_OF_DAY)) {\n      var sod = this.fieldValues.remove(ChronoField.SECOND_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.SECOND_OF_DAY.checkValidValue(sod);\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(sod, 3600));\n\n      this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(MathUtil.intDiv(sod, 60), 60));\n\n      this._addFieldValue(ChronoField.SECOND_OF_MINUTE, MathUtil.intMod(sod, 60));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MINUTE_OF_DAY)) {\n      var mod = this.fieldValues.remove(ChronoField.MINUTE_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.MINUTE_OF_DAY.checkValidValue(mod);\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(mod, 60));\n\n      this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(mod, 60));\n    }\n\n    if (resolverStyle !== ResolverStyle.LENIENT) {\n      if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n        ChronoField.MILLI_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MILLI_OF_SECOND));\n      }\n\n      if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n        ChronoField.MICRO_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MICRO_OF_SECOND));\n      }\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n      var los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n      var cos = this.fieldValues.get(ChronoField.MICRO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.MICRO_OF_SECOND, los * 1000 + MathUtil.intMod(cos, 1000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n      var nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.MICRO_OF_SECOND, MathUtil.intDiv(nos, 1000));\n\n      this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n      var _nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.MILLI_OF_SECOND, MathUtil.intDiv(_nos, 1000000));\n\n      this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n      var _cos = this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.NANO_OF_SECOND, _cos * 1000);\n    } else if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n      var _los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.NANO_OF_SECOND, _los * 1000000);\n    }\n  };\n\n  _proto._resolveTimeInferZeroes = function _resolveTimeInferZeroes(resolverStyle) {\n    var hod = this.fieldValues.get(ChronoField.HOUR_OF_DAY);\n    var moh = this.fieldValues.get(ChronoField.MINUTE_OF_HOUR);\n    var som = this.fieldValues.get(ChronoField.SECOND_OF_MINUTE);\n    var nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n\n    if (hod == null) {\n      return;\n    }\n\n    if (moh == null && (som != null || nos != null)) {\n      return;\n    }\n\n    if (moh != null && som == null && nos != null) {\n      return;\n    }\n\n    if (resolverStyle !== ResolverStyle.LENIENT) {\n      if (hod != null) {\n        if (resolverStyle === ResolverStyle.SMART && hod === 24 && (moh == null || moh === 0) && (som == null || som === 0) && (nos == null || nos === 0)) {\n          hod = 0;\n          this.excessDays = Period.ofDays(1);\n        }\n\n        var hodVal = ChronoField.HOUR_OF_DAY.checkValidIntValue(hod);\n\n        if (moh != null) {\n          var mohVal = ChronoField.MINUTE_OF_HOUR.checkValidIntValue(moh);\n\n          if (som != null) {\n            var somVal = ChronoField.SECOND_OF_MINUTE.checkValidIntValue(som);\n\n            if (nos != null) {\n              var nosVal = ChronoField.NANO_OF_SECOND.checkValidIntValue(nos);\n\n              this._addObject(LocalTime.of(hodVal, mohVal, somVal, nosVal));\n            } else {\n              this._addObject(LocalTime.of(hodVal, mohVal, somVal));\n            }\n          } else {\n            if (nos == null) {\n              this._addObject(LocalTime.of(hodVal, mohVal));\n            }\n          }\n        } else {\n          if (som == null && nos == null) {\n            this._addObject(LocalTime.of(hodVal, 0));\n          }\n        }\n      }\n    } else {\n      if (hod != null) {\n        var _hodVal = hod;\n\n        if (moh != null) {\n          if (som != null) {\n            if (nos == null) {\n              nos = 0;\n            }\n\n            var totalNanos = MathUtil.safeMultiply(_hodVal, 3600000000000);\n            totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(moh, 60000000000));\n            totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(som, 1000000000));\n            totalNanos = MathUtil.safeAdd(totalNanos, nos);\n            var excessDays = MathUtil.floorDiv(totalNanos, 86400000000000);\n            var nod = MathUtil.floorMod(totalNanos, 86400000000000);\n\n            this._addObject(LocalTime.ofNanoOfDay(nod));\n\n            this.excessDays = Period.ofDays(excessDays);\n          } else {\n            var totalSecs = MathUtil.safeMultiply(_hodVal, 3600);\n            totalSecs = MathUtil.safeAdd(totalSecs, MathUtil.safeMultiply(moh, 60));\n\n            var _excessDays = MathUtil.floorDiv(totalSecs, 86400);\n\n            var sod = MathUtil.floorMod(totalSecs, 86400);\n\n            this._addObject(LocalTime.ofSecondOfDay(sod));\n\n            this.excessDays = Period.ofDays(_excessDays);\n          }\n        } else {\n          var _excessDays2 = MathUtil.safeToInt(MathUtil.floorDiv(_hodVal, 24));\n\n          _hodVal = MathUtil.floorMod(_hodVal, 24);\n\n          this._addObject(LocalTime.of(_hodVal, 0));\n\n          this.excessDays = Period.ofDays(_excessDays2);\n        }\n      }\n    }\n\n    this.fieldValues.remove(ChronoField.HOUR_OF_DAY);\n    this.fieldValues.remove(ChronoField.MINUTE_OF_HOUR);\n    this.fieldValues.remove(ChronoField.SECOND_OF_MINUTE);\n    this.fieldValues.remove(ChronoField.NANO_OF_SECOND);\n  };\n\n  _proto._addObject = function _addObject(dateOrTime) {\n    if (dateOrTime instanceof ChronoLocalDate) {\n      this.date = dateOrTime;\n    } else if (dateOrTime instanceof LocalTime) {\n      this.time = dateOrTime;\n    }\n  };\n\n  _proto._resolveInstant = function _resolveInstant() {\n    if (this.date != null && this.time != null) {\n      var offsetSecs = this.fieldValues.get(ChronoField.OFFSET_SECONDS);\n\n      if (offsetSecs != null) {\n        var offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n        var instant = this.date.atTime(this.time).atZone(offset).getLong(ChronoField.INSTANT_SECONDS);\n        this.fieldValues.put(ChronoField.INSTANT_SECONDS, instant);\n      } else if (this.zone != null) {\n        var _instant = this.date.atTime(this.time).atZone(this.zone).getLong(ChronoField.INSTANT_SECONDS);\n\n        this.fieldValues.put(ChronoField.INSTANT_SECONDS, _instant);\n      }\n    }\n  };\n\n  _proto.build = function build(type) {\n    return type.queryFrom(this);\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (field == null) {\n      return false;\n    }\n\n    return this.fieldValues.containsKey(field) && this.fieldValues.get(field) !== undefined || this.date != null && this.date.isSupported(field) || this.time != null && this.time.isSupported(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n    var value = this.getFieldValue0(field);\n\n    if (value == null) {\n      if (this.date != null && this.date.isSupported(field)) {\n        return this.date.getLong(field);\n      }\n\n      if (this.time != null && this.time.isSupported(field)) {\n        return this.time.getLong(field);\n      }\n\n      throw new DateTimeException('Field not found: ' + field);\n    }\n\n    return value;\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.zoneId()) {\n      return this.zone;\n    } else if (_query === TemporalQueries.chronology()) {\n      return this.chrono;\n    } else if (_query === TemporalQueries.localDate()) {\n      return this.date != null ? LocalDate.from(this.date) : null;\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.time;\n    } else if (_query === TemporalQueries.zone() || _query === TemporalQueries.offset()) {\n      return _query.queryFrom(this);\n    } else if (_query === TemporalQueries.precision()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  return DateTimeBuilder;\n}(TemporalAccessor);\n\nvar DateTimeParseContext = function () {\n  function DateTimeParseContext() {\n    if (arguments.length === 1) {\n      if (arguments[0] instanceof DateTimeParseContext) {\n        this._constructorSelf.apply(this, arguments);\n\n        return;\n      } else {\n        this._constructorFormatter.apply(this, arguments);\n      }\n    } else {\n      this._constructorParam.apply(this, arguments);\n    }\n\n    this._caseSensitive = true;\n    this._strict = true;\n    this._parsed = [new Parsed(this)];\n  }\n\n  var _proto = DateTimeParseContext.prototype;\n\n  _proto._constructorParam = function _constructorParam(locale, symbols, chronology) {\n    this._locale = locale;\n    this._symbols = symbols;\n    this._overrideChronology = chronology;\n  };\n\n  _proto._constructorFormatter = function _constructorFormatter(formatter) {\n    this._locale = formatter.locale();\n    this._symbols = formatter.decimalStyle();\n    this._overrideChronology = formatter.chronology();\n  };\n\n  _proto._constructorSelf = function _constructorSelf(other) {\n    this._locale = other._locale;\n    this._symbols = other._symbols;\n    this._overrideChronology = other._overrideChronology;\n    this._overrideZone = other._overrideZone;\n    this._caseSensitive = other._caseSensitive;\n    this._strict = other._strict;\n    this._parsed = [new Parsed(this)];\n  };\n\n  _proto.copy = function copy() {\n    return new DateTimeParseContext(this);\n  };\n\n  _proto.symbols = function symbols() {\n    return this._symbols;\n  };\n\n  _proto.isStrict = function isStrict() {\n    return this._strict;\n  };\n\n  _proto.setStrict = function setStrict(strict) {\n    this._strict = strict;\n  };\n\n  _proto.locale = function locale() {\n    return this._locale;\n  };\n\n  _proto.setLocale = function setLocale(locale) {\n    this._locale = locale;\n  };\n\n  _proto.startOptional = function startOptional() {\n    this._parsed.push(this.currentParsed().copy());\n  };\n\n  _proto.endOptional = function endOptional(successful) {\n    if (successful) {\n      this._parsed.splice(this._parsed.length - 2, 1);\n    } else {\n      this._parsed.splice(this._parsed.length - 1, 1);\n    }\n  };\n\n  _proto.isCaseSensitive = function isCaseSensitive() {\n    return this._caseSensitive;\n  };\n\n  _proto.setCaseSensitive = function setCaseSensitive(caseSensitive) {\n    this._caseSensitive = caseSensitive;\n  };\n\n  _proto.subSequenceEquals = function subSequenceEquals(cs1, offset1, cs2, offset2, length) {\n    if (offset1 + length > cs1.length || offset2 + length > cs2.length) {\n      return false;\n    }\n\n    if (!this.isCaseSensitive()) {\n      cs1 = cs1.toLowerCase();\n      cs2 = cs2.toLowerCase();\n    }\n\n    for (var i = 0; i < length; i++) {\n      var ch1 = cs1[offset1 + i];\n      var ch2 = cs2[offset2 + i];\n\n      if (ch1 !== ch2) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _proto.charEquals = function charEquals(ch1, ch2) {\n    if (this.isCaseSensitive()) {\n      return ch1 === ch2;\n    }\n\n    return this.charEqualsIgnoreCase(ch1, ch2);\n  };\n\n  _proto.charEqualsIgnoreCase = function charEqualsIgnoreCase(c1, c2) {\n    return c1 === c2 || c1.toLowerCase() === c2.toLowerCase();\n  };\n\n  _proto.setParsedField = function setParsedField(field, value, errorPos, successPos) {\n    var currentParsedFieldValues = this.currentParsed().fieldValues;\n    var old = currentParsedFieldValues.get(field);\n    currentParsedFieldValues.set(field, value);\n    return old != null && old !== value ? ~errorPos : successPos;\n  };\n\n  _proto.setParsedZone = function setParsedZone(zone) {\n    requireNonNull(zone, 'zone');\n    this.currentParsed().zone = zone;\n  };\n\n  _proto.getParsed = function getParsed(field) {\n    return this.currentParsed().fieldValues.get(field);\n  };\n\n  _proto.toParsed = function toParsed() {\n    return this.currentParsed();\n  };\n\n  _proto.currentParsed = function currentParsed() {\n    return this._parsed[this._parsed.length - 1];\n  };\n\n  _proto.setParsedLeapSecond = function setParsedLeapSecond() {\n    this.currentParsed().leapSecond = true;\n  };\n\n  _proto.getEffectiveChronology = function getEffectiveChronology() {\n    var chrono = this.currentParsed().chrono;\n\n    if (chrono == null) {\n      chrono = this._overrideChronology;\n\n      if (chrono == null) {\n        chrono = IsoChronology.INSTANCE;\n      }\n    }\n\n    return chrono;\n  };\n\n  return DateTimeParseContext;\n}();\n\nvar Parsed = function (_Temporal) {\n  _inheritsLoose(Parsed, _Temporal);\n\n  function Parsed(dateTimeParseContext) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n    _this.chrono = null;\n    _this.zone = null;\n    _this.fieldValues = new EnumMap();\n    _this.leapSecond = false;\n    _this.dateTimeParseContext = dateTimeParseContext;\n    return _this;\n  }\n\n  var _proto2 = Parsed.prototype;\n\n  _proto2.copy = function copy() {\n    var cloned = new Parsed();\n    cloned.chrono = this.chrono;\n    cloned.zone = this.zone;\n    cloned.fieldValues.putAll(this.fieldValues);\n    cloned.leapSecond = this.leapSecond;\n    cloned.dateTimeParseContext = this.dateTimeParseContext;\n    return cloned;\n  };\n\n  _proto2.toString = function toString() {\n    return this.fieldValues + \", \" + this.chrono + \", \" + this.zone;\n  };\n\n  _proto2.isSupported = function isSupported(field) {\n    return this.fieldValues.containsKey(field);\n  };\n\n  _proto2.get = function get(field) {\n    var val = this.fieldValues.get(field);\n    assert(val != null);\n    return val;\n  };\n\n  _proto2.query = function query(_query) {\n    if (_query === TemporalQueries.chronology()) {\n      return this.chrono;\n    }\n\n    if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.zone()) {\n      return this.zone;\n    }\n\n    return _Temporal.prototype.query.call(this, _query);\n  };\n\n  _proto2.toBuilder = function toBuilder() {\n    var builder = new DateTimeBuilder();\n    builder.fieldValues.putAll(this.fieldValues);\n    builder.chrono = this.dateTimeParseContext.getEffectiveChronology();\n\n    if (this.zone != null) {\n      builder.zone = this.zone;\n    } else {\n      builder.zone = this.overrideZone;\n    }\n\n    builder.leapSecond = this.leapSecond;\n    builder.excessDays = this.excessDays;\n    return builder;\n  };\n\n  return Parsed;\n}(Temporal);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar DateTimePrintContext = function () {\n  function DateTimePrintContext(temporal, localeOrFormatter, symbols) {\n    if (arguments.length === 2 && arguments[1] instanceof DateTimeFormatter) {\n      this._temporal = DateTimePrintContext.adjust(temporal, localeOrFormatter);\n      this._locale = localeOrFormatter.locale();\n      this._symbols = localeOrFormatter.decimalStyle();\n    } else {\n      this._temporal = temporal;\n      this._locale = localeOrFormatter;\n      this._symbols = symbols;\n    }\n\n    this._optional = 0;\n  }\n\n  DateTimePrintContext.adjust = function adjust(temporal, formatter) {\n    return temporal;\n  };\n\n  var _proto = DateTimePrintContext.prototype;\n\n  _proto.symbols = function symbols() {\n    return this._symbols;\n  };\n\n  _proto.startOptional = function startOptional() {\n    this._optional++;\n  };\n\n  _proto.endOptional = function endOptional() {\n    this._optional--;\n  };\n\n  _proto.getValueQuery = function getValueQuery(query) {\n    var result = this._temporal.query(query);\n\n    if (result == null && this._optional === 0) {\n      throw new DateTimeException('Unable to extract value: ' + this._temporal);\n    }\n\n    return result;\n  };\n\n  _proto.getValue = function getValue(field) {\n    try {\n      return this._temporal.getLong(field);\n    } catch (ex) {\n      if (ex instanceof DateTimeException && this._optional > 0) {\n        return null;\n      }\n\n      throw ex;\n    }\n  };\n\n  _proto.temporal = function temporal() {\n    return this._temporal;\n  };\n\n  _proto.locale = function locale() {\n    return this._locale;\n  };\n\n  _proto.setDateTime = function setDateTime(temporal) {\n    this._temporal = temporal;\n  };\n\n  _proto.setLocale = function setLocale(locale) {\n    this._locale = locale;\n  };\n\n  return DateTimePrintContext;\n}();\n\nvar IsoFields = {};\nvar QUARTER_DAYS = [0, 90, 181, 273, 0, 91, 182, 274];\n\nvar Field = function (_TemporalField) {\n  _inheritsLoose(Field, _TemporalField);\n\n  function Field() {\n    return _TemporalField.apply(this, arguments) || this;\n  }\n\n  var _proto = Field.prototype;\n\n  _proto.isDateBased = function isDateBased() {\n    return true;\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    return false;\n  };\n\n  _proto._isIso = function _isIso() {\n    return true;\n  };\n\n  Field._getWeekRangeByLocalDate = function _getWeekRangeByLocalDate(date) {\n    var wby = Field._getWeekBasedYear(date);\n\n    return ValueRange.of(1, Field._getWeekRangeByYear(wby));\n  };\n\n  Field._getWeekRangeByYear = function _getWeekRangeByYear(wby) {\n    var date = LocalDate.of(wby, 1, 1);\n\n    if (date.dayOfWeek() === DayOfWeek.THURSDAY || date.dayOfWeek() === DayOfWeek.WEDNESDAY && date.isLeapYear()) {\n      return 53;\n    }\n\n    return 52;\n  };\n\n  Field._getWeek = function _getWeek(date) {\n    var dow0 = date.dayOfWeek().ordinal();\n    var doy0 = date.dayOfYear() - 1;\n    var doyThu0 = doy0 + (3 - dow0);\n    var alignedWeek = MathUtil.intDiv(doyThu0, 7);\n    var firstThuDoy0 = doyThu0 - alignedWeek * 7;\n    var firstMonDoy0 = firstThuDoy0 - 3;\n\n    if (firstMonDoy0 < -3) {\n      firstMonDoy0 += 7;\n    }\n\n    if (doy0 < firstMonDoy0) {\n      return Field._getWeekRangeByLocalDate(date.withDayOfYear(180).minusYears(1)).maximum();\n    }\n\n    var week = MathUtil.intDiv(doy0 - firstMonDoy0, 7) + 1;\n\n    if (week === 53) {\n      if ((firstMonDoy0 === -3 || firstMonDoy0 === -2 && date.isLeapYear()) === false) {\n        week = 1;\n      }\n    }\n\n    return week;\n  };\n\n  Field._getWeekBasedYear = function _getWeekBasedYear(date) {\n    var year = date.year();\n    var doy = date.dayOfYear();\n\n    if (doy <= 3) {\n      var dow = date.dayOfWeek().ordinal();\n\n      if (doy - dow < -2) {\n        year--;\n      }\n    } else if (doy >= 363) {\n      var _dow = date.dayOfWeek().ordinal();\n\n      doy = doy - 363 - (date.isLeapYear() ? 1 : 0);\n\n      if (doy - _dow >= 0) {\n        year++;\n      }\n    }\n\n    return year;\n  };\n\n  _proto.displayName = function displayName() {\n    return this.toString();\n  };\n\n  _proto.resolve = function resolve() {\n    return null;\n  };\n\n  _proto.name = function name() {\n    return this.toString();\n  };\n\n  return Field;\n}(TemporalField);\n\nvar DAY_OF_QUARTER_FIELD = function (_Field) {\n  _inheritsLoose(DAY_OF_QUARTER_FIELD, _Field);\n\n  function DAY_OF_QUARTER_FIELD() {\n    return _Field.apply(this, arguments) || this;\n  }\n\n  var _proto2 = DAY_OF_QUARTER_FIELD.prototype;\n\n  _proto2.toString = function toString() {\n    return 'DayOfQuarter';\n  };\n\n  _proto2.baseUnit = function baseUnit() {\n    return ChronoUnit.DAYS;\n  };\n\n  _proto2.rangeUnit = function rangeUnit() {\n    return QUARTER_YEARS;\n  };\n\n  _proto2.range = function range() {\n    return ValueRange.of(1, 90, 92);\n  };\n\n  _proto2.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.DAY_OF_YEAR) && temporal.isSupported(ChronoField.MONTH_OF_YEAR) && temporal.isSupported(ChronoField.YEAR) && this._isIso(temporal);\n  };\n\n  _proto2.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: DayOfQuarter');\n    }\n\n    var qoy = temporal.getLong(QUARTER_OF_YEAR);\n\n    if (qoy === 1) {\n      var year = temporal.getLong(ChronoField.YEAR);\n      return IsoChronology.isLeapYear(year) ? ValueRange.of(1, 91) : ValueRange.of(1, 90);\n    } else if (qoy === 2) {\n      return ValueRange.of(1, 91);\n    } else if (qoy === 3 || qoy === 4) {\n      return ValueRange.of(1, 92);\n    }\n\n    return this.range();\n  };\n\n  _proto2.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: DayOfQuarter');\n    }\n\n    var doy = temporal.get(ChronoField.DAY_OF_YEAR);\n    var moy = temporal.get(ChronoField.MONTH_OF_YEAR);\n    var year = temporal.getLong(ChronoField.YEAR);\n    return doy - QUARTER_DAYS[MathUtil.intDiv(moy - 1, 3) + (IsoChronology.isLeapYear(year) ? 4 : 0)];\n  };\n\n  _proto2.adjustInto = function adjustInto(temporal, newValue) {\n    var curValue = this.getFrom(temporal);\n    this.range().checkValidValue(newValue, this);\n    return temporal.with(ChronoField.DAY_OF_YEAR, temporal.getLong(ChronoField.DAY_OF_YEAR) + (newValue - curValue));\n  };\n\n  _proto2.resolve = function resolve(fieldValues, partialTemporal, resolverStyle) {\n    var yearLong = fieldValues.get(ChronoField.YEAR);\n    var qoyLong = fieldValues.get(QUARTER_OF_YEAR);\n\n    if (yearLong == null || qoyLong == null) {\n      return null;\n    }\n\n    var y = ChronoField.YEAR.checkValidIntValue(yearLong);\n    var doq = fieldValues.get(DAY_OF_QUARTER);\n    var date;\n\n    if (resolverStyle === ResolverStyle.LENIENT) {\n      var qoy = qoyLong;\n      date = LocalDate.of(y, 1, 1);\n      date = date.plusMonths(MathUtil.safeMultiply(MathUtil.safeSubtract(qoy, 1), 3));\n      date = date.plusDays(MathUtil.safeSubtract(doq, 1));\n    } else {\n      var _qoy = QUARTER_OF_YEAR.range().checkValidIntValue(qoyLong, QUARTER_OF_YEAR);\n\n      if (resolverStyle === ResolverStyle.STRICT) {\n        var max = 92;\n\n        if (_qoy === 1) {\n          max = IsoChronology.isLeapYear(y) ? 91 : 90;\n        } else if (_qoy === 2) {\n          max = 91;\n        }\n\n        ValueRange.of(1, max).checkValidValue(doq, this);\n      } else {\n        this.range().checkValidValue(doq, this);\n      }\n\n      date = LocalDate.of(y, (_qoy - 1) * 3 + 1, 1).plusDays(doq - 1);\n    }\n\n    fieldValues.remove(this);\n    fieldValues.remove(ChronoField.YEAR);\n    fieldValues.remove(QUARTER_OF_YEAR);\n    return date;\n  };\n\n  return DAY_OF_QUARTER_FIELD;\n}(Field);\n\nvar QUARTER_OF_YEAR_FIELD = function (_Field2) {\n  _inheritsLoose(QUARTER_OF_YEAR_FIELD, _Field2);\n\n  function QUARTER_OF_YEAR_FIELD() {\n    return _Field2.apply(this, arguments) || this;\n  }\n\n  var _proto3 = QUARTER_OF_YEAR_FIELD.prototype;\n\n  _proto3.toString = function toString() {\n    return 'QuarterOfYear';\n  };\n\n  _proto3.baseUnit = function baseUnit() {\n    return QUARTER_YEARS;\n  };\n\n  _proto3.rangeUnit = function rangeUnit() {\n    return ChronoUnit.YEARS;\n  };\n\n  _proto3.range = function range() {\n    return ValueRange.of(1, 4);\n  };\n\n  _proto3.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.MONTH_OF_YEAR) && this._isIso(temporal);\n  };\n\n  _proto3.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    return this.range();\n  };\n\n  _proto3.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: QuarterOfYear');\n    }\n\n    var moy = temporal.getLong(ChronoField.MONTH_OF_YEAR);\n    return MathUtil.intDiv(moy + 2, 3);\n  };\n\n  _proto3.adjustInto = function adjustInto(temporal, newValue) {\n    var curValue = this.getFrom(temporal);\n    this.range().checkValidValue(newValue, this);\n    return temporal.with(ChronoField.MONTH_OF_YEAR, temporal.getLong(ChronoField.MONTH_OF_YEAR) + (newValue - curValue) * 3);\n  };\n\n  return QUARTER_OF_YEAR_FIELD;\n}(Field);\n\nvar WEEK_OF_WEEK_BASED_YEAR_FIELD = function (_Field3) {\n  _inheritsLoose(WEEK_OF_WEEK_BASED_YEAR_FIELD, _Field3);\n\n  function WEEK_OF_WEEK_BASED_YEAR_FIELD() {\n    return _Field3.apply(this, arguments) || this;\n  }\n\n  var _proto4 = WEEK_OF_WEEK_BASED_YEAR_FIELD.prototype;\n\n  _proto4.toString = function toString() {\n    return 'WeekOfWeekBasedYear';\n  };\n\n  _proto4.baseUnit = function baseUnit() {\n    return ChronoUnit.WEEKS;\n  };\n\n  _proto4.rangeUnit = function rangeUnit() {\n    return WEEK_BASED_YEARS;\n  };\n\n  _proto4.range = function range() {\n    return ValueRange.of(1, 52, 53);\n  };\n\n  _proto4.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n  };\n\n  _proto4.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekOfWeekBasedYear');\n    }\n\n    return Field._getWeekRangeByLocalDate(LocalDate.from(temporal));\n  };\n\n  _proto4.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekOfWeekBasedYear');\n    }\n\n    return Field._getWeek(LocalDate.from(temporal));\n  };\n\n  _proto4.adjustInto = function adjustInto(temporal, newValue) {\n    this.range().checkValidValue(newValue, this);\n    return temporal.plus(MathUtil.safeSubtract(newValue, this.getFrom(temporal)), ChronoUnit.WEEKS);\n  };\n\n  _proto4.resolve = function resolve(fieldValues, partialTemporal, resolverStyle) {\n    var wbyLong = fieldValues.get(WEEK_BASED_YEAR);\n    var dowLong = fieldValues.get(ChronoField.DAY_OF_WEEK);\n\n    if (wbyLong == null || dowLong == null) {\n      return null;\n    }\n\n    var wby = WEEK_BASED_YEAR.range().checkValidIntValue(wbyLong, WEEK_BASED_YEAR);\n    var wowby = fieldValues.get(WEEK_OF_WEEK_BASED_YEAR);\n    var date;\n\n    if (resolverStyle === ResolverStyle.LENIENT) {\n      var dow = dowLong;\n      var weeks = 0;\n\n      if (dow > 7) {\n        weeks = MathUtil.intDiv(dow - 1, 7);\n        dow = MathUtil.intMod(dow - 1, 7) + 1;\n      } else if (dow < 1) {\n        weeks = MathUtil.intDiv(dow, 7) - 1;\n        dow = MathUtil.intMod(dow, 7) + 7;\n      }\n\n      date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).plusWeeks(weeks).with(ChronoField.DAY_OF_WEEK, dow);\n    } else {\n      var _dow2 = ChronoField.DAY_OF_WEEK.checkValidIntValue(dowLong);\n\n      if (resolverStyle === ResolverStyle.STRICT) {\n        var temp = LocalDate.of(wby, 1, 4);\n\n        var range = Field._getWeekRangeByLocalDate(temp);\n\n        range.checkValidValue(wowby, this);\n      } else {\n        this.range().checkValidValue(wowby, this);\n      }\n\n      date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).with(ChronoField.DAY_OF_WEEK, _dow2);\n    }\n\n    fieldValues.remove(this);\n    fieldValues.remove(WEEK_BASED_YEAR);\n    fieldValues.remove(ChronoField.DAY_OF_WEEK);\n    return date;\n  };\n\n  _proto4.displayName = function displayName() {\n    return 'Week';\n  };\n\n  return WEEK_OF_WEEK_BASED_YEAR_FIELD;\n}(Field);\n\nvar WEEK_BASED_YEAR_FIELD = function (_Field4) {\n  _inheritsLoose(WEEK_BASED_YEAR_FIELD, _Field4);\n\n  function WEEK_BASED_YEAR_FIELD() {\n    return _Field4.apply(this, arguments) || this;\n  }\n\n  var _proto5 = WEEK_BASED_YEAR_FIELD.prototype;\n\n  _proto5.toString = function toString() {\n    return 'WeekBasedYear';\n  };\n\n  _proto5.baseUnit = function baseUnit() {\n    return WEEK_BASED_YEARS;\n  };\n\n  _proto5.rangeUnit = function rangeUnit() {\n    return ChronoUnit.FOREVER;\n  };\n\n  _proto5.range = function range() {\n    return ChronoField.YEAR.range();\n  };\n\n  _proto5.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n  };\n\n  _proto5.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    return ChronoField.YEAR.range();\n  };\n\n  _proto5.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekBasedYear');\n    }\n\n    return Field._getWeekBasedYear(LocalDate.from(temporal));\n  };\n\n  _proto5.adjustInto = function adjustInto(temporal, newValue) {\n    if (this.isSupportedBy(temporal) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekBasedYear');\n    }\n\n    var newWby = this.range().checkValidIntValue(newValue, WEEK_BASED_YEAR);\n    var date = LocalDate.from(temporal);\n    var dow = date.get(ChronoField.DAY_OF_WEEK);\n\n    var week = Field._getWeek(date);\n\n    if (week === 53 && Field._getWeekRangeByYear(newWby) === 52) {\n      week = 52;\n    }\n\n    var resolved = LocalDate.of(newWby, 1, 4);\n    var days = dow - resolved.get(ChronoField.DAY_OF_WEEK) + (week - 1) * 7;\n    resolved = resolved.plusDays(days);\n    return temporal.with(resolved);\n  };\n\n  return WEEK_BASED_YEAR_FIELD;\n}(Field);\n\nvar Unit = function (_TemporalUnit) {\n  _inheritsLoose(Unit, _TemporalUnit);\n\n  function Unit(name, estimatedDuration) {\n    var _this;\n\n    _this = _TemporalUnit.call(this) || this;\n    _this._name = name;\n    _this._duration = estimatedDuration;\n    return _this;\n  }\n\n  var _proto6 = Unit.prototype;\n\n  _proto6.duration = function duration() {\n    return this._duration;\n  };\n\n  _proto6.isDurationEstimated = function isDurationEstimated() {\n    return true;\n  };\n\n  _proto6.isDateBased = function isDateBased() {\n    return true;\n  };\n\n  _proto6.isTimeBased = function isTimeBased() {\n    return false;\n  };\n\n  _proto6.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.EPOCH_DAY);\n  };\n\n  _proto6.addTo = function addTo(temporal, periodToAdd) {\n    switch (this) {\n      case WEEK_BASED_YEARS:\n        {\n          var added = MathUtil.safeAdd(temporal.get(WEEK_BASED_YEAR), periodToAdd);\n          return temporal.with(WEEK_BASED_YEAR, added);\n        }\n\n      case QUARTER_YEARS:\n        return temporal.plus(MathUtil.intDiv(periodToAdd, 256), ChronoUnit.YEARS).plus(MathUtil.intMod(periodToAdd, 256) * 3, ChronoUnit.MONTHS);\n\n      default:\n        throw new IllegalStateException('Unreachable');\n    }\n  };\n\n  _proto6.between = function between(temporal1, temporal2) {\n    switch (this) {\n      case WEEK_BASED_YEARS:\n        return MathUtil.safeSubtract(temporal2.getLong(WEEK_BASED_YEAR), temporal1.getLong(WEEK_BASED_YEAR));\n\n      case QUARTER_YEARS:\n        return MathUtil.intDiv(temporal1.until(temporal2, ChronoUnit.MONTHS), 3);\n\n      default:\n        throw new IllegalStateException('Unreachable');\n    }\n  };\n\n  _proto6.toString = function toString() {\n    return name;\n  };\n\n  return Unit;\n}(TemporalUnit);\n\nvar DAY_OF_QUARTER = null;\nvar QUARTER_OF_YEAR = null;\nvar WEEK_OF_WEEK_BASED_YEAR = null;\nvar WEEK_BASED_YEAR = null;\nvar WEEK_BASED_YEARS = null;\nvar QUARTER_YEARS = null;\nfunction _init$8() {\n  DAY_OF_QUARTER = new DAY_OF_QUARTER_FIELD();\n  QUARTER_OF_YEAR = new QUARTER_OF_YEAR_FIELD();\n  WEEK_OF_WEEK_BASED_YEAR = new WEEK_OF_WEEK_BASED_YEAR_FIELD();\n  WEEK_BASED_YEAR = new WEEK_BASED_YEAR_FIELD();\n  WEEK_BASED_YEARS = new Unit('WeekBasedYears', Duration.ofSeconds(31556952));\n  QUARTER_YEARS = new Unit('QuarterYears', Duration.ofSeconds(31556952 / 4));\n  IsoFields.DAY_OF_QUARTER = DAY_OF_QUARTER;\n  IsoFields.QUARTER_OF_YEAR = QUARTER_OF_YEAR;\n  IsoFields.WEEK_OF_WEEK_BASED_YEAR = WEEK_OF_WEEK_BASED_YEAR;\n  IsoFields.WEEK_BASED_YEAR = WEEK_BASED_YEAR;\n  IsoFields.WEEK_BASED_YEARS = WEEK_BASED_YEARS;\n  IsoFields.QUARTER_YEARS = QUARTER_YEARS;\n\n  LocalDate.prototype.isoWeekOfWeekyear = function () {\n    return this.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n  };\n\n  LocalDate.prototype.isoWeekyear = function () {\n    return this.get(IsoFields.WEEK_BASED_YEAR);\n  };\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar DecimalStyle = function () {\n  function DecimalStyle(zeroChar, positiveSignChar, negativeSignChar, decimalPointChar) {\n    this._zeroDigit = zeroChar;\n    this._zeroDigitCharCode = zeroChar.charCodeAt(0);\n    this._positiveSign = positiveSignChar;\n    this._negativeSign = negativeSignChar;\n    this._decimalSeparator = decimalPointChar;\n  }\n\n  var _proto = DecimalStyle.prototype;\n\n  _proto.positiveSign = function positiveSign() {\n    return this._positiveSign;\n  };\n\n  _proto.withPositiveSign = function withPositiveSign(positiveSign) {\n    if (positiveSign === this._positiveSign) {\n      return this;\n    }\n\n    return new DecimalStyle(this._zeroDigit, positiveSign, this._negativeSign, this._decimalSeparator);\n  };\n\n  _proto.negativeSign = function negativeSign() {\n    return this._negativeSign;\n  };\n\n  _proto.withNegativeSign = function withNegativeSign(negativeSign) {\n    if (negativeSign === this._negativeSign) {\n      return this;\n    }\n\n    return new DecimalStyle(this._zeroDigit, this._positiveSign, negativeSign, this._decimalSeparator);\n  };\n\n  _proto.zeroDigit = function zeroDigit() {\n    return this._zeroDigit;\n  };\n\n  _proto.withZeroDigit = function withZeroDigit(zeroDigit) {\n    if (zeroDigit === this._zeroDigit) {\n      return this;\n    }\n\n    return new DecimalStyle(zeroDigit, this._positiveSign, this._negativeSign, this._decimalSeparator);\n  };\n\n  _proto.decimalSeparator = function decimalSeparator() {\n    return this._decimalSeparator;\n  };\n\n  _proto.withDecimalSeparator = function withDecimalSeparator(decimalSeparator) {\n    if (decimalSeparator === this._decimalSeparator) {\n      return this;\n    }\n\n    return new DecimalStyle(this._zeroDigit, this._positiveSign, this._negativeSign, decimalSeparator);\n  };\n\n  _proto.convertToDigit = function convertToDigit(char) {\n    var val = char.charCodeAt(0) - this._zeroDigitCharCode;\n\n    return val >= 0 && val <= 9 ? val : -1;\n  };\n\n  _proto.convertNumberToI18N = function convertNumberToI18N(numericText) {\n    if (this._zeroDigit === '0') {\n      return numericText;\n    }\n\n    var diff = this._zeroDigitCharCode - '0'.charCodeAt(0);\n    var convertedText = '';\n\n    for (var i = 0; i < numericText.length; i++) {\n      convertedText += String.fromCharCode(numericText.charCodeAt(i) + diff);\n    }\n\n    return convertedText;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof DecimalStyle) {\n      return this._zeroDigit === other._zeroDigit && this._positiveSign === other._positiveSign && this._negativeSign === other._negativeSign && this._decimalSeparator === other._decimalSeparator;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator;\n  };\n\n  _proto.toString = function toString() {\n    return 'DecimalStyle[' + this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator + ']';\n  };\n\n  DecimalStyle.of = function of() {\n    throw new Error('not yet supported');\n  };\n\n  DecimalStyle.availableLocales = function availableLocales() {\n    throw new Error('not yet supported');\n  };\n\n  return DecimalStyle;\n}();\nDecimalStyle.STANDARD = new DecimalStyle('0', '+', '-', '.');\n\nvar SignStyle = function (_Enum) {\n  _inheritsLoose(SignStyle, _Enum);\n\n  function SignStyle() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = SignStyle.prototype;\n\n  _proto.parse = function parse(positive, strict, fixedWidth) {\n    switch (this) {\n      case SignStyle.NORMAL:\n        return !positive || !strict;\n\n      case SignStyle.ALWAYS:\n      case SignStyle.EXCEEDS_PAD:\n        return true;\n\n      default:\n        return !strict && !fixedWidth;\n    }\n  };\n\n  return SignStyle;\n}(Enum);\nSignStyle.NORMAL = new SignStyle('NORMAL');\nSignStyle.NEVER = new SignStyle('NEVER');\nSignStyle.ALWAYS = new SignStyle('ALWAYS');\nSignStyle.EXCEEDS_PAD = new SignStyle('EXCEEDS_PAD');\nSignStyle.NOT_NEGATIVE = new SignStyle('NOT_NEGATIVE');\n\nvar TextStyle = function (_Enum) {\n  _inheritsLoose(TextStyle, _Enum);\n\n  function TextStyle() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = TextStyle.prototype;\n\n  _proto.isStandalone = function isStandalone() {\n    switch (this) {\n      case TextStyle.FULL_STANDALONE:\n      case TextStyle.SHORT_STANDALONE:\n      case TextStyle.NARROW_STANDALONE:\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  _proto.asStandalone = function asStandalone() {\n    switch (this) {\n      case TextStyle.FULL:\n        return TextStyle.FULL_STANDALONE;\n\n      case TextStyle.SHORT:\n        return TextStyle.SHORT_STANDALONE;\n\n      case TextStyle.NARROW:\n        return TextStyle.NARROW_STANDALONE;\n\n      default:\n        return this;\n    }\n  };\n\n  _proto.asNormal = function asNormal() {\n    switch (this) {\n      case TextStyle.FULL_STANDALONE:\n        return TextStyle.FULL;\n\n      case TextStyle.SHORT_STANDALONE:\n        return TextStyle.SHORT;\n\n      case TextStyle.NARROW_STANDALONE:\n        return TextStyle.NARROW;\n\n      default:\n        return this;\n    }\n  };\n\n  return TextStyle;\n}(Enum);\nTextStyle.FULL = new TextStyle('FULL');\nTextStyle.FULL_STANDALONE = new TextStyle('FULL_STANDALONE');\nTextStyle.SHORT = new TextStyle('SHORT');\nTextStyle.SHORT_STANDALONE = new TextStyle('SHORT_STANDALONE');\nTextStyle.NARROW = new TextStyle('NARROW');\nTextStyle.NARROW_STANDALONE = new TextStyle('NARROW_STANDALONE');\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar CharLiteralPrinterParser = function () {\n  function CharLiteralPrinterParser(literal) {\n    if (literal.length > 1) {\n      throw new IllegalArgumentException('invalid literal, too long: \"' + literal + '\"');\n    }\n\n    this._literal = literal;\n  }\n\n  var _proto = CharLiteralPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    buf.append(this._literal);\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n\n    if (position === length) {\n      return ~position;\n    }\n\n    var ch = text.charAt(position);\n\n    if (context.charEquals(this._literal, ch) === false) {\n      return ~position;\n    }\n\n    return position + this._literal.length;\n  };\n\n  _proto.toString = function toString() {\n    if (this._literal === '\\'') {\n      return \"''\";\n    }\n\n    return \"'\" + this._literal + \"'\";\n  };\n\n  return CharLiteralPrinterParser;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar CompositePrinterParser = function () {\n  function CompositePrinterParser(printerParsers, optional) {\n    this._printerParsers = printerParsers;\n    this._optional = optional;\n  }\n\n  var _proto = CompositePrinterParser.prototype;\n\n  _proto.withOptional = function withOptional(optional) {\n    if (optional === this._optional) {\n      return this;\n    }\n\n    return new CompositePrinterParser(this._printerParsers, optional);\n  };\n\n  _proto.print = function print(context, buf) {\n    var length = buf.length();\n\n    if (this._optional) {\n      context.startOptional();\n    }\n\n    try {\n      for (var i = 0; i < this._printerParsers.length; i++) {\n        var pp = this._printerParsers[i];\n\n        if (pp.print(context, buf) === false) {\n          buf.setLength(length);\n          return true;\n        }\n      }\n    } finally {\n      if (this._optional) {\n        context.endOptional();\n      }\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    if (this._optional) {\n      context.startOptional();\n      var pos = position;\n\n      for (var i = 0; i < this._printerParsers.length; i++) {\n        var pp = this._printerParsers[i];\n        pos = pp.parse(context, text, pos);\n\n        if (pos < 0) {\n          context.endOptional(false);\n          return position;\n        }\n      }\n\n      context.endOptional(true);\n      return pos;\n    } else {\n      for (var _i = 0; _i < this._printerParsers.length; _i++) {\n        var _pp = this._printerParsers[_i];\n        position = _pp.parse(context, text, position);\n\n        if (position < 0) {\n          break;\n        }\n      }\n\n      return position;\n    }\n  };\n\n  _proto.toString = function toString() {\n    var buf = '';\n\n    if (this._printerParsers != null) {\n      buf += this._optional ? '[' : '(';\n\n      for (var i = 0; i < this._printerParsers.length; i++) {\n        var pp = this._printerParsers[i];\n        buf += pp.toString();\n      }\n\n      buf += this._optional ? ']' : ')';\n    }\n\n    return buf;\n  };\n\n  return CompositePrinterParser;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar FractionPrinterParser = function () {\n  function FractionPrinterParser(field, minWidth, maxWidth, decimalPoint) {\n    requireNonNull(field, 'field');\n\n    if (field.range().isFixed() === false) {\n      throw new IllegalArgumentException('Field must have a fixed set of values: ' + field);\n    }\n\n    if (minWidth < 0 || minWidth > 9) {\n      throw new IllegalArgumentException('Minimum width must be from 0 to 9 inclusive but was ' + minWidth);\n    }\n\n    if (maxWidth < 1 || maxWidth > 9) {\n      throw new IllegalArgumentException('Maximum width must be from 1 to 9 inclusive but was ' + maxWidth);\n    }\n\n    if (maxWidth < minWidth) {\n      throw new IllegalArgumentException('Maximum width must exceed or equal the minimum width but ' + maxWidth + ' < ' + minWidth);\n    }\n\n    this.field = field;\n    this.minWidth = minWidth;\n    this.maxWidth = maxWidth;\n    this.decimalPoint = decimalPoint;\n  }\n\n  var _proto = FractionPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    var value = context.getValue(this.field);\n\n    if (value === null) {\n      return false;\n    }\n\n    var symbols = context.symbols();\n\n    if (value === 0) {\n      if (this.minWidth > 0) {\n        if (this.decimalPoint) {\n          buf.append(symbols.decimalSeparator());\n        }\n\n        for (var i = 0; i < this.minWidth; i++) {\n          buf.append(symbols.zeroDigit());\n        }\n      }\n    } else {\n      var fraction = this.convertToFraction(value, symbols.zeroDigit());\n      var outputScale = Math.min(Math.max(fraction.length, this.minWidth), this.maxWidth);\n      fraction = fraction.substr(0, outputScale);\n\n      if (fraction * 1 > 0) {\n        while (fraction.length > this.minWidth && fraction[fraction.length - 1] === '0') {\n          fraction = fraction.substr(0, fraction.length - 1);\n        }\n      }\n\n      var str = fraction;\n      str = symbols.convertNumberToI18N(str);\n\n      if (this.decimalPoint) {\n        buf.append(symbols.decimalSeparator());\n      }\n\n      buf.append(str);\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var effectiveMin = context.isStrict() ? this.minWidth : 0;\n    var effectiveMax = context.isStrict() ? this.maxWidth : 9;\n    var length = text.length;\n\n    if (position === length) {\n      return effectiveMin > 0 ? ~position : position;\n    }\n\n    if (this.decimalPoint) {\n      if (text[position] !== context.symbols().decimalSeparator()) {\n        return effectiveMin > 0 ? ~position : position;\n      }\n\n      position++;\n    }\n\n    var minEndPos = position + effectiveMin;\n\n    if (minEndPos > length) {\n      return ~position;\n    }\n\n    var maxEndPos = Math.min(position + effectiveMax, length);\n    var total = 0;\n    var pos = position;\n\n    while (pos < maxEndPos) {\n      var ch = text.charAt(pos++);\n      var digit = context.symbols().convertToDigit(ch);\n\n      if (digit < 0) {\n        if (pos < minEndPos) {\n          return ~position;\n        }\n\n        pos--;\n        break;\n      }\n\n      total = total * 10 + digit;\n    }\n\n    var moveLeft = pos - position;\n    var scale = Math.pow(10, moveLeft);\n    var value = this.convertFromFraction(total, scale);\n    return context.setParsedField(this.field, value, position, pos);\n  };\n\n  _proto.convertToFraction = function convertToFraction(value, zeroDigit) {\n    var range = this.field.range();\n    range.checkValidValue(value, this.field);\n\n    var _min = range.minimum();\n\n    var _range = range.maximum() - _min + 1;\n\n    var _value = value - _min;\n\n    var _scaled = MathUtil.intDiv(_value * 1000000000, _range);\n\n    var fraction = '' + _scaled;\n\n    while (fraction.length < 9) {\n      fraction = zeroDigit + fraction;\n    }\n\n    return fraction;\n  };\n\n  _proto.convertFromFraction = function convertFromFraction(total, scale) {\n    var range = this.field.range();\n\n    var _min = range.minimum();\n\n    var _range = range.maximum() - _min + 1;\n\n    var _value = MathUtil.intDiv(total * _range, scale);\n\n    return _value;\n  };\n\n  _proto.toString = function toString() {\n    var decimal = this.decimalPoint ? ',DecimalPoint' : '';\n    return 'Fraction(' + this.field + ',' + this.minWidth + ',' + this.maxWidth + decimal + ')';\n  };\n\n  return FractionPrinterParser;\n}();\n\nvar MAX_WIDTH = 15;\nvar EXCEED_POINTS = [0, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000];\nvar NumberPrinterParser = function () {\n  function NumberPrinterParser(field, minWidth, maxWidth, signStyle, subsequentWidth) {\n    if (subsequentWidth === void 0) {\n      subsequentWidth = 0;\n    }\n\n    this._field = field;\n    this._minWidth = minWidth;\n    this._maxWidth = maxWidth;\n    this._signStyle = signStyle;\n    this._subsequentWidth = subsequentWidth;\n  }\n\n  var _proto = NumberPrinterParser.prototype;\n\n  _proto.field = function field() {\n    return this._field;\n  };\n\n  _proto.minWidth = function minWidth() {\n    return this._minWidth;\n  };\n\n  _proto.maxWidth = function maxWidth() {\n    return this._maxWidth;\n  };\n\n  _proto.signStyle = function signStyle() {\n    return this._signStyle;\n  };\n\n  _proto.withFixedWidth = function withFixedWidth() {\n    if (this._subsequentWidth === -1) {\n      return this;\n    }\n\n    return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, -1);\n  };\n\n  _proto.withSubsequentWidth = function withSubsequentWidth(subsequentWidth) {\n    return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, this._subsequentWidth + subsequentWidth);\n  };\n\n  _proto._isFixedWidth = function _isFixedWidth() {\n    return this._subsequentWidth === -1 || this._subsequentWidth > 0 && this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE;\n  };\n\n  _proto.print = function print(context, buf) {\n    var contextValue = context.getValue(this._field);\n\n    if (contextValue == null) {\n      return false;\n    }\n\n    var value = this._getValue(context, contextValue);\n\n    var symbols = context.symbols();\n    var str = '' + Math.abs(value);\n\n    if (str.length > this._maxWidth) {\n      throw new DateTimeException('Field ' + this._field + ' cannot be printed as the value ' + value + ' exceeds the maximum print width of ' + this._maxWidth);\n    }\n\n    str = symbols.convertNumberToI18N(str);\n\n    if (value >= 0) {\n      switch (this._signStyle) {\n        case SignStyle.EXCEEDS_PAD:\n          if (this._minWidth < MAX_WIDTH && value >= EXCEED_POINTS[this._minWidth]) {\n            buf.append(symbols.positiveSign());\n          }\n\n          break;\n\n        case SignStyle.ALWAYS:\n          buf.append(symbols.positiveSign());\n          break;\n      }\n    } else {\n      switch (this._signStyle) {\n        case SignStyle.NORMAL:\n        case SignStyle.EXCEEDS_PAD:\n        case SignStyle.ALWAYS:\n          buf.append(symbols.negativeSign());\n          break;\n\n        case SignStyle.NOT_NEGATIVE:\n          throw new DateTimeException('Field ' + this._field + ' cannot be printed as the value ' + value + ' cannot be negative according to the SignStyle');\n      }\n    }\n\n    for (var i = 0; i < this._minWidth - str.length; i++) {\n      buf.append(symbols.zeroDigit());\n    }\n\n    buf.append(str);\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n\n    if (position === length) {\n      return ~position;\n    }\n\n    assert(position >= 0 && position < length);\n    var sign = text.charAt(position);\n    var negative = false;\n    var positive = false;\n\n    if (sign === context.symbols().positiveSign()) {\n      if (this._signStyle.parse(true, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n        return ~position;\n      }\n\n      positive = true;\n      position++;\n    } else if (sign === context.symbols().negativeSign()) {\n      if (this._signStyle.parse(false, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n        return ~position;\n      }\n\n      negative = true;\n      position++;\n    } else {\n      if (this._signStyle === SignStyle.ALWAYS && context.isStrict()) {\n        return ~position;\n      }\n    }\n\n    var effMinWidth = context.isStrict() || this._isFixedWidth() ? this._minWidth : 1;\n    var minEndPos = position + effMinWidth;\n\n    if (minEndPos > length) {\n      return ~position;\n    }\n\n    var effMaxWidth = (context.isStrict() || this._isFixedWidth() ? this._maxWidth : 9) + Math.max(this._subsequentWidth, 0);\n    var total = 0;\n    var pos = position;\n\n    for (var pass = 0; pass < 2; pass++) {\n      var maxEndPos = Math.min(pos + effMaxWidth, length);\n\n      while (pos < maxEndPos) {\n        var ch = text.charAt(pos++);\n        var digit = context.symbols().convertToDigit(ch);\n\n        if (digit < 0) {\n          pos--;\n\n          if (pos < minEndPos) {\n            return ~position;\n          }\n\n          break;\n        }\n\n        if (pos - position > MAX_WIDTH) {\n          throw new ArithmeticException('number text exceeds length');\n        } else {\n          total = total * 10 + digit;\n        }\n      }\n\n      if (this._subsequentWidth > 0 && pass === 0) {\n        var parseLen = pos - position;\n        effMaxWidth = Math.max(effMinWidth, parseLen - this._subsequentWidth);\n        pos = position;\n        total = 0;\n      } else {\n        break;\n      }\n    }\n\n    if (negative) {\n      if (total === 0 && context.isStrict()) {\n        return ~(position - 1);\n      }\n\n      if (total !== 0) {\n        total = -total;\n      }\n    } else if (this._signStyle === SignStyle.EXCEEDS_PAD && context.isStrict()) {\n      var _parseLen = pos - position;\n\n      if (positive) {\n        if (_parseLen <= this._minWidth) {\n          return ~(position - 1);\n        }\n      } else {\n        if (_parseLen > this._minWidth) {\n          return ~position;\n        }\n      }\n    }\n\n    return this._setValue(context, total, position, pos);\n  };\n\n  _proto._getValue = function _getValue(context, value) {\n    return value;\n  };\n\n  _proto._setValue = function _setValue(context, value, errorPos, successPos) {\n    return context.setParsedField(this._field, value, errorPos, successPos);\n  };\n\n  _proto.toString = function toString() {\n    if (this._minWidth === 1 && this._maxWidth === MAX_WIDTH && this._signStyle === SignStyle.NORMAL) {\n      return 'Value(' + this._field + ')';\n    }\n\n    if (this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE) {\n      return 'Value(' + this._field + ',' + this._minWidth + ')';\n    }\n\n    return 'Value(' + this._field + ',' + this._minWidth + ',' + this._maxWidth + ',' + this._signStyle + ')';\n  };\n\n  return NumberPrinterParser;\n}();\nvar ReducedPrinterParser = function (_NumberPrinterParser) {\n  _inheritsLoose(ReducedPrinterParser, _NumberPrinterParser);\n\n  function ReducedPrinterParser(field, width, maxWidth, baseValue, baseDate) {\n    var _this;\n\n    _this = _NumberPrinterParser.call(this, field, width, maxWidth, SignStyle.NOT_NEGATIVE) || this;\n\n    if (width < 1 || width > 10) {\n      throw new IllegalArgumentException('The width must be from 1 to 10 inclusive but was ' + width);\n    }\n\n    if (maxWidth < 1 || maxWidth > 10) {\n      throw new IllegalArgumentException('The maxWidth must be from 1 to 10 inclusive but was ' + maxWidth);\n    }\n\n    if (maxWidth < width) {\n      throw new IllegalArgumentException('The maxWidth must be greater than the width');\n    }\n\n    if (baseDate === null) {\n      if (field.range().isValidValue(baseValue) === false) {\n        throw new IllegalArgumentException('The base value must be within the range of the field');\n      }\n\n      if (baseValue + EXCEED_POINTS[width] > MathUtil.MAX_SAFE_INTEGER) {\n        throw new DateTimeException('Unable to add printer-parser as the range exceeds the capacity of an int');\n      }\n    }\n\n    _this._baseValue = baseValue;\n    _this._baseDate = baseDate;\n    return _this;\n  }\n\n  var _proto2 = ReducedPrinterParser.prototype;\n\n  _proto2._getValue = function _getValue(context, value) {\n    var absValue = Math.abs(value);\n    var baseValue = this._baseValue;\n\n    if (this._baseDate !== null) {\n      context.temporal();\n      var chrono = IsoChronology.INSTANCE;\n      baseValue = chrono.date(this._baseDate).get(this._field);\n    }\n\n    if (value >= baseValue && value < baseValue + EXCEED_POINTS[this._minWidth]) {\n      return absValue % EXCEED_POINTS[this._minWidth];\n    }\n\n    return absValue % EXCEED_POINTS[this._maxWidth];\n  };\n\n  _proto2._setValue = function _setValue(context, value, errorPos, successPos) {\n    var baseValue = this._baseValue;\n\n    if (this._baseDate != null) {\n      var chrono = context.getEffectiveChronology();\n      baseValue = chrono.date(this._baseDate).get(this._field);\n    }\n\n    var parseLen = successPos - errorPos;\n\n    if (parseLen === this._minWidth && value >= 0) {\n      var range = EXCEED_POINTS[this._minWidth];\n      var lastPart = baseValue % range;\n      var basePart = baseValue - lastPart;\n\n      if (baseValue > 0) {\n        value = basePart + value;\n      } else {\n        value = basePart - value;\n      }\n\n      if (value < baseValue) {\n        value += range;\n      }\n    }\n\n    return context.setParsedField(this._field, value, errorPos, successPos);\n  };\n\n  _proto2.withFixedWidth = function withFixedWidth() {\n    if (this._subsequentWidth === -1) {\n      return this;\n    }\n\n    return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate, -1);\n  };\n\n  _proto2.withSubsequentWidth = function withSubsequentWidth(subsequentWidth) {\n    return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate, this._subsequentWidth + subsequentWidth);\n  };\n\n  _proto2.isFixedWidth = function isFixedWidth(context) {\n    if (context.isStrict() === false) {\n      return false;\n    }\n\n    return _NumberPrinterParser.prototype.isFixedWidth.call(this, context);\n  };\n\n  _proto2.toString = function toString() {\n    return 'ReducedValue(' + this._field + ',' + this._minWidth + ',' + this._maxWidth + ',' + (this._baseDate != null ? this._baseDate : this._baseValue) + ')';\n  };\n\n  return ReducedPrinterParser;\n}(NumberPrinterParser);\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar PATTERNS = ['+HH', '+HHmm', '+HH:mm', '+HHMM', '+HH:MM', '+HHMMss', '+HH:MM:ss', '+HHMMSS', '+HH:MM:SS'];\nvar OffsetIdPrinterParser = function () {\n  function OffsetIdPrinterParser(noOffsetText, pattern) {\n    requireNonNull(noOffsetText, 'noOffsetText');\n    requireNonNull(pattern, 'pattern');\n    this.noOffsetText = noOffsetText;\n    this.type = this._checkPattern(pattern);\n  }\n\n  var _proto = OffsetIdPrinterParser.prototype;\n\n  _proto._checkPattern = function _checkPattern(pattern) {\n    for (var i = 0; i < PATTERNS.length; i++) {\n      if (PATTERNS[i] === pattern) {\n        return i;\n      }\n    }\n\n    throw new IllegalArgumentException('Invalid zone offset pattern: ' + pattern);\n  };\n\n  _proto.print = function print(context, buf) {\n    var offsetSecs = context.getValue(ChronoField.OFFSET_SECONDS);\n\n    if (offsetSecs == null) {\n      return false;\n    }\n\n    var totalSecs = MathUtil.safeToInt(offsetSecs);\n\n    if (totalSecs === 0) {\n      buf.append(this.noOffsetText);\n    } else {\n      var absHours = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 3600), 100));\n      var absMinutes = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 60), 60));\n      var absSeconds = Math.abs(MathUtil.intMod(totalSecs, 60));\n      var bufPos = buf.length();\n      var output = absHours;\n      buf.append(totalSecs < 0 ? '-' : '+').appendChar(MathUtil.intDiv(absHours, 10) + '0').appendChar(MathUtil.intMod(absHours, 10) + '0');\n\n      if (this.type >= 3 || this.type >= 1 && absMinutes > 0) {\n        buf.append(this.type % 2 === 0 ? ':' : '').appendChar(MathUtil.intDiv(absMinutes, 10) + '0').appendChar(absMinutes % 10 + '0');\n        output += absMinutes;\n\n        if (this.type >= 7 || this.type >= 5 && absSeconds > 0) {\n          buf.append(this.type % 2 === 0 ? ':' : '').appendChar(MathUtil.intDiv(absSeconds, 10) + '0').appendChar(absSeconds % 10 + '0');\n          output += absSeconds;\n        }\n      }\n\n      if (output === 0) {\n        buf.setLength(bufPos);\n        buf.append(this.noOffsetText);\n      }\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n    var noOffsetLen = this.noOffsetText.length;\n\n    if (noOffsetLen === 0) {\n      if (position === length) {\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position);\n      }\n    } else {\n      if (position === length) {\n        return ~position;\n      }\n\n      if (context.subSequenceEquals(text, position, this.noOffsetText, 0, noOffsetLen)) {\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n      }\n    }\n\n    var sign = text[position];\n\n    if (sign === '+' || sign === '-') {\n      var negative = sign === '-' ? -1 : 1;\n      var array = [0, 0, 0, 0];\n      array[0] = position + 1;\n\n      if ((this._parseNumber(array, 1, text, true) || this._parseNumber(array, 2, text, this.type >= 3) || this._parseNumber(array, 3, text, false)) === false) {\n        var offsetSecs = MathUtil.safeZero(negative * (array[1] * 3600 + array[2] * 60 + array[3]));\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, offsetSecs, position, array[0]);\n      }\n    }\n\n    if (noOffsetLen === 0) {\n      return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n    }\n\n    return ~position;\n  };\n\n  _proto._parseNumber = function _parseNumber(array, arrayIndex, parseText, required) {\n    if ((this.type + 3) / 2 < arrayIndex) {\n      return false;\n    }\n\n    var pos = array[0];\n\n    if (this.type % 2 === 0 && arrayIndex > 1) {\n      if (pos + 1 > parseText.length || parseText[pos] !== ':') {\n        return required;\n      }\n\n      pos++;\n    }\n\n    if (pos + 2 > parseText.length) {\n      return required;\n    }\n\n    var ch1 = parseText[pos++];\n    var ch2 = parseText[pos++];\n\n    if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {\n      return required;\n    }\n\n    var value = (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n\n    if (value < 0 || value > 59) {\n      return required;\n    }\n\n    array[arrayIndex] = value;\n    array[0] = pos;\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    var converted = this.noOffsetText.replace('\\'', '\\'\\'');\n    return 'Offset(' + PATTERNS[this.type] + ',\\'' + converted + '\\')';\n  };\n\n  return OffsetIdPrinterParser;\n}();\nOffsetIdPrinterParser.INSTANCE_ID = new OffsetIdPrinterParser('Z', '+HH:MM:ss');\nOffsetIdPrinterParser.PATTERNS = PATTERNS;\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar PadPrinterParserDecorator = function () {\n  function PadPrinterParserDecorator(printerParser, padWidth, padChar) {\n    this._printerParser = printerParser;\n    this._padWidth = padWidth;\n    this._padChar = padChar;\n  }\n\n  var _proto = PadPrinterParserDecorator.prototype;\n\n  _proto.print = function print(context, buf) {\n    var preLen = buf.length();\n\n    if (this._printerParser.print(context, buf) === false) {\n      return false;\n    }\n\n    var len = buf.length() - preLen;\n\n    if (len > this._padWidth) {\n      throw new DateTimeException(\"Cannot print as output of \" + len + \" characters exceeds pad width of \" + this._padWidth);\n    }\n\n    for (var i = 0; i < this._padWidth - len; i++) {\n      buf.insert(preLen, this._padChar);\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var strict = context.isStrict();\n    var caseSensitive = context.isCaseSensitive();\n    assert(!(position > text.length));\n    assert(position >= 0);\n\n    if (position === text.length) {\n      return ~position;\n    }\n\n    var endPos = position + this._padWidth;\n\n    if (endPos > text.length) {\n      if (strict) {\n        return ~position;\n      }\n\n      endPos = text.length;\n    }\n\n    var pos = position;\n\n    while (pos < endPos && (caseSensitive ? text[pos] === this._padChar : context.charEquals(text[pos], this._padChar))) {\n      pos++;\n    }\n\n    text = text.substring(0, endPos);\n\n    var resultPos = this._printerParser.parse(context, text, pos);\n\n    if (resultPos !== endPos && strict) {\n      return ~(position + pos);\n    }\n\n    return resultPos;\n  };\n\n  _proto.toString = function toString() {\n    return \"Pad(\" + this._printerParser + \",\" + this._padWidth + (this._padChar === ' ' ? ')' : ',\\'' + this._padChar + '\\')');\n  };\n\n  return PadPrinterParserDecorator;\n}();\n\nvar SettingsParser = function (_Enum) {\n  _inheritsLoose(SettingsParser, _Enum);\n\n  function SettingsParser() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = SettingsParser.prototype;\n\n  _proto.print = function print() {\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    switch (this) {\n      case SettingsParser.SENSITIVE:\n        context.setCaseSensitive(true);\n        break;\n\n      case SettingsParser.INSENSITIVE:\n        context.setCaseSensitive(false);\n        break;\n\n      case SettingsParser.STRICT:\n        context.setStrict(true);\n        break;\n\n      case SettingsParser.LENIENT:\n        context.setStrict(false);\n        break;\n    }\n\n    return position;\n  };\n\n  _proto.toString = function toString() {\n    switch (this) {\n      case SettingsParser.SENSITIVE:\n        return 'ParseCaseSensitive(true)';\n\n      case SettingsParser.INSENSITIVE:\n        return 'ParseCaseSensitive(false)';\n\n      case SettingsParser.STRICT:\n        return 'ParseStrict(true)';\n\n      case SettingsParser.LENIENT:\n        return 'ParseStrict(false)';\n    }\n  };\n\n  return SettingsParser;\n}(Enum);\nSettingsParser.SENSITIVE = new SettingsParser('SENSITIVE');\nSettingsParser.INSENSITIVE = new SettingsParser('INSENSITIVE');\nSettingsParser.STRICT = new SettingsParser('STRICT');\nSettingsParser.LENIENT = new SettingsParser('LENIENT');\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar StringLiteralPrinterParser = function () {\n  function StringLiteralPrinterParser(literal) {\n    this._literal = literal;\n  }\n\n  var _proto = StringLiteralPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    buf.append(this._literal);\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n    assert(!(position > length || position < 0));\n\n    if (context.subSequenceEquals(text, position, this._literal, 0, this._literal.length) === false) {\n      return ~position;\n    }\n\n    return position + this._literal.length;\n  };\n\n  _proto.toString = function toString() {\n    var converted = this._literal.replace(\"'\", \"''\");\n\n    return '\\'' + converted + '\\'';\n  };\n\n  return StringLiteralPrinterParser;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter, Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneRulesProvider = function () {\n  function ZoneRulesProvider() {}\n\n  ZoneRulesProvider.getRules = function getRules(zoneId) {\n    throw new DateTimeException('unsupported ZoneId:' + zoneId);\n  };\n\n  ZoneRulesProvider.getAvailableZoneIds = function getAvailableZoneIds() {\n    return [];\n  };\n\n  return ZoneRulesProvider;\n}();\n\nvar ZoneRegion = function (_ZoneId) {\n  _inheritsLoose(ZoneRegion, _ZoneId);\n\n  ZoneRegion.ofId = function ofId(zoneId) {\n    var rules = ZoneRulesProvider.getRules(zoneId);\n    return new ZoneRegion(zoneId, rules);\n  };\n\n  function ZoneRegion(id, rules) {\n    var _this;\n\n    _this = _ZoneId.call(this) || this;\n    _this._id = id;\n    _this._rules = rules;\n    return _this;\n  }\n\n  var _proto = ZoneRegion.prototype;\n\n  _proto.id = function id() {\n    return this._id;\n  };\n\n  _proto.rules = function rules() {\n    return this._rules;\n  };\n\n  return ZoneRegion;\n}(ZoneId);\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneIdPrinterParser = function () {\n  function ZoneIdPrinterParser(query, description) {\n    this.query = query;\n    this.description = description;\n  }\n\n  var _proto = ZoneIdPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    var zone = context.getValueQuery(this.query);\n\n    if (zone == null) {\n      return false;\n    }\n\n    buf.append(zone.id());\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n\n    if (position > length) {\n      return ~position;\n    }\n\n    if (position === length) {\n      return ~position;\n    }\n\n    var nextChar = text.charAt(position);\n\n    if (nextChar === '+' || nextChar === '-') {\n      var newContext = context.copy();\n      var endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n\n      if (endPos < 0) {\n        return endPos;\n      }\n\n      var offset = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n      var zone = ZoneOffset.ofTotalSeconds(offset);\n      context.setParsedZone(zone);\n      return endPos;\n    } else if (length >= position + 2) {\n      var nextNextChar = text.charAt(position + 1);\n\n      if (context.charEquals(nextChar, 'U') && context.charEquals(nextNextChar, 'T')) {\n        if (length >= position + 3 && context.charEquals(text.charAt(position + 2), 'C')) {\n          return this._parsePrefixedOffset(context, text, position, position + 3);\n        }\n\n        return this._parsePrefixedOffset(context, text, position, position + 2);\n      } else if (context.charEquals(nextChar, 'G') && length >= position + 3 && context.charEquals(nextNextChar, 'M') && context.charEquals(text.charAt(position + 2), 'T')) {\n        return this._parsePrefixedOffset(context, text, position, position + 3);\n      }\n    }\n\n    if (text.substr(position, 6) === 'SYSTEM') {\n      context.setParsedZone(ZoneId.systemDefault());\n      return position + 6;\n    }\n\n    if (context.charEquals(nextChar, 'Z')) {\n      context.setParsedZone(ZoneOffset.UTC);\n      return position + 1;\n    }\n\n    var availableZoneIds = ZoneRulesProvider.getAvailableZoneIds();\n\n    if (zoneIdTree.size !== availableZoneIds.length) {\n      zoneIdTree = ZoneIdTree.createTreeMap(availableZoneIds);\n    }\n\n    var maxParseLength = length - position;\n    var treeMap = zoneIdTree.treeMap;\n    var parsedZoneId = null;\n    var parseLength = 0;\n\n    while (treeMap != null) {\n      var parsedSubZoneId = text.substr(position, Math.min(treeMap.length, maxParseLength));\n      treeMap = treeMap.get(parsedSubZoneId);\n\n      if (treeMap != null && treeMap.isLeaf) {\n        parsedZoneId = parsedSubZoneId;\n        parseLength = treeMap.length;\n      }\n    }\n\n    if (parsedZoneId != null) {\n      context.setParsedZone(ZoneRegion.ofId(parsedZoneId));\n      return position + parseLength;\n    }\n\n    return ~position;\n  };\n\n  _proto._parsePrefixedOffset = function _parsePrefixedOffset(context, text, prefixPos, position) {\n    var prefix = text.substring(prefixPos, position).toUpperCase();\n    var newContext = context.copy();\n\n    if (position < text.length && context.charEquals(text.charAt(position), 'Z')) {\n      context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n      return position;\n    }\n\n    var endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n\n    if (endPos < 0) {\n      context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n      return position;\n    }\n\n    var offsetSecs = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n    var offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n    context.setParsedZone(ZoneId.ofOffset(prefix, offset));\n    return endPos;\n  };\n\n  _proto.toString = function toString() {\n    return this.description;\n  };\n\n  return ZoneIdPrinterParser;\n}();\n\nvar ZoneIdTree = function () {\n  ZoneIdTree.createTreeMap = function createTreeMap(availableZoneIds) {\n    var sortedZoneIds = availableZoneIds.sort(function (a, b) {\n      return a.length - b.length;\n    });\n    var treeMap = new ZoneIdTreeMap(sortedZoneIds[0].length, false);\n\n    for (var i = 0; i < sortedZoneIds.length; i++) {\n      treeMap.add(sortedZoneIds[i]);\n    }\n\n    return new ZoneIdTree(sortedZoneIds.length, treeMap);\n  };\n\n  function ZoneIdTree(size, treeMap) {\n    this.size = size;\n    this.treeMap = treeMap;\n  }\n\n  return ZoneIdTree;\n}();\n\nvar ZoneIdTreeMap = function () {\n  function ZoneIdTreeMap(length, isLeaf) {\n    if (length === void 0) {\n      length = 0;\n    }\n\n    if (isLeaf === void 0) {\n      isLeaf = false;\n    }\n\n    this.length = length;\n    this.isLeaf = isLeaf;\n    this._treeMap = {};\n  }\n\n  var _proto2 = ZoneIdTreeMap.prototype;\n\n  _proto2.add = function add(zoneId) {\n    var idLength = zoneId.length;\n\n    if (idLength === this.length) {\n      this._treeMap[zoneId] = new ZoneIdTreeMap(idLength, true);\n    } else if (idLength > this.length) {\n      var subZoneId = zoneId.substr(0, this.length);\n      var subTreeMap = this._treeMap[subZoneId];\n\n      if (subTreeMap == null) {\n        subTreeMap = new ZoneIdTreeMap(idLength, false);\n        this._treeMap[subZoneId] = subTreeMap;\n      }\n\n      subTreeMap.add(zoneId);\n    }\n  };\n\n  _proto2.get = function get(zoneId) {\n    return this._treeMap[zoneId];\n  };\n\n  return ZoneIdTreeMap;\n}();\n\nvar zoneIdTree = new ZoneIdTree([]);\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar MAX_WIDTH$1 = 15;\nvar DateTimeFormatterBuilder = function () {\n  function DateTimeFormatterBuilder() {\n    this._active = this;\n    this._parent = null;\n    this._printerParsers = [];\n    this._optional = false;\n    this._padNextWidth = 0;\n    this._padNextChar = null;\n    this._valueParserIndex = -1;\n  }\n\n  DateTimeFormatterBuilder._of = function _of(parent, optional) {\n    requireNonNull(parent, 'parent');\n    requireNonNull(optional, 'optional');\n    var dtFormatterBuilder = new DateTimeFormatterBuilder();\n    dtFormatterBuilder._parent = parent;\n    dtFormatterBuilder._optional = optional;\n    return dtFormatterBuilder;\n  };\n\n  var _proto = DateTimeFormatterBuilder.prototype;\n\n  _proto.parseCaseSensitive = function parseCaseSensitive() {\n    this._appendInternalPrinterParser(SettingsParser.SENSITIVE);\n\n    return this;\n  };\n\n  _proto.parseCaseInsensitive = function parseCaseInsensitive() {\n    this._appendInternalPrinterParser(SettingsParser.INSENSITIVE);\n\n    return this;\n  };\n\n  _proto.parseStrict = function parseStrict() {\n    this._appendInternalPrinterParser(SettingsParser.STRICT);\n\n    return this;\n  };\n\n  _proto.parseLenient = function parseLenient() {\n    this._appendInternalPrinterParser(SettingsParser.LENIENT);\n\n    return this;\n  };\n\n  _proto.appendValue = function appendValue() {\n    if (arguments.length === 1) {\n      return this._appendValue1.apply(this, arguments);\n    } else if (arguments.length === 2) {\n      return this._appendValue2.apply(this, arguments);\n    } else {\n      return this._appendValue4.apply(this, arguments);\n    }\n  };\n\n  _proto._appendValue1 = function _appendValue1(field) {\n    requireNonNull(field);\n\n    this._appendValuePrinterParser(new NumberPrinterParser(field, 1, MAX_WIDTH$1, SignStyle.NORMAL));\n\n    return this;\n  };\n\n  _proto._appendValue2 = function _appendValue2(field, width) {\n    requireNonNull(field);\n\n    if (width < 1 || width > MAX_WIDTH$1) {\n      throw new IllegalArgumentException(\"The width must be from 1 to \" + MAX_WIDTH$1 + \" inclusive but was \" + width);\n    }\n\n    var pp = new NumberPrinterParser(field, width, width, SignStyle.NOT_NEGATIVE);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto._appendValue4 = function _appendValue4(field, minWidth, maxWidth, signStyle) {\n    requireNonNull(field);\n    requireNonNull(signStyle);\n\n    if (minWidth === maxWidth && signStyle === SignStyle.NOT_NEGATIVE) {\n      return this._appendValue2(field, maxWidth);\n    }\n\n    if (minWidth < 1 || minWidth > MAX_WIDTH$1) {\n      throw new IllegalArgumentException(\"The minimum width must be from 1 to \" + MAX_WIDTH$1 + \" inclusive but was \" + minWidth);\n    }\n\n    if (maxWidth < 1 || maxWidth > MAX_WIDTH$1) {\n      throw new IllegalArgumentException(\"The minimum width must be from 1 to \" + MAX_WIDTH$1 + \" inclusive but was \" + maxWidth);\n    }\n\n    if (maxWidth < minWidth) {\n      throw new IllegalArgumentException(\"The maximum width must exceed or equal the minimum width but \" + maxWidth + \" < \" + minWidth);\n    }\n\n    var pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto.appendValueReduced = function appendValueReduced() {\n    if (arguments.length === 4 && arguments[3] instanceof ChronoLocalDate) {\n      return this._appendValueReducedFieldWidthMaxWidthBaseDate.apply(this, arguments);\n    } else {\n      return this._appendValueReducedFieldWidthMaxWidthBaseValue.apply(this, arguments);\n    }\n  };\n\n  _proto._appendValueReducedFieldWidthMaxWidthBaseValue = function _appendValueReducedFieldWidthMaxWidthBaseValue(field, width, maxWidth, baseValue) {\n    requireNonNull(field, 'field');\n    var pp = new ReducedPrinterParser(field, width, maxWidth, baseValue, null);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto._appendValueReducedFieldWidthMaxWidthBaseDate = function _appendValueReducedFieldWidthMaxWidthBaseDate(field, width, maxWidth, baseDate) {\n    requireNonNull(field, 'field');\n    requireNonNull(baseDate, 'baseDate');\n    requireInstance(baseDate, ChronoLocalDate, 'baseDate');\n    var pp = new ReducedPrinterParser(field, width, maxWidth, 0, baseDate);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto._appendValuePrinterParser = function _appendValuePrinterParser(pp) {\n    assert(pp != null);\n\n    if (this._active._valueParserIndex >= 0 && this._active._printerParsers[this._active._valueParserIndex] instanceof NumberPrinterParser) {\n      var activeValueParser = this._active._valueParserIndex;\n      var basePP = this._active._printerParsers[activeValueParser];\n\n      if (pp.minWidth() === pp.maxWidth() && pp.signStyle() === SignStyle.NOT_NEGATIVE) {\n        basePP = basePP.withSubsequentWidth(pp.maxWidth());\n\n        this._appendInternal(pp.withFixedWidth());\n\n        this._active._valueParserIndex = activeValueParser;\n      } else {\n        basePP = basePP.withFixedWidth();\n        this._active._valueParserIndex = this._appendInternal(pp);\n      }\n\n      this._active._printerParsers[activeValueParser] = basePP;\n    } else {\n      this._active._valueParserIndex = this._appendInternal(pp);\n    }\n\n    return this;\n  };\n\n  _proto.appendFraction = function appendFraction(field, minWidth, maxWidth, decimalPoint) {\n    this._appendInternal(new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint));\n\n    return this;\n  };\n\n  _proto.appendInstant = function appendInstant(fractionalDigits) {\n    if (fractionalDigits === void 0) {\n      fractionalDigits = -2;\n    }\n\n    if (fractionalDigits < -2 || fractionalDigits > 9) {\n      throw new IllegalArgumentException('Invalid fractional digits: ' + fractionalDigits);\n    }\n\n    this._appendInternal(new InstantPrinterParser(fractionalDigits));\n\n    return this;\n  };\n\n  _proto.appendOffsetId = function appendOffsetId() {\n    this._appendInternal(OffsetIdPrinterParser.INSTANCE_ID);\n\n    return this;\n  };\n\n  _proto.appendOffset = function appendOffset(pattern, noOffsetText) {\n    this._appendInternalPrinterParser(new OffsetIdPrinterParser(noOffsetText, pattern));\n\n    return this;\n  };\n\n  _proto.appendZoneId = function appendZoneId() {\n    this._appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), 'ZoneId()'));\n\n    return this;\n  };\n\n  _proto.appendPattern = function appendPattern(pattern) {\n    requireNonNull(pattern, 'pattern');\n\n    this._parsePattern(pattern);\n\n    return this;\n  };\n\n  _proto.appendZoneText = function appendZoneText() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto.appendText = function appendText() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto.appendLocalizedOffset = function appendLocalizedOffset() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto.appendWeekField = function appendWeekField() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto._parsePattern = function _parsePattern(pattern) {\n    var FIELD_MAP = {\n      'G': ChronoField.ERA,\n      'y': ChronoField.YEAR_OF_ERA,\n      'u': ChronoField.YEAR,\n      'Q': IsoFields.QUARTER_OF_YEAR,\n      'q': IsoFields.QUARTER_OF_YEAR,\n      'M': ChronoField.MONTH_OF_YEAR,\n      'L': ChronoField.MONTH_OF_YEAR,\n      'D': ChronoField.DAY_OF_YEAR,\n      'd': ChronoField.DAY_OF_MONTH,\n      'F': ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH,\n      'E': ChronoField.DAY_OF_WEEK,\n      'c': ChronoField.DAY_OF_WEEK,\n      'e': ChronoField.DAY_OF_WEEK,\n      'a': ChronoField.AMPM_OF_DAY,\n      'H': ChronoField.HOUR_OF_DAY,\n      'k': ChronoField.CLOCK_HOUR_OF_DAY,\n      'K': ChronoField.HOUR_OF_AMPM,\n      'h': ChronoField.CLOCK_HOUR_OF_AMPM,\n      'm': ChronoField.MINUTE_OF_HOUR,\n      's': ChronoField.SECOND_OF_MINUTE,\n      'S': ChronoField.NANO_OF_SECOND,\n      'A': ChronoField.MILLI_OF_DAY,\n      'n': ChronoField.NANO_OF_SECOND,\n      'N': ChronoField.NANO_OF_DAY\n    };\n\n    for (var pos = 0; pos < pattern.length; pos++) {\n      var cur = pattern.charAt(pos);\n\n      if (cur >= 'A' && cur <= 'Z' || cur >= 'a' && cur <= 'z') {\n        var start = pos++;\n\n        for (; pos < pattern.length && pattern.charAt(pos) === cur; pos++) {\n        }\n\n        var count = pos - start;\n\n        if (cur === 'p') {\n          var pad = 0;\n\n          if (pos < pattern.length) {\n            cur = pattern.charAt(pos);\n\n            if (cur >= 'A' && cur <= 'Z' || cur >= 'a' && cur <= 'z') {\n              pad = count;\n              start = pos++;\n\n              for (; pos < pattern.length && pattern.charAt(pos) === cur; pos++) {\n              }\n\n              count = pos - start;\n            }\n          }\n\n          if (pad === 0) {\n            throw new IllegalArgumentException('Pad letter \\'p\\' must be followed by valid pad pattern: ' + pattern);\n          }\n\n          this.padNext(pad);\n        }\n\n        var field = FIELD_MAP[cur];\n\n        if (field != null) {\n          this._parseField(cur, count, field);\n        } else if (cur === 'z') {\n          if (count > 4) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          } else if (count === 4) {\n            this.appendZoneText(TextStyle.FULL);\n          } else {\n            this.appendZoneText(TextStyle.SHORT);\n          }\n        } else if (cur === 'V') {\n          if (count !== 2) {\n            throw new IllegalArgumentException('Pattern letter count must be 2: ' + cur);\n          }\n\n          this.appendZoneId();\n        } else if (cur === 'Z') {\n          if (count < 4) {\n            this.appendOffset('+HHMM', '+0000');\n          } else if (count === 4) {\n            this.appendLocalizedOffset(TextStyle.FULL);\n          } else if (count === 5) {\n            this.appendOffset('+HH:MM:ss', 'Z');\n          } else {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n        } else if (cur === 'O') {\n          if (count === 1) {\n            this.appendLocalizedOffset(TextStyle.SHORT);\n          } else if (count === 4) {\n            this.appendLocalizedOffset(TextStyle.FULL);\n          } else {\n            throw new IllegalArgumentException('Pattern letter count must be 1 or 4: ' + cur);\n          }\n        } else if (cur === 'X') {\n          if (count > 5) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], 'Z');\n        } else if (cur === 'x') {\n          if (count > 5) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          var zero = count === 1 ? '+00' : count % 2 === 0 ? '+0000' : '+00:00';\n          this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], zero);\n        } else if (cur === 'W') {\n          if (count > 1) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          this.appendWeekField('W', count);\n        } else if (cur === 'w') {\n          if (count > 2) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          this.appendWeekField('w', count);\n        } else if (cur === 'Y') {\n          this.appendWeekField('Y', count);\n        } else {\n          throw new IllegalArgumentException('Unknown pattern letter: ' + cur);\n        }\n\n        pos--;\n      } else if (cur === '\\'') {\n        var _start = pos++;\n\n        for (; pos < pattern.length; pos++) {\n          if (pattern.charAt(pos) === '\\'') {\n            if (pos + 1 < pattern.length && pattern.charAt(pos + 1) === '\\'') {\n              pos++;\n            } else {\n              break;\n            }\n          }\n        }\n\n        if (pos >= pattern.length) {\n          throw new IllegalArgumentException('Pattern ends with an incomplete string literal: ' + pattern);\n        }\n\n        var str = pattern.substring(_start + 1, pos);\n\n        if (str.length === 0) {\n          this.appendLiteral('\\'');\n        } else {\n          this.appendLiteral(str.replace('\\'\\'', '\\''));\n        }\n      } else if (cur === '[') {\n        this.optionalStart();\n      } else if (cur === ']') {\n        if (this._active._parent === null) {\n          throw new IllegalArgumentException('Pattern invalid as it contains ] without previous [');\n        }\n\n        this.optionalEnd();\n      } else if (cur === '{' || cur === '}' || cur === '#') {\n        throw new IllegalArgumentException('Pattern includes reserved character: \\'' + cur + '\\'');\n      } else {\n        this.appendLiteral(cur);\n      }\n    }\n  };\n\n  _proto._parseField = function _parseField(cur, count, field) {\n    switch (cur) {\n      case 'u':\n      case 'y':\n        if (count === 2) {\n          this.appendValueReduced(field, 2, 2, ReducedPrinterParser.BASE_DATE);\n        } else if (count < 4) {\n          this.appendValue(field, count, MAX_WIDTH$1, SignStyle.NORMAL);\n        } else {\n          this.appendValue(field, count, MAX_WIDTH$1, SignStyle.EXCEEDS_PAD);\n        }\n\n        break;\n\n      case 'M':\n      case 'Q':\n        switch (count) {\n          case 1:\n            this.appendValue(field);\n            break;\n\n          case 2:\n            this.appendValue(field, 2);\n            break;\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'L':\n      case 'q':\n        switch (count) {\n          case 1:\n            this.appendValue(field);\n            break;\n\n          case 2:\n            this.appendValue(field, 2);\n            break;\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT_STANDALONE);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL_STANDALONE);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW_STANDALONE);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'e':\n        switch (count) {\n          case 1:\n          case 2:\n            this.appendWeekField('e', count);\n            break;\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'c':\n        switch (count) {\n          case 1:\n            this.appendWeekField('c', count);\n            break;\n\n          case 2:\n            throw new IllegalArgumentException('Invalid number of pattern letters: ' + cur);\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT_STANDALONE);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL_STANDALONE);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW_STANDALONE);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'a':\n        if (count === 1) {\n          this.appendText(field, TextStyle.SHORT);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'E':\n      case 'G':\n        switch (count) {\n          case 1:\n          case 2:\n          case 3:\n            this.appendText(field, TextStyle.SHORT);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'S':\n        this.appendFraction(ChronoField.NANO_OF_SECOND, count, count, false);\n        break;\n\n      case 'F':\n        if (count === 1) {\n          this.appendValue(field);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'd':\n      case 'h':\n      case 'H':\n      case 'k':\n      case 'K':\n      case 'm':\n      case 's':\n        if (count === 1) {\n          this.appendValue(field);\n        } else if (count === 2) {\n          this.appendValue(field, count);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'D':\n        if (count === 1) {\n          this.appendValue(field);\n        } else if (count <= 3) {\n          this.appendValue(field, count);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      default:\n        if (count === 1) {\n          this.appendValue(field);\n        } else {\n          this.appendValue(field, count);\n        }\n\n        break;\n    }\n  };\n\n  _proto.padNext = function padNext() {\n    if (arguments.length === 1) {\n      return this._padNext1.apply(this, arguments);\n    } else {\n      return this._padNext2.apply(this, arguments);\n    }\n  };\n\n  _proto._padNext1 = function _padNext1(padWidth) {\n    return this._padNext2(padWidth, ' ');\n  };\n\n  _proto._padNext2 = function _padNext2(padWidth, padChar) {\n    if (padWidth < 1) {\n      throw new IllegalArgumentException('The pad width must be at least one but was ' + padWidth);\n    }\n\n    this._active._padNextWidth = padWidth;\n    this._active._padNextChar = padChar;\n    this._active._valueParserIndex = -1;\n    return this;\n  };\n\n  _proto.optionalStart = function optionalStart() {\n    this._active._valueParserIndex = -1;\n    this._active = DateTimeFormatterBuilder._of(this._active, true);\n    return this;\n  };\n\n  _proto.optionalEnd = function optionalEnd() {\n    if (this._active._parent == null) {\n      throw new IllegalStateException('Cannot call optionalEnd() as there was no previous call to optionalStart()');\n    }\n\n    if (this._active._printerParsers.length > 0) {\n      var cpp = new CompositePrinterParser(this._active._printerParsers, this._active._optional);\n      this._active = this._active._parent;\n\n      this._appendInternal(cpp);\n    } else {\n      this._active = this._active._parent;\n    }\n\n    return this;\n  };\n\n  _proto._appendInternal = function _appendInternal(pp) {\n    assert(pp != null);\n\n    if (this._active._padNextWidth > 0) {\n      if (pp != null) {\n        pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n      }\n\n      this._active._padNextWidth = 0;\n      this._active._padNextChar = 0;\n    }\n\n    this._active._printerParsers.push(pp);\n\n    this._active._valueParserIndex = -1;\n    return this._active._printerParsers.length - 1;\n  };\n\n  _proto.appendLiteral = function appendLiteral(literal) {\n    assert(literal != null);\n\n    if (literal.length > 0) {\n      if (literal.length === 1) {\n        this._appendInternalPrinterParser(new CharLiteralPrinterParser(literal.charAt(0)));\n      } else {\n        this._appendInternalPrinterParser(new StringLiteralPrinterParser(literal));\n      }\n    }\n\n    return this;\n  };\n\n  _proto._appendInternalPrinterParser = function _appendInternalPrinterParser(pp) {\n    assert(pp != null);\n\n    if (this._active._padNextWidth > 0) {\n      if (pp != null) {\n        pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n      }\n\n      this._active._padNextWidth = 0;\n      this._active._padNextChar = 0;\n    }\n\n    this._active._printerParsers.push(pp);\n\n    this._active._valueParserIndex = -1;\n    return this._active._printerParsers.length - 1;\n  };\n\n  _proto.append = function append(formatter) {\n    requireNonNull(formatter, 'formatter');\n\n    this._appendInternal(formatter._toPrinterParser(false));\n\n    return this;\n  };\n\n  _proto.toFormatter = function toFormatter(resolverStyle) {\n    if (resolverStyle === void 0) {\n      resolverStyle = ResolverStyle.SMART;\n    }\n\n    while (this._active._parent != null) {\n      this.optionalEnd();\n    }\n\n    var pp = new CompositePrinterParser(this._printerParsers, false);\n    return new DateTimeFormatter(pp, null, DecimalStyle.STANDARD, resolverStyle, null, null, null);\n  };\n\n  return DateTimeFormatterBuilder;\n}();\nvar SECONDS_PER_10000_YEARS = 146097 * 25 * 86400;\nvar SECONDS_0000_TO_1970 = (146097 * 5 - (30 * 365 + 7)) * 86400;\n\nvar InstantPrinterParser = function () {\n  function InstantPrinterParser(fractionalDigits) {\n    this.fractionalDigits = fractionalDigits;\n  }\n\n  var _proto2 = InstantPrinterParser.prototype;\n\n  _proto2.print = function print(context, buf) {\n    var inSecs = context.getValue(ChronoField.INSTANT_SECONDS);\n    var inNanos = 0;\n\n    if (context.temporal().isSupported(ChronoField.NANO_OF_SECOND)) {\n      inNanos = context.temporal().getLong(ChronoField.NANO_OF_SECOND);\n    }\n\n    if (inSecs == null) {\n      return false;\n    }\n\n    var inSec = inSecs;\n    var inNano = ChronoField.NANO_OF_SECOND.checkValidIntValue(inNanos);\n\n    if (inSec >= -SECONDS_0000_TO_1970) {\n      var zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n      var hi = MathUtil.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n      var lo = MathUtil.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n      var ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n\n      if (hi > 0) {\n        buf.append('+').append(hi);\n      }\n\n      buf.append(ldt);\n\n      if (ldt.second() === 0) {\n        buf.append(':00');\n      }\n    } else {\n      var _zeroSecs = inSec + SECONDS_0000_TO_1970;\n\n      var _hi = MathUtil.intDiv(_zeroSecs, SECONDS_PER_10000_YEARS);\n\n      var _lo = MathUtil.intMod(_zeroSecs, SECONDS_PER_10000_YEARS);\n\n      var _ldt = LocalDateTime.ofEpochSecond(_lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n\n      var pos = buf.length();\n      buf.append(_ldt);\n\n      if (_ldt.second() === 0) {\n        buf.append(':00');\n      }\n\n      if (_hi < 0) {\n        if (_ldt.year() === -10000) {\n          buf.replace(pos, pos + 2, '' + (_hi - 1));\n        } else if (_lo === 0) {\n          buf.insert(pos, _hi);\n        } else {\n          buf.insert(pos + 1, Math.abs(_hi));\n        }\n      }\n    }\n\n    if (this.fractionalDigits === -2) {\n      if (inNano !== 0) {\n        buf.append('.');\n\n        if (MathUtil.intMod(inNano, 1000000) === 0) {\n          buf.append(('' + (MathUtil.intDiv(inNano, 1000000) + 1000)).substring(1));\n        } else if (MathUtil.intMod(inNano, 1000) === 0) {\n          buf.append(('' + (MathUtil.intDiv(inNano, 1000) + 1000000)).substring(1));\n        } else {\n          buf.append(('' + (inNano + 1000000000)).substring(1));\n        }\n      }\n    } else if (this.fractionalDigits > 0 || this.fractionalDigits === -1 && inNano > 0) {\n      buf.append('.');\n      var div = 100000000;\n\n      for (var i = 0; this.fractionalDigits === -1 && inNano > 0 || i < this.fractionalDigits; i++) {\n        var digit = MathUtil.intDiv(inNano, div);\n        buf.append(digit);\n        inNano = inNano - digit * div;\n        div = MathUtil.intDiv(div, 10);\n      }\n    }\n\n    buf.append('Z');\n    return true;\n  };\n\n  _proto2.parse = function parse(context, text, position) {\n    var newContext = context.copy();\n    var minDigits = this.fractionalDigits < 0 ? 0 : this.fractionalDigits;\n    var maxDigits = this.fractionalDigits < 0 ? 9 : this.fractionalDigits;\n\n    var parser = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral('T').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(':').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral(':').appendValue(ChronoField.SECOND_OF_MINUTE, 2).appendFraction(ChronoField.NANO_OF_SECOND, minDigits, maxDigits, true).appendLiteral('Z').toFormatter()._toPrinterParser(false);\n\n    var pos = parser.parse(newContext, text, position);\n\n    if (pos < 0) {\n      return pos;\n    }\n\n    var yearParsed = newContext.getParsed(ChronoField.YEAR);\n    var month = newContext.getParsed(ChronoField.MONTH_OF_YEAR);\n    var day = newContext.getParsed(ChronoField.DAY_OF_MONTH);\n    var hour = newContext.getParsed(ChronoField.HOUR_OF_DAY);\n    var min = newContext.getParsed(ChronoField.MINUTE_OF_HOUR);\n    var secVal = newContext.getParsed(ChronoField.SECOND_OF_MINUTE);\n    var nanoVal = newContext.getParsed(ChronoField.NANO_OF_SECOND);\n    var sec = secVal != null ? secVal : 0;\n    var nano = nanoVal != null ? nanoVal : 0;\n    var year = MathUtil.intMod(yearParsed, 10000);\n    var days = 0;\n\n    if (hour === 24 && min === 0 && sec === 0 && nano === 0) {\n      hour = 0;\n      days = 1;\n    } else if (hour === 23 && min === 59 && sec === 60) {\n      context.setParsedLeapSecond();\n      sec = 59;\n    }\n\n    var instantSecs;\n\n    try {\n      var ldt = LocalDateTime.of(year, month, day, hour, min, sec, 0).plusDays(days);\n      instantSecs = ldt.toEpochSecond(ZoneOffset.UTC);\n      instantSecs += MathUtil.safeMultiply(MathUtil.intDiv(yearParsed, 10000), SECONDS_PER_10000_YEARS);\n    } catch (ex) {\n      return ~position;\n    }\n\n    var successPos = pos;\n    successPos = context.setParsedField(ChronoField.INSTANT_SECONDS, instantSecs, position, successPos);\n    return context.setParsedField(ChronoField.NANO_OF_SECOND, nano, position, successPos);\n  };\n\n  _proto2.toString = function toString() {\n    return 'Instant()';\n  };\n\n  return InstantPrinterParser;\n}();\n\nfunction _init$9() {\n  ReducedPrinterParser.BASE_DATE = LocalDate.of(2000, 1, 1);\n  DateTimeFormatterBuilder.CompositePrinterParser = CompositePrinterParser;\n  DateTimeFormatterBuilder.PadPrinterParserDecorator = PadPrinterParserDecorator;\n  DateTimeFormatterBuilder.SettingsParser = SettingsParser;\n  DateTimeFormatterBuilder.CharLiteralPrinterParser = StringLiteralPrinterParser;\n  DateTimeFormatterBuilder.StringLiteralPrinterParser = StringLiteralPrinterParser;\n  DateTimeFormatterBuilder.CharLiteralPrinterParser = CharLiteralPrinterParser;\n  DateTimeFormatterBuilder.NumberPrinterParser = NumberPrinterParser;\n  DateTimeFormatterBuilder.ReducedPrinterParser = ReducedPrinterParser;\n  DateTimeFormatterBuilder.FractionPrinterParser = FractionPrinterParser;\n  DateTimeFormatterBuilder.OffsetIdPrinterParser = OffsetIdPrinterParser;\n  DateTimeFormatterBuilder.ZoneIdPrinterParser = ZoneIdPrinterParser;\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar StringBuilder = function () {\n  function StringBuilder() {\n    this._str = '';\n  }\n\n  var _proto = StringBuilder.prototype;\n\n  _proto.append = function append(str) {\n    this._str += str;\n    return this;\n  };\n\n  _proto.appendChar = function appendChar(str) {\n    this._str += str[0];\n    return this;\n  };\n\n  _proto.insert = function insert(offset, str) {\n    this._str = this._str.slice(0, offset) + str + this._str.slice(offset);\n    return this;\n  };\n\n  _proto.replace = function replace(start, end, str) {\n    this._str = this._str.slice(0, start) + str + this._str.slice(end);\n    return this;\n  };\n\n  _proto.length = function length() {\n    return this._str.length;\n  };\n\n  _proto.setLength = function setLength(length) {\n    this._str = this._str.slice(0, length);\n    return this;\n  };\n\n  _proto.toString = function toString() {\n    return this._str;\n  };\n\n  return StringBuilder;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar DateTimeFormatter = function () {\n  DateTimeFormatter.parsedExcessDays = function parsedExcessDays() {\n    return DateTimeFormatter.PARSED_EXCESS_DAYS;\n  };\n\n  DateTimeFormatter.parsedLeapSecond = function parsedLeapSecond() {\n    return DateTimeFormatter.PARSED_LEAP_SECOND;\n  };\n\n  DateTimeFormatter.ofPattern = function ofPattern(pattern) {\n    return new DateTimeFormatterBuilder().appendPattern(pattern).toFormatter();\n  };\n\n  function DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone) {\n    if (chrono === void 0) {\n      chrono = IsoChronology.INSTANCE;\n    }\n\n    assert(printerParser != null);\n    assert(decimalStyle != null);\n    assert(resolverStyle != null);\n    this._printerParser = printerParser;\n    this._locale = locale;\n    this._decimalStyle = decimalStyle;\n    this._resolverStyle = resolverStyle;\n    this._resolverFields = resolverFields;\n    this._chrono = chrono;\n    this._zone = zone;\n  }\n\n  var _proto = DateTimeFormatter.prototype;\n\n  _proto.locale = function locale() {\n    return this._locale;\n  };\n\n  _proto.decimalStyle = function decimalStyle() {\n    return this._decimalStyle;\n  };\n\n  _proto.chronology = function chronology() {\n    return this._chrono;\n  };\n\n  _proto.withChronology = function withChronology(chrono) {\n    if (this._chrono != null && this._chrono.equals(chrono)) {\n      return this;\n    }\n\n    return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, this._resolverStyle, this._resolverFields, chrono, this._zone);\n  };\n\n  _proto.withLocale = function withLocale() {\n    return this;\n  };\n\n  _proto.withResolverStyle = function withResolverStyle(resolverStyle) {\n    requireNonNull(resolverStyle, 'resolverStyle');\n\n    if (resolverStyle.equals(this._resolverStyle)) {\n      return this;\n    }\n\n    return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, resolverStyle, this._resolverFields, this._chrono, this._zone);\n  };\n\n  _proto.format = function format(temporal) {\n    var buf = new StringBuilder(32);\n\n    this._formatTo(temporal, buf);\n\n    return buf.toString();\n  };\n\n  _proto._formatTo = function _formatTo(temporal, appendable) {\n    requireNonNull(temporal, 'temporal');\n    requireNonNull(appendable, 'appendable');\n    var context = new DateTimePrintContext(temporal, this);\n\n    this._printerParser.print(context, appendable);\n  };\n\n  _proto.parse = function parse(text, type) {\n    if (arguments.length === 1) {\n      return this.parse1(text);\n    } else {\n      return this.parse2(text, type);\n    }\n  };\n\n  _proto.parse1 = function parse1(text) {\n    requireNonNull(text, 'text');\n\n    try {\n      return this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n    } catch (ex) {\n      if (ex instanceof DateTimeParseException) {\n        throw ex;\n      } else {\n        throw this._createError(text, ex);\n      }\n    }\n  };\n\n  _proto.parse2 = function parse2(text, type) {\n    requireNonNull(text, 'text');\n    requireNonNull(type, 'type');\n\n    try {\n      var builder = this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n\n      return builder.build(type);\n    } catch (ex) {\n      if (ex instanceof DateTimeParseException) {\n        throw ex;\n      } else {\n        throw this._createError(text, ex);\n      }\n    }\n  };\n\n  _proto._createError = function _createError(text, ex) {\n    var abbr = '';\n\n    if (text.length > 64) {\n      abbr = text.substring(0, 64) + '...';\n    } else {\n      abbr = text;\n    }\n\n    return new DateTimeParseException('Text \\'' + abbr + '\\' could not be parsed: ' + ex.message, text, 0, ex);\n  };\n\n  _proto._parseToBuilder = function _parseToBuilder(text, position) {\n    var pos = position != null ? position : new ParsePosition(0);\n\n    var result = this._parseUnresolved0(text, pos);\n\n    if (result == null || pos.getErrorIndex() >= 0 || position == null && pos.getIndex() < text.length) {\n      var abbr = '';\n\n      if (text.length > 64) {\n        abbr = text.substr(0, 64).toString() + '...';\n      } else {\n        abbr = text;\n      }\n\n      if (pos.getErrorIndex() >= 0) {\n        throw new DateTimeParseException('Text \\'' + abbr + '\\' could not be parsed at index ' + pos.getErrorIndex(), text, pos.getErrorIndex());\n      } else {\n        throw new DateTimeParseException('Text \\'' + abbr + '\\' could not be parsed, unparsed text found at index ' + pos.getIndex(), text, pos.getIndex());\n      }\n    }\n\n    return result.toBuilder();\n  };\n\n  _proto.parseUnresolved = function parseUnresolved(text, position) {\n    return this._parseUnresolved0(text, position);\n  };\n\n  _proto._parseUnresolved0 = function _parseUnresolved0(text, position) {\n    assert(text != null, 'text', NullPointerException);\n    assert(position != null, 'position', NullPointerException);\n    var context = new DateTimeParseContext(this);\n    var pos = position.getIndex();\n    pos = this._printerParser.parse(context, text, pos);\n\n    if (pos < 0) {\n      position.setErrorIndex(~pos);\n      return null;\n    }\n\n    position.setIndex(pos);\n    return context.toParsed();\n  };\n\n  _proto._toPrinterParser = function _toPrinterParser(optional) {\n    return this._printerParser.withOptional(optional);\n  };\n\n  _proto.toString = function toString() {\n    var pattern = this._printerParser.toString();\n\n    return pattern.indexOf('[') === 0 ? pattern : pattern.substring(1, pattern.length - 1);\n  };\n\n  return DateTimeFormatter;\n}();\nfunction _init$a() {\n  DateTimeFormatter.ISO_LOCAL_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_LOCAL_TIME = new DateTimeFormatterBuilder().appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(':').appendValue(ChronoField.MINUTE_OF_HOUR, 2).optionalStart().appendLiteral(':').appendValue(ChronoField.SECOND_OF_MINUTE, 2).optionalStart().appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.ISO_LOCAL_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral('T').append(DateTimeFormatter.ISO_LOCAL_TIME).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_INSTANT = new DateTimeFormatterBuilder().parseCaseInsensitive().appendInstant().toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.ISO_OFFSET_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE_TIME).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_ZONED_DATE_TIME = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_OFFSET_DATE_TIME).optionalStart().appendLiteral('[').parseCaseSensitive().appendZoneId().appendLiteral(']').toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.BASIC_ISO_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendValue(ChronoField.MONTH_OF_YEAR, 2).appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_OFFSET_DATE = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_OFFSET_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_TIME).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_ORDINAL_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.DAY_OF_YEAR).toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.ISO_WEEK_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-W').appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR).appendLiteral('-').appendValue(ChronoField.DAY_OF_WEEK).toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.PARSED_EXCESS_DAYS = createTemporalQuery('PARSED_EXCESS_DAYS', function (temporal) {\n    if (temporal instanceof DateTimeBuilder) {\n      return temporal.excessDays;\n    } else {\n      return Period.ZERO;\n    }\n  });\n  DateTimeFormatter.PARSED_LEAP_SECOND = createTemporalQuery('PARSED_LEAP_SECOND', function (temporal) {\n    if (temporal instanceof DateTimeBuilder) {\n      return temporal.leapSecond;\n    } else {\n      return false;\n    }\n  });\n}\n\nvar MonthDay = function (_TemporalAccessor) {\n  _inheritsLoose(MonthDay, _TemporalAccessor);\n\n  MonthDay.now = function now(zoneIdOrClock) {\n    if (arguments.length === 0) {\n      return MonthDay.now0();\n    } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n      return MonthDay.nowZoneId(zoneIdOrClock);\n    } else {\n      return MonthDay.nowClock(zoneIdOrClock);\n    }\n  };\n\n  MonthDay.now0 = function now0() {\n    return this.nowClock(Clock.systemDefaultZone());\n  };\n\n  MonthDay.nowZoneId = function nowZoneId(zone) {\n    requireNonNull(zone, 'zone');\n    return this.nowClock(Clock.system(zone));\n  };\n\n  MonthDay.nowClock = function nowClock(clock) {\n    requireNonNull(clock, 'clock');\n    var now = LocalDate.now(clock);\n    return MonthDay.of(now.month(), now.dayOfMonth());\n  };\n\n  MonthDay.of = function of(monthOrNumber, number) {\n    if (arguments.length === 2 && monthOrNumber instanceof Month) {\n      return MonthDay.ofMonthNumber(monthOrNumber, number);\n    } else {\n      return MonthDay.ofNumberNumber(monthOrNumber, number);\n    }\n  };\n\n  MonthDay.ofMonthNumber = function ofMonthNumber(month, dayOfMonth) {\n    requireNonNull(month, 'month');\n    ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n\n    if (dayOfMonth > month.maxLength()) {\n      throw new DateTimeException('Illegal value for DayOfMonth field, value ' + dayOfMonth + ' is not valid for month ' + month.toString());\n    }\n\n    return new MonthDay(month.value(), dayOfMonth);\n  };\n\n  MonthDay.ofNumberNumber = function ofNumberNumber(month, dayOfMonth) {\n    requireNonNull(month, 'month');\n    requireNonNull(dayOfMonth, 'dayOfMonth');\n    return MonthDay.of(Month.of(month), dayOfMonth);\n  };\n\n  MonthDay.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    requireInstance(temporal, TemporalAccessor, 'temporal');\n\n    if (temporal instanceof MonthDay) {\n      return temporal;\n    }\n\n    try {\n      return MonthDay.of(temporal.get(ChronoField.MONTH_OF_YEAR), temporal.get(ChronoField.DAY_OF_MONTH));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain MonthDay from TemporalAccessor: ' + temporal + ', type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  MonthDay.parse = function parse(text, formatter) {\n    if (arguments.length === 1) {\n      return MonthDay.parseString(text);\n    } else {\n      return MonthDay.parseStringFormatter(text, formatter);\n    }\n  };\n\n  MonthDay.parseString = function parseString(text) {\n    return MonthDay.parseStringFormatter(text, PARSER);\n  };\n\n  MonthDay.parseStringFormatter = function parseStringFormatter(text, formatter) {\n    requireNonNull(text, 'text');\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.parse(text, MonthDay.FROM);\n  };\n\n  function MonthDay(month, dayOfMonth) {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._month = MathUtil.safeToInt(month);\n    _this._day = MathUtil.safeToInt(dayOfMonth);\n    return _this;\n  }\n\n  var _proto = MonthDay.prototype;\n\n  _proto.monthValue = function monthValue() {\n    return this._month;\n  };\n\n  _proto.month = function month() {\n    return Month.of(this._month);\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._day;\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.MONTH_OF_YEAR || field === ChronoField.DAY_OF_MONTH;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field === ChronoField.MONTH_OF_YEAR) {\n      return field.range();\n    } else if (field === ChronoField.DAY_OF_MONTH) {\n      return ValueRange.of(1, this.month().minLength(), this.month().maxLength());\n    }\n\n    return _TemporalAccessor.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.DAY_OF_MONTH:\n          return this._day;\n\n        case ChronoField.MONTH_OF_YEAR:\n          return this._month;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.isValidYear = function isValidYear(year) {\n    return (this._day === 29 && this._month === 2 && Year.isLeap(year) === false) === false;\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this.with(Month.of(month));\n  };\n\n  _proto.with = function _with(month) {\n    requireNonNull(month, 'month');\n\n    if (month.value() === this._month) {\n      return this;\n    }\n\n    var day = Math.min(this._day, month.maxLength());\n    return new MonthDay(month.value(), day);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    if (dayOfMonth === this._day) {\n      return this;\n    }\n\n    return MonthDay.of(this._month, dayOfMonth);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n    requireInstance(_query, TemporalQuery, 'query');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    }\n\n    return _TemporalAccessor.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    temporal = temporal.with(ChronoField.MONTH_OF_YEAR, this._month);\n    return temporal.with(ChronoField.DAY_OF_MONTH, Math.min(temporal.range(ChronoField.DAY_OF_MONTH).maximum(), this._day));\n  };\n\n  _proto.atYear = function atYear(year) {\n    return LocalDate.of(year, this._month, this.isValidYear(year) ? this._day : 28);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, MonthDay, 'other');\n    var cmp = this._month - other.monthValue();\n\n    if (cmp === 0) {\n      cmp = this._day - other.dayOfMonth();\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, MonthDay, 'other');\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, MonthDay, 'other');\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof MonthDay) {\n      var other = obj;\n      return this.monthValue() === other.monthValue() && this.dayOfMonth() === other.dayOfMonth();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    return '--' + (this._month < 10 ? '0' : '') + this._month + (this._day < 10 ? '-0' : '-') + this._day;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return MonthDay;\n}(TemporalAccessor);\nvar PARSER;\nfunction _init$b() {\n  PARSER = new DateTimeFormatterBuilder().appendLiteral('--').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter();\n  MonthDay.FROM = createTemporalQuery('MonthDay.FROM', function (temporal) {\n    return MonthDay.from(temporal);\n  });\n}\n\nvar YearMonth = function (_Temporal) {\n  _inheritsLoose(YearMonth, _Temporal);\n\n  YearMonth.now = function now(zoneIdOrClock) {\n    if (arguments.length === 0) {\n      return YearMonth.now0();\n    } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n      return YearMonth.nowZoneId(zoneIdOrClock);\n    } else {\n      return YearMonth.nowClock(zoneIdOrClock);\n    }\n  };\n\n  YearMonth.now0 = function now0() {\n    return YearMonth.nowClock(Clock.systemDefaultZone());\n  };\n\n  YearMonth.nowZoneId = function nowZoneId(zone) {\n    return YearMonth.nowClock(Clock.system(zone));\n  };\n\n  YearMonth.nowClock = function nowClock(clock) {\n    var now = LocalDate.now(clock);\n    return YearMonth.of(now.year(), now.month());\n  };\n\n  YearMonth.of = function of(year, monthOrNumber) {\n    if (arguments.length === 2 && monthOrNumber instanceof Month) {\n      return YearMonth.ofNumberMonth(year, monthOrNumber);\n    } else {\n      return YearMonth.ofNumberNumber(year, monthOrNumber);\n    }\n  };\n\n  YearMonth.ofNumberMonth = function ofNumberMonth(year, month) {\n    requireNonNull(month, 'month');\n    requireInstance(month, Month, 'month');\n    return YearMonth.ofNumberNumber(year, month.value());\n  };\n\n  YearMonth.ofNumberNumber = function ofNumberNumber(year, month) {\n    requireNonNull(year, 'year');\n    requireNonNull(month, 'month');\n    ChronoField.YEAR.checkValidValue(year);\n    ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n    return new YearMonth(year, month);\n  };\n\n  YearMonth.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof YearMonth) {\n      return temporal;\n    }\n\n    try {\n      return YearMonth.of(temporal.get(ChronoField.YEAR), temporal.get(ChronoField.MONTH_OF_YEAR));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain YearMonth from TemporalAccessor: ' + temporal + ', type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  YearMonth.parse = function parse(text, formatter) {\n    if (arguments.length === 1) {\n      return YearMonth.parseString(text);\n    } else {\n      return YearMonth.parseStringFormatter(text, formatter);\n    }\n  };\n\n  YearMonth.parseString = function parseString(text) {\n    return YearMonth.parseStringFormatter(text, PARSER$1);\n  };\n\n  YearMonth.parseStringFormatter = function parseStringFormatter(text, formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, YearMonth.FROM);\n  };\n\n  function YearMonth(year, month) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n    _this._year = MathUtil.safeToInt(year);\n    _this._month = MathUtil.safeToInt(month);\n    return _this;\n  }\n\n  var _proto = YearMonth.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n      return this.isSupportedField(fieldOrUnit);\n    } else {\n      return this.isSupportedUnit(fieldOrUnit);\n    }\n  };\n\n  _proto.isSupportedField = function isSupportedField(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.YEAR || field === ChronoField.MONTH_OF_YEAR || field === ChronoField.PROLEPTIC_MONTH || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.isSupportedUnit = function isSupportedUnit(unit) {\n    if (unit instanceof ChronoUnit) {\n      return unit === ChronoUnit.MONTHS || unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n    }\n\n    return unit != null && unit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field === ChronoField.YEAR_OF_ERA) {\n      return this.year() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE);\n    }\n\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.MONTH_OF_YEAR:\n          return this._month;\n\n        case ChronoField.PROLEPTIC_MONTH:\n          return this._getProlepticMonth();\n\n        case ChronoField.YEAR_OF_ERA:\n          return this._year < 1 ? 1 - this._year : this._year;\n\n        case ChronoField.YEAR:\n          return this._year;\n\n        case ChronoField.ERA:\n          return this._year < 1 ? 0 : 1;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto._getProlepticMonth = function _getProlepticMonth() {\n    return MathUtil.safeAdd(MathUtil.safeMultiply(this._year, 12), this._month - 1);\n  };\n\n  _proto.year = function year() {\n    return this._year;\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._month;\n  };\n\n  _proto.month = function month() {\n    return Month.of(this._month);\n  };\n\n  _proto.isLeapYear = function isLeapYear() {\n    return IsoChronology.isLeapYear(this._year);\n  };\n\n  _proto.isValidDay = function isValidDay(dayOfMonth) {\n    return dayOfMonth >= 1 && dayOfMonth <= this.lengthOfMonth();\n  };\n\n  _proto.lengthOfMonth = function lengthOfMonth() {\n    return this.month().length(this.isLeapYear());\n  };\n\n  _proto.lengthOfYear = function lengthOfYear() {\n    return this.isLeapYear() ? 366 : 365;\n  };\n\n  _proto.with = function _with(adjusterOrField, value) {\n    if (arguments.length === 1) {\n      return this.withAdjuster(adjusterOrField);\n    } else {\n      return this.withFieldValue(adjusterOrField, value);\n    }\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      var f = field;\n      f.checkValidValue(newValue);\n\n      switch (f) {\n        case ChronoField.MONTH_OF_YEAR:\n          return this.withMonth(newValue);\n\n        case ChronoField.PROLEPTIC_MONTH:\n          return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n\n        case ChronoField.YEAR_OF_ERA:\n          return this.withYear(this._year < 1 ? 1 - newValue : newValue);\n\n        case ChronoField.YEAR:\n          return this.withYear(newValue);\n\n        case ChronoField.ERA:\n          return this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    ChronoField.YEAR.checkValidValue(year);\n    return new YearMonth(year, this._month);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n    return new YearMonth(this._year, month);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.MONTHS:\n          return this.plusMonths(amountToAdd);\n\n        case ChronoUnit.YEARS:\n          return this.plusYears(amountToAdd);\n\n        case ChronoUnit.DECADES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n\n        case ChronoUnit.CENTURIES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n\n        case ChronoUnit.MILLENNIA:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n\n        case ChronoUnit.ERAS:\n          return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    var newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);\n    return this.withYear(newYear);\n  };\n\n  _proto.plusMonths = function plusMonths(monthsToAdd) {\n    if (monthsToAdd === 0) {\n      return this;\n    }\n\n    var monthCount = this._year * 12 + (this._month - 1);\n    var calcMonths = monthCount + monthsToAdd;\n    var newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n    var newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n    return new YearMonth(newYear, newMonth);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return amountToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusAmountUnit(MathUtil.MAX_SAFE_INTEGER, unit).plusAmountUnit(1, unit) : this.plusAmountUnit(-amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MIN_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract);\n  };\n\n  _proto.minusMonths = function minusMonths(monthsToSubtract) {\n    return monthsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusMonths(Math.MAX_SAFE_INTEGER).plusMonths(1) : this.plusMonths(-monthsToSubtract);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n    requireInstance(_query, TemporalQuery, 'query');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.MONTHS;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _Temporal.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    requireInstance(temporal, Temporal, 'temporal');\n    return temporal.with(ChronoField.PROLEPTIC_MONTH, this._getProlepticMonth());\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    requireInstance(endExclusive, Temporal, 'endExclusive');\n    requireInstance(unit, TemporalUnit, 'unit');\n    var end = YearMonth.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var monthsUntil = end._getProlepticMonth() - this._getProlepticMonth();\n\n      switch (unit) {\n        case ChronoUnit.MONTHS:\n          return monthsUntil;\n\n        case ChronoUnit.YEARS:\n          return monthsUntil / 12;\n\n        case ChronoUnit.DECADES:\n          return monthsUntil / 120;\n\n        case ChronoUnit.CENTURIES:\n          return monthsUntil / 1200;\n\n        case ChronoUnit.MILLENNIA:\n          return monthsUntil / 12000;\n\n        case ChronoUnit.ERAS:\n          return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atDay = function atDay(dayOfMonth) {\n    return LocalDate.of(this._year, this._month, dayOfMonth);\n  };\n\n  _proto.atEndOfMonth = function atEndOfMonth() {\n    return LocalDate.of(this._year, this._month, this.lengthOfMonth());\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, YearMonth, 'other');\n    var cmp = this._year - other.year();\n\n    if (cmp === 0) {\n      cmp = this._month - other.monthValue();\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof YearMonth) {\n      var other = obj;\n      return this.year() === other.year() && this.monthValue() === other.monthValue();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    return PARSER$1.format(this);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return YearMonth;\n}(Temporal);\nvar PARSER$1;\nfunction _init$c() {\n  PARSER$1 = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).toFormatter();\n  YearMonth.FROM = createTemporalQuery('YearMonth.FROM', function (temporal) {\n    return YearMonth.from(temporal);\n  });\n}\n\nvar Year = function (_Temporal) {\n  _inheritsLoose(Year, _Temporal);\n\n  function Year(value) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n    _this._year = MathUtil.safeToInt(value);\n    return _this;\n  }\n\n  var _proto = Year.prototype;\n\n  _proto.value = function value() {\n    return this._year;\n  };\n\n  Year.now = function now(zoneIdOrClock) {\n    if (zoneIdOrClock === void 0) {\n      zoneIdOrClock = undefined;\n    }\n\n    if (zoneIdOrClock === undefined) {\n      return Year.now0();\n    } else if (zoneIdOrClock instanceof ZoneId) {\n      return Year.nowZoneId(zoneIdOrClock);\n    } else {\n      return Year.nowClock(zoneIdOrClock);\n    }\n  };\n\n  Year.now0 = function now0() {\n    return Year.nowClock(Clock.systemDefaultZone());\n  };\n\n  Year.nowZoneId = function nowZoneId(zone) {\n    requireNonNull(zone, 'zone');\n    requireInstance(zone, ZoneId, 'zone');\n    return Year.nowClock(Clock.system(zone));\n  };\n\n  Year.nowClock = function nowClock(clock) {\n    requireNonNull(clock, 'clock');\n    requireInstance(clock, Clock, 'clock');\n    var now = LocalDate.now(clock);\n    return Year.of(now.year());\n  };\n\n  Year.of = function of(isoYear) {\n    requireNonNull(isoYear, 'isoYear');\n    ChronoField.YEAR.checkValidValue(isoYear);\n    return new Year(isoYear);\n  };\n\n  Year.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    requireInstance(temporal, TemporalAccessor, 'temporal');\n\n    if (temporal instanceof Year) {\n      return temporal;\n    }\n\n    try {\n      return Year.of(temporal.get(ChronoField.YEAR));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain Year from TemporalAccessor: ' + temporal + ', type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  Year.parse = function parse(text, formatter) {\n    if (arguments.length <= 1) {\n      return Year.parseText(text);\n    } else {\n      return Year.parseTextFormatter(text, formatter);\n    }\n  };\n\n  Year.parseText = function parseText(text) {\n    requireNonNull(text, 'text');\n    return Year.parse(text, PARSER$2);\n  };\n\n  Year.parseTextFormatter = function parseTextFormatter(text, formatter) {\n    if (formatter === void 0) {\n      formatter = PARSER$2;\n    }\n\n    requireNonNull(text, 'text');\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.parse(text, Year.FROM);\n  };\n\n  Year.isLeap = function isLeap(year) {\n    return MathUtil.intMod(year, 4) === 0 && (MathUtil.intMod(year, 100) !== 0 || MathUtil.intMod(year, 400) === 0);\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n      return this.isSupportedField(fieldOrUnit);\n    } else {\n      return this.isSupportedUnit(fieldOrUnit);\n    }\n  };\n\n  _proto.isSupportedField = function isSupportedField(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.YEAR || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.isSupportedUnit = function isSupportedUnit(unit) {\n    if (unit instanceof ChronoUnit) {\n      return unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n    }\n\n    return unit != null && unit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (this.isSupported(field)) {\n      return field.range();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.YEAR_OF_ERA:\n          return this._year < 1 ? 1 - this._year : this._year;\n\n        case ChronoField.YEAR:\n          return this._year;\n\n        case ChronoField.ERA:\n          return this._year < 1 ? 0 : 1;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.isLeap = function isLeap() {\n    return Year.isLeap(this._year);\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      field.checkValidValue(newValue);\n\n      switch (field) {\n        case ChronoField.YEAR_OF_ERA:\n          return Year.of(this._year < 1 ? 1 - newValue : newValue);\n\n        case ChronoField.YEAR:\n          return Year.of(newValue);\n\n        case ChronoField.ERA:\n          return this.getLong(ChronoField.ERA) === newValue ? this : Year.of(1 - this._year);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.YEARS:\n          return this.plusYears(amountToAdd);\n\n        case ChronoUnit.DECADES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n\n        case ChronoUnit.CENTURIES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n\n        case ChronoUnit.MILLENNIA:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n\n        case ChronoUnit.ERAS:\n          return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    return Year.of(ChronoField.YEAR.checkValidIntValue(MathUtil.safeAdd(this._year, yearsToAdd)));\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n    return amountToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plus(MathUtil.MAX_SAFE_INTEGER, unit).plus(1, unit) : this.plus(-amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MAX_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    return temporal.with(ChronoField.YEAR, this._year);\n  };\n\n  _proto.isValidMonthDay = function isValidMonthDay(monthDay) {\n    return monthDay != null && monthDay.isValidYear(this._year);\n  };\n\n  _proto.length = function length() {\n    return this.isLeap() ? 366 : 365;\n  };\n\n  _proto.atDay = function atDay(dayOfYear) {\n    return LocalDate.ofYearDay(this._year, dayOfYear);\n  };\n\n  _proto.atMonth = function atMonth(monthOrNumber) {\n    if (arguments.length === 1 && monthOrNumber instanceof Month) {\n      return this.atMonthMonth(monthOrNumber);\n    } else {\n      return this.atMonthNumber(monthOrNumber);\n    }\n  };\n\n  _proto.atMonthMonth = function atMonthMonth(month) {\n    requireNonNull(month, 'month');\n    requireInstance(month, Month, 'month');\n    return YearMonth.of(this._year, month);\n  };\n\n  _proto.atMonthNumber = function atMonthNumber(month) {\n    requireNonNull(month, 'month');\n    return YearMonth.of(this._year, month);\n  };\n\n  _proto.atMonthDay = function atMonthDay(monthDay) {\n    requireNonNull(monthDay, 'monthDay');\n    requireInstance(monthDay, MonthDay, 'monthDay');\n    return monthDay.atYear(this._year);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query()');\n    requireInstance(_query, TemporalQuery, 'query()');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.YEARS;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _Temporal.prototype.query.call(this, _query);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Year, 'other');\n    return this._year - other._year;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Year, 'other');\n    return this._year > other._year;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Year, 'other');\n    return this._year < other._year;\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof Year) {\n      return this.value() === other.value();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    return '' + this._year;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    var end = Year.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var yearsUntil = end.value() - this.value();\n\n      switch (unit) {\n        case ChronoUnit.YEARS:\n          return yearsUntil;\n\n        case ChronoUnit.DECADES:\n          return MathUtil.intDiv(yearsUntil, 10);\n\n        case ChronoUnit.CENTURIES:\n          return MathUtil.intDiv(yearsUntil, 100);\n\n        case ChronoUnit.MILLENNIA:\n          return MathUtil.intDiv(yearsUntil, 1000);\n\n        case ChronoUnit.ERAS:\n          return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  return Year;\n}(Temporal);\nvar PARSER$2;\nfunction _init$d() {\n  Year.MIN_VALUE = YearConstants.MIN_VALUE;\n  Year.MAX_VALUE = YearConstants.MAX_VALUE;\n  PARSER$2 = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).toFormatter();\n  Year.FROM = createTemporalQuery('Year.FROM', function (temporal) {\n    return Year.from(temporal);\n  });\n}\n\nvar TemporalAdjusters = function () {\n  function TemporalAdjusters() {}\n\n  TemporalAdjusters.firstDayOfMonth = function firstDayOfMonth() {\n    return Impl.FIRST_DAY_OF_MONTH;\n  };\n\n  TemporalAdjusters.lastDayOfMonth = function lastDayOfMonth() {\n    return Impl.LAST_DAY_OF_MONTH;\n  };\n\n  TemporalAdjusters.firstDayOfNextMonth = function firstDayOfNextMonth() {\n    return Impl.FIRST_DAY_OF_NEXT_MONTH;\n  };\n\n  TemporalAdjusters.firstDayOfYear = function firstDayOfYear() {\n    return Impl.FIRST_DAY_OF_YEAR;\n  };\n\n  TemporalAdjusters.lastDayOfYear = function lastDayOfYear() {\n    return Impl.LAST_DAY_OF_YEAR;\n  };\n\n  TemporalAdjusters.firstDayOfNextYear = function firstDayOfNextYear() {\n    return Impl.FIRST_DAY_OF_NEXT_YEAR;\n  };\n\n  TemporalAdjusters.firstInMonth = function firstInMonth(dayOfWeek) {\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    return new DayOfWeekInMonth(1, dayOfWeek);\n  };\n\n  TemporalAdjusters.lastInMonth = function lastInMonth(dayOfWeek) {\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    return new DayOfWeekInMonth(-1, dayOfWeek);\n  };\n\n  TemporalAdjusters.dayOfWeekInMonth = function dayOfWeekInMonth(ordinal, dayOfWeek) {\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    return new DayOfWeekInMonth(ordinal, dayOfWeek);\n  };\n\n  TemporalAdjusters.next = function next(dayOfWeek) {\n    return new RelativeDayOfWeek(2, dayOfWeek);\n  };\n\n  TemporalAdjusters.nextOrSame = function nextOrSame(dayOfWeek) {\n    return new RelativeDayOfWeek(0, dayOfWeek);\n  };\n\n  TemporalAdjusters.previous = function previous(dayOfWeek) {\n    return new RelativeDayOfWeek(3, dayOfWeek);\n  };\n\n  TemporalAdjusters.previousOrSame = function previousOrSame(dayOfWeek) {\n    return new RelativeDayOfWeek(1, dayOfWeek);\n  };\n\n  return TemporalAdjusters;\n}();\n\nvar Impl = function (_TemporalAdjuster) {\n  _inheritsLoose(Impl, _TemporalAdjuster);\n\n  function Impl(ordinal) {\n    var _this;\n\n    _this = _TemporalAdjuster.call(this) || this;\n    _this._ordinal = ordinal;\n    return _this;\n  }\n\n  var _proto = Impl.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    switch (this._ordinal) {\n      case 0:\n        return temporal.with(ChronoField.DAY_OF_MONTH, 1);\n\n      case 1:\n        return temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n\n      case 2:\n        return temporal.with(ChronoField.DAY_OF_MONTH, 1).plus(1, ChronoUnit.MONTHS);\n\n      case 3:\n        return temporal.with(ChronoField.DAY_OF_YEAR, 1);\n\n      case 4:\n        return temporal.with(ChronoField.DAY_OF_YEAR, temporal.range(ChronoField.DAY_OF_YEAR).maximum());\n\n      case 5:\n        return temporal.with(ChronoField.DAY_OF_YEAR, 1).plus(1, ChronoUnit.YEARS);\n    }\n\n    throw new IllegalStateException('Unreachable');\n  };\n\n  return Impl;\n}(TemporalAdjuster);\n\nImpl.FIRST_DAY_OF_MONTH = new Impl(0);\nImpl.LAST_DAY_OF_MONTH = new Impl(1);\nImpl.FIRST_DAY_OF_NEXT_MONTH = new Impl(2);\nImpl.FIRST_DAY_OF_YEAR = new Impl(3);\nImpl.LAST_DAY_OF_YEAR = new Impl(4);\nImpl.FIRST_DAY_OF_NEXT_YEAR = new Impl(5);\n\nvar DayOfWeekInMonth = function (_TemporalAdjuster2) {\n  _inheritsLoose(DayOfWeekInMonth, _TemporalAdjuster2);\n\n  function DayOfWeekInMonth(ordinal, dow) {\n    var _this2;\n\n    _this2 = _TemporalAdjuster2.call(this) || this;\n    _this2._ordinal = ordinal;\n    _this2._dowValue = dow.value();\n    return _this2;\n  }\n\n  var _proto2 = DayOfWeekInMonth.prototype;\n\n  _proto2.adjustInto = function adjustInto(temporal) {\n    if (this._ordinal >= 0) {\n      var temp = temporal.with(ChronoField.DAY_OF_MONTH, 1);\n      var curDow = temp.get(ChronoField.DAY_OF_WEEK);\n      var dowDiff = MathUtil.intMod(this._dowValue - curDow + 7, 7);\n      dowDiff += (this._ordinal - 1) * 7;\n      return temp.plus(dowDiff, ChronoUnit.DAYS);\n    } else {\n      var _temp = temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n\n      var _curDow = _temp.get(ChronoField.DAY_OF_WEEK);\n\n      var daysDiff = this._dowValue - _curDow;\n      daysDiff = daysDiff === 0 ? 0 : daysDiff > 0 ? daysDiff - 7 : daysDiff;\n      daysDiff -= (-this._ordinal - 1) * 7;\n      return _temp.plus(daysDiff, ChronoUnit.DAYS);\n    }\n  };\n\n  return DayOfWeekInMonth;\n}(TemporalAdjuster);\n\nvar RelativeDayOfWeek = function (_TemporalAdjuster3) {\n  _inheritsLoose(RelativeDayOfWeek, _TemporalAdjuster3);\n\n  function RelativeDayOfWeek(relative, dayOfWeek) {\n    var _this3;\n\n    _this3 = _TemporalAdjuster3.call(this) || this;\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    _this3._relative = relative;\n    _this3._dowValue = dayOfWeek.value();\n    return _this3;\n  }\n\n  var _proto3 = RelativeDayOfWeek.prototype;\n\n  _proto3.adjustInto = function adjustInto(temporal) {\n    var calDow = temporal.get(ChronoField.DAY_OF_WEEK);\n\n    if (this._relative < 2 && calDow === this._dowValue) {\n      return temporal;\n    }\n\n    if ((this._relative & 1) === 0) {\n      var daysDiff = calDow - this._dowValue;\n      return temporal.plus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, ChronoUnit.DAYS);\n    } else {\n      var _daysDiff = this._dowValue - calDow;\n\n      return temporal.minus(_daysDiff >= 0 ? 7 - _daysDiff : -_daysDiff, ChronoUnit.DAYS);\n    }\n  };\n\n  return RelativeDayOfWeek;\n}(TemporalAdjuster);\n\nvar IsoChronology = function (_Enum) {\n  _inheritsLoose(IsoChronology, _Enum);\n\n  function IsoChronology() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  IsoChronology.isLeapYear = function isLeapYear(prolepticYear) {\n    return (prolepticYear & 3) === 0 && (prolepticYear % 100 !== 0 || prolepticYear % 400 === 0);\n  };\n\n  var _proto = IsoChronology.prototype;\n\n  _proto._updateResolveMap = function _updateResolveMap(fieldValues, field, value) {\n    requireNonNull(fieldValues, 'fieldValues');\n    requireNonNull(field, 'field');\n    var current = fieldValues.get(field);\n\n    if (current != null && current !== value) {\n      throw new DateTimeException('Invalid state, field: ' + field + ' ' + current + ' conflicts with ' + field + ' ' + value);\n    }\n\n    fieldValues.put(field, value);\n  };\n\n  _proto.resolveDate = function resolveDate(fieldValues, resolverStyle) {\n    if (fieldValues.containsKey(ChronoField.EPOCH_DAY)) {\n      return LocalDate.ofEpochDay(fieldValues.remove(ChronoField.EPOCH_DAY));\n    }\n\n    var prolepticMonth = fieldValues.remove(ChronoField.PROLEPTIC_MONTH);\n\n    if (prolepticMonth != null) {\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.PROLEPTIC_MONTH.checkValidValue(prolepticMonth);\n      }\n\n      this._updateResolveMap(fieldValues, ChronoField.MONTH_OF_YEAR, MathUtil.floorMod(prolepticMonth, 12) + 1);\n\n      this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.floorDiv(prolepticMonth, 12));\n    }\n\n    var yoeLong = fieldValues.remove(ChronoField.YEAR_OF_ERA);\n\n    if (yoeLong != null) {\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.YEAR_OF_ERA.checkValidValue(yoeLong);\n      }\n\n      var era = fieldValues.remove(ChronoField.ERA);\n\n      if (era == null) {\n        var year = fieldValues.get(ChronoField.YEAR);\n\n        if (resolverStyle === ResolverStyle.STRICT) {\n          if (year != null) {\n            this._updateResolveMap(fieldValues, ChronoField.YEAR, year > 0 ? yoeLong : MathUtil.safeSubtract(1, yoeLong));\n          } else {\n            fieldValues.put(ChronoField.YEAR_OF_ERA, yoeLong);\n          }\n        } else {\n          this._updateResolveMap(fieldValues, ChronoField.YEAR, year == null || year > 0 ? yoeLong : MathUtil.safeSubtract(1, yoeLong));\n        }\n      } else if (era === 1) {\n        this._updateResolveMap(fieldValues, ChronoField.YEAR, yoeLong);\n      } else if (era === 0) {\n        this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.safeSubtract(1, yoeLong));\n      } else {\n        throw new DateTimeException('Invalid value for era: ' + era);\n      }\n    } else if (fieldValues.containsKey(ChronoField.ERA)) {\n      ChronoField.ERA.checkValidValue(fieldValues.get(ChronoField.ERA));\n    }\n\n    if (fieldValues.containsKey(ChronoField.YEAR)) {\n      if (fieldValues.containsKey(ChronoField.MONTH_OF_YEAR)) {\n        if (fieldValues.containsKey(ChronoField.DAY_OF_MONTH)) {\n          var y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n          var moy = fieldValues.remove(ChronoField.MONTH_OF_YEAR);\n          var dom = fieldValues.remove(ChronoField.DAY_OF_MONTH);\n\n          if (resolverStyle === ResolverStyle.LENIENT) {\n            var months = moy - 1;\n            var days = dom - 1;\n            return LocalDate.of(y, 1, 1).plusMonths(months).plusDays(days);\n          } else if (resolverStyle === ResolverStyle.SMART) {\n            ChronoField.DAY_OF_MONTH.checkValidValue(dom);\n\n            if (moy === 4 || moy === 6 || moy === 9 || moy === 11) {\n              dom = Math.min(dom, 30);\n            } else if (moy === 2) {\n              dom = Math.min(dom, Month.FEBRUARY.length(Year.isLeap(y)));\n            }\n\n            return LocalDate.of(y, moy, dom);\n          } else {\n            return LocalDate.of(y, moy, dom);\n          }\n        }\n      }\n\n      if (fieldValues.containsKey(ChronoField.DAY_OF_YEAR)) {\n        var _y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n\n        if (resolverStyle === ResolverStyle.LENIENT) {\n          var _days = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_YEAR), 1);\n\n          return LocalDate.ofYearDay(_y, 1).plusDays(_days);\n        }\n\n        var doy = ChronoField.DAY_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_YEAR));\n        return LocalDate.ofYearDay(_y, doy);\n      }\n\n      if (fieldValues.containsKey(ChronoField.ALIGNED_WEEK_OF_YEAR)) {\n        if (fieldValues.containsKey(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n          var _y2 = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n\n          if (resolverStyle === ResolverStyle.LENIENT) {\n            var weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n\n            var _days2 = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR), 1);\n\n            return LocalDate.of(_y2, 1, 1).plusWeeks(weeks).plusDays(_days2);\n          }\n\n          var aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n          var ad = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n          var date = LocalDate.of(_y2, 1, 1).plusDays((aw - 1) * 7 + (ad - 1));\n\n          if (resolverStyle === ResolverStyle.STRICT && date.get(ChronoField.YEAR) !== _y2) {\n            throw new DateTimeException('Strict mode rejected date parsed to a different year');\n          }\n\n          return date;\n        }\n\n        if (fieldValues.containsKey(ChronoField.DAY_OF_WEEK)) {\n          var _y3 = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n\n          if (resolverStyle === ResolverStyle.LENIENT) {\n            var _weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n\n            var _days3 = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_WEEK), 1);\n\n            return LocalDate.of(_y3, 1, 1).plusWeeks(_weeks).plusDays(_days3);\n          }\n\n          var _aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n\n          var dow = ChronoField.DAY_OF_WEEK.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_WEEK));\n\n          var _date = LocalDate.of(_y3, 1, 1).plusWeeks(_aw - 1).with(TemporalAdjusters.nextOrSame(DayOfWeek.of(dow)));\n\n          if (resolverStyle === ResolverStyle.STRICT && _date.get(ChronoField.YEAR) !== _y3) {\n            throw new DateTimeException('Strict mode rejected date parsed to a different month');\n          }\n\n          return _date;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  _proto.date = function date(temporal) {\n    return LocalDate.from(temporal);\n  };\n\n  return IsoChronology;\n}(Enum);\nfunction _init$e() {\n  IsoChronology.INSTANCE = new IsoChronology('IsoChronology');\n}\n\nvar OffsetTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(OffsetTime, _DefaultInterfaceTemp);\n\n  OffsetTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof OffsetTime) {\n      return temporal;\n    } else if (temporal instanceof OffsetDateTime) {\n      return temporal.toOffsetTime();\n    }\n\n    try {\n      var time = LocalTime.from(temporal);\n      var offset = ZoneOffset.from(temporal);\n      return new OffsetTime(time, offset);\n    } catch (ex) {\n      throw new DateTimeException(\"Unable to obtain OffsetTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  OffsetTime.now = function now(clockOrZone) {\n    if (arguments.length === 0) {\n      return OffsetTime._now(Clock.systemDefaultZone());\n    } else if (clockOrZone instanceof Clock) {\n      return OffsetTime._now(clockOrZone);\n    } else {\n      return OffsetTime._now(Clock.system(clockOrZone));\n    }\n  };\n\n  OffsetTime._now = function _now(clock) {\n    requireNonNull(clock, 'clock');\n    var now = clock.instant();\n    return OffsetTime.ofInstant(now, clock.zone().rules().offset(now));\n  };\n\n  OffsetTime.of = function of() {\n    if (arguments.length <= 2) {\n      return OffsetTime.ofTimeAndOffset.apply(this, arguments);\n    } else {\n      return OffsetTime.ofNumbers.apply(this, arguments);\n    }\n  };\n\n  OffsetTime.ofNumbers = function ofNumbers(hour, minute, second, nanoOfSecond, offset) {\n    var time = LocalTime.of(hour, minute, second, nanoOfSecond);\n    return new OffsetTime(time, offset);\n  };\n\n  OffsetTime.ofTimeAndOffset = function ofTimeAndOffset(time, offset) {\n    return new OffsetTime(time, offset);\n  };\n\n  OffsetTime.ofInstant = function ofInstant(instant, zone) {\n    requireNonNull(instant, 'instant');\n    requireInstance(instant, Instant, 'instant');\n    requireNonNull(zone, 'zone');\n    requireInstance(zone, ZoneId, 'zone');\n    var rules = zone.rules();\n    var offset = rules.offset(instant);\n    var secsOfDay = instant.epochSecond() % LocalTime.SECONDS_PER_DAY;\n    secsOfDay = (secsOfDay + offset.totalSeconds()) % LocalTime.SECONDS_PER_DAY;\n\n    if (secsOfDay < 0) {\n      secsOfDay += LocalTime.SECONDS_PER_DAY;\n    }\n\n    var time = LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n    return new OffsetTime(time, offset);\n  };\n\n  OffsetTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_OFFSET_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, OffsetTime.FROM);\n  };\n\n  function OffsetTime(time, offset) {\n    var _this;\n\n    _this = _DefaultInterfaceTemp.call(this) || this;\n    requireNonNull(time, 'time');\n    requireInstance(time, LocalTime, 'time');\n    requireNonNull(offset, 'offset');\n    requireInstance(offset, ZoneOffset, 'offset');\n    _this._time = time;\n    _this._offset = offset;\n    return _this;\n  }\n\n  var _proto = OffsetTime.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.NANO_OF_DAY, this._time.toNanoOfDay()).with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n  };\n\n  _proto.atDate = function atDate(date) {\n    return OffsetDateTime.of(date, this._time, this._offset);\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this, OffsetTime.FROM);\n  };\n\n  _proto.get = function get(field) {\n    return _DefaultInterfaceTemp.prototype.get.call(this, field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.OFFSET_SECONDS) {\n        return this._offset.totalSeconds();\n      }\n\n      return this._time.getLong(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.hour = function hour() {\n    return this._time.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._time.minute();\n  };\n\n  _proto.second = function second() {\n    return this._time.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._time.nano();\n  };\n\n  _proto.offset = function offset() {\n    return this._offset;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    return this._toEpochNano() > other._toEpochNano();\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    return this._toEpochNano() < other._toEpochNano();\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    requireNonNull(other, 'other');\n    return this._toEpochNano() === other._toEpochNano();\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoField.OFFSET_SECONDS;\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this._withLocalTimeOffset(this._time.minusHours(hours), this._offset);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this._withLocalTimeOffset(this._time.minusMinutes(minutes), this._offset);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this._withLocalTimeOffset(this._time.minusSeconds(seconds), this._offset);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this._withLocalTimeOffset(this._time.minusNanos(nanos), this._offset);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount);\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plus(-1 * amountToSubtract, unit);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount);\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    if (unit instanceof ChronoUnit) {\n      return this._withLocalTimeOffset(this._time.plus(amountToAdd, unit), this._offset);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._withLocalTimeOffset(this._time.plusHours(hours), this._offset);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._withLocalTimeOffset(this._time.plusMinutes(minutes), this._offset);\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._withLocalTimeOffset(this._time.plusSeconds(seconds), this._offset);\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._withLocalTimeOffset(this._time.plusNanos(nanos), this._offset);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n      return this.offset();\n    } else if (_query === TemporalQueries.localTime()) {\n      return this._time;\n    } else if (_query === TemporalQueries.chronology() || _query === TemporalQueries.localDate() || _query === TemporalQueries.zoneId()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.OFFSET_SECONDS) {\n        return field.range();\n      }\n\n      return this._time.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._time;\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._withLocalTimeOffset(this._time.truncatedTo(unit), this._offset);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = OffsetTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var nanosUntil = end._toEpochNano() - this._toEpochNano();\n\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return nanosUntil;\n\n        case ChronoUnit.MICROS:\n          return Math.floor(nanosUntil / 1000);\n\n        case ChronoUnit.MILLIS:\n          return Math.floor(nanosUntil / 1000000);\n\n        case ChronoUnit.SECONDS:\n          return Math.floor(nanosUntil / LocalTime.NANOS_PER_SECOND);\n\n        case ChronoUnit.MINUTES:\n          return Math.floor(nanosUntil / LocalTime.NANOS_PER_MINUTE);\n\n        case ChronoUnit.HOURS:\n          return Math.floor(nanosUntil / LocalTime.NANOS_PER_HOUR);\n\n        case ChronoUnit.HALF_DAYS:\n          return Math.floor(nanosUntil / (12 * LocalTime.NANOS_PER_HOUR));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    return this._withLocalTimeOffset(this._time.withHour(hour), this._offset);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    return this._withLocalTimeOffset(this._time.withMinute(minute), this._offset);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    return this._withLocalTimeOffset(this._time.withSecond(second), this._offset);\n  };\n\n  _proto.withNano = function withNano(nano) {\n    return this._withLocalTimeOffset(this._time.withNano(nano), this._offset);\n  };\n\n  _proto.withOffsetSameInstant = function withOffsetSameInstant(offset) {\n    requireNonNull(offset, 'offset');\n\n    if (offset.equals(this._offset)) {\n      return this;\n    }\n\n    var difference = offset.totalSeconds() - this._offset.totalSeconds();\n\n    var adjusted = this._time.plusSeconds(difference);\n\n    return new OffsetTime(adjusted, offset);\n  };\n\n  _proto.withOffsetSameLocal = function withOffsetSameLocal(offset) {\n    return offset != null && offset.equals(this._offset) ? this : new OffsetTime(this._time, offset);\n  };\n\n  _proto._toEpochNano = function _toEpochNano() {\n    var nod = this._time.toNanoOfDay();\n\n    var offsetNanos = this._offset.totalSeconds() * LocalTime.NANOS_PER_SECOND;\n    return nod - offsetNanos;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalTime) {\n      return this._withLocalTimeOffset(adjuster, this._offset);\n    } else if (adjuster instanceof ZoneOffset) {\n      return this._withLocalTimeOffset(this._time, adjuster);\n    } else if (adjuster instanceof OffsetTime) {\n      return adjuster;\n    }\n\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.OFFSET_SECONDS) {\n        return this._withLocalTimeOffset(this._time, ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue)));\n      }\n\n      return this._withLocalTimeOffset(this._time.with(field, newValue), this._offset);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto._withLocalTimeOffset = function _withLocalTimeOffset(time, offset) {\n    if (this._time === time && this._offset.equals(offset)) {\n      return this;\n    }\n\n    return new OffsetTime(time, offset);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, OffsetTime, 'other');\n\n    if (this._offset.equals(other._offset)) {\n      return this._time.compareTo(other._time);\n    }\n\n    var compare = MathUtil.compareNumbers(this._toEpochNano(), other._toEpochNano());\n\n    if (compare === 0) {\n      return this._time.compareTo(other._time);\n    }\n\n    return compare;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof OffsetTime) {\n      return this._time.equals(other._time) && this._offset.equals(other._offset);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._time.hashCode() ^ this._offset.hashCode();\n  };\n\n  _proto.toString = function toString() {\n    return this._time.toString() + this._offset.toString();\n  };\n\n  return OffsetTime;\n}(DefaultInterfaceTemporal);\nfunction _init$f() {\n  OffsetTime.MIN = OffsetTime.ofNumbers(0, 0, 0, 0, ZoneOffset.MAX);\n  OffsetTime.MAX = OffsetTime.ofNumbers(23, 59, 59, 999999999, ZoneOffset.MIN);\n  OffsetTime.FROM = createTemporalQuery('OffsetTime.FROM', function (temporal) {\n    return OffsetTime.from(temporal);\n  });\n}\n\nvar ChronoZonedDateTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(ChronoZonedDateTime, _DefaultInterfaceTemp);\n\n  function ChronoZonedDateTime() {\n    return _DefaultInterfaceTemp.apply(this, arguments) || this;\n  }\n\n  var _proto = ChronoZonedDateTime.prototype;\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.zone()) {\n      return this.zone();\n    } else if (_query === TemporalQueries.chronology()) {\n      return this.toLocalDate().chronology();\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.offset()) {\n      return this.offset();\n    } else if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.toLocalTime();\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  _proto.toInstant = function toInstant() {\n    return Instant.ofEpochSecond(this.toEpochSecond(), this.toLocalTime().nano());\n  };\n\n  _proto.toEpochSecond = function toEpochSecond() {\n    var epochDay = this.toLocalDate().toEpochDay();\n    var secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n    secs -= this.offset().totalSeconds();\n    return secs;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    var cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n\n    if (cmp === 0) {\n      cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n\n      if (cmp === 0) {\n        cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n\n        if (cmp === 0) {\n          cmp = strcmp(this.zone().id(), other.zone().id());\n        }\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec > otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano();\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec < otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano();\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    requireNonNull(other, 'other');\n    return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ChronoZonedDateTime) {\n      return this.compareTo(other) === 0;\n    }\n\n    return false;\n  };\n\n  return ChronoZonedDateTime;\n}(DefaultInterfaceTemporal);\n\nfunction strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n}\n\nvar ZonedDateTime = function (_ChronoZonedDateTime) {\n  _inheritsLoose(ZonedDateTime, _ChronoZonedDateTime);\n\n  ZonedDateTime.now = function now(clockOrZone) {\n    var clock;\n\n    if (clockOrZone instanceof ZoneId) {\n      clock = Clock.system(clockOrZone);\n    } else {\n      clock = clockOrZone == null ? Clock.systemDefaultZone() : clockOrZone;\n    }\n\n    return ZonedDateTime.ofInstant(clock.instant(), clock.zone());\n  };\n\n  ZonedDateTime.of = function of() {\n    if (arguments.length <= 2) {\n      return ZonedDateTime.of2.apply(this, arguments);\n    } else if (arguments.length === 3 && arguments[0] instanceof LocalDate) {\n      return ZonedDateTime.of3.apply(this, arguments);\n    } else {\n      return ZonedDateTime.of8.apply(this, arguments);\n    }\n  };\n\n  ZonedDateTime.of3 = function of3(date, time, zone) {\n    return ZonedDateTime.of2(LocalDateTime.of(date, time), zone);\n  };\n\n  ZonedDateTime.of2 = function of2(localDateTime, zone) {\n    return ZonedDateTime.ofLocal(localDateTime, zone, null);\n  };\n\n  ZonedDateTime.of8 = function of8(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, zone) {\n    var dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n    return ZonedDateTime.ofLocal(dt, zone, null);\n  };\n\n  ZonedDateTime.ofLocal = function ofLocal(localDateTime, zone, preferredOffset) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(zone, 'zone');\n\n    if (zone instanceof ZoneOffset) {\n      return new ZonedDateTime(localDateTime, zone, zone);\n    }\n\n    var offset = null;\n    var rules = zone.rules();\n    var validOffsets = rules.validOffsets(localDateTime);\n\n    if (validOffsets.length === 1) {\n      offset = validOffsets[0];\n    } else if (validOffsets.length === 0) {\n      var trans = rules.transition(localDateTime);\n      localDateTime = localDateTime.plusSeconds(trans.duration().seconds());\n      offset = trans.offsetAfter();\n    } else {\n      if (preferredOffset != null && validOffsets.some(function (validOffset) {\n        return validOffset.equals(preferredOffset);\n      })) {\n        offset = preferredOffset;\n      } else {\n        offset = requireNonNull(validOffsets[0], 'offset');\n      }\n    }\n\n    return new ZonedDateTime(localDateTime, offset, zone);\n  };\n\n  ZonedDateTime.ofInstant = function ofInstant() {\n    if (arguments.length === 2) {\n      return ZonedDateTime.ofInstant2.apply(this, arguments);\n    } else {\n      return ZonedDateTime.ofInstant3.apply(this, arguments);\n    }\n  };\n\n  ZonedDateTime.ofInstant2 = function ofInstant2(instant, zone) {\n    requireNonNull(instant, 'instant');\n    requireNonNull(zone, 'zone');\n    return ZonedDateTime._create(instant.epochSecond(), instant.nano(), zone);\n  };\n\n  ZonedDateTime.ofInstant3 = function ofInstant3(localDateTime, offset, zone) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n    return ZonedDateTime._create(localDateTime.toEpochSecond(offset), localDateTime.nano(), zone);\n  };\n\n  ZonedDateTime._create = function _create(epochSecond, nanoOfSecond, zone) {\n    var rules = zone.rules();\n    var instant = Instant.ofEpochSecond(epochSecond, nanoOfSecond);\n    var offset = rules.offset(instant);\n    var ldt = LocalDateTime.ofEpochSecond(epochSecond, nanoOfSecond, offset);\n    return new ZonedDateTime(ldt, offset, zone);\n  };\n\n  ZonedDateTime.ofStrict = function ofStrict(localDateTime, offset, zone) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n    var rules = zone.rules();\n\n    if (rules.isValidOffset(localDateTime, offset) === false) {\n      var trans = rules.transition(localDateTime);\n\n      if (trans != null && trans.isGap()) {\n        throw new DateTimeException('LocalDateTime ' + localDateTime + ' does not exist in zone ' + zone + ' due to a gap in the local time-line, typically caused by daylight savings');\n      }\n\n      throw new DateTimeException('ZoneOffset \"' + offset + '\" is not valid for LocalDateTime \"' + localDateTime + '\" in zone \"' + zone + '\"');\n    }\n\n    return new ZonedDateTime(localDateTime, offset, zone);\n  };\n\n  ZonedDateTime.ofLenient = function ofLenient(localDateTime, offset, zone) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n\n    if (zone instanceof ZoneOffset && offset.equals(zone) === false) {\n      throw new IllegalArgumentException('ZoneId must match ZoneOffset');\n    }\n\n    return new ZonedDateTime(localDateTime, offset, zone);\n  };\n\n  ZonedDateTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof ZonedDateTime) {\n      return temporal;\n    }\n\n    var zone = ZoneId.from(temporal);\n\n    if (temporal.isSupported(ChronoField.INSTANT_SECONDS)) {\n      var zdt = ZonedDateTime._from(temporal, zone);\n\n      if (zdt != null) return zdt;\n    }\n\n    var ldt = LocalDateTime.from(temporal);\n    return ZonedDateTime.of2(ldt, zone);\n  };\n\n  ZonedDateTime._from = function _from(temporal, zone) {\n    try {\n      return ZonedDateTime.__from(temporal, zone);\n    } catch (ex) {\n      if (!(ex instanceof DateTimeException)) throw ex;\n    }\n  };\n\n  ZonedDateTime.__from = function __from(temporal, zone) {\n    var epochSecond = temporal.getLong(ChronoField.INSTANT_SECONDS);\n    var nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n    return ZonedDateTime._create(epochSecond, nanoOfSecond, zone);\n  };\n\n  ZonedDateTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, ZonedDateTime.FROM);\n  };\n\n  function ZonedDateTime(dateTime, offset, zone) {\n    var _this;\n\n    requireNonNull(dateTime, 'dateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n    _this = _ChronoZonedDateTime.call(this) || this;\n    _this._dateTime = dateTime;\n    _this._offset = offset;\n    _this._zone = zone;\n    return _this;\n  }\n\n  var _proto = ZonedDateTime.prototype;\n\n  _proto._resolveLocal = function _resolveLocal(newDateTime) {\n    requireNonNull(newDateTime, 'newDateTime');\n    return ZonedDateTime.ofLocal(newDateTime, this._zone, this._offset);\n  };\n\n  _proto._resolveInstant = function _resolveInstant(newDateTime) {\n    return ZonedDateTime.ofInstant3(newDateTime, this._offset, this._zone);\n  };\n\n  _proto._resolveOffset = function _resolveOffset(offset) {\n    if (offset.equals(this._offset) === false && this._zone.rules().isValidOffset(this._dateTime, offset)) {\n      return new ZonedDateTime(this._dateTime, offset, this._zone);\n    }\n\n    return this;\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return true;\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n        return field.range();\n      }\n\n      return this._dateTime.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          return this.toEpochSecond();\n\n        case ChronoField.OFFSET_SECONDS:\n          return this._offset.totalSeconds();\n      }\n\n      return this._dateTime.getLong(field);\n    }\n\n    requireNonNull(field, 'field');\n    return field.getFrom(this);\n  };\n\n  _proto.offset = function offset() {\n    return this._offset;\n  };\n\n  _proto.withEarlierOffsetAtOverlap = function withEarlierOffsetAtOverlap() {\n    var trans = this._zone.rules().transition(this._dateTime);\n\n    if (trans != null && trans.isOverlap()) {\n      var earlierOffset = trans.offsetBefore();\n\n      if (earlierOffset.equals(this._offset) === false) {\n        return new ZonedDateTime(this._dateTime, earlierOffset, this._zone);\n      }\n    }\n\n    return this;\n  };\n\n  _proto.withLaterOffsetAtOverlap = function withLaterOffsetAtOverlap() {\n    var trans = this._zone.rules().transition(this.toLocalDateTime());\n\n    if (trans != null) {\n      var laterOffset = trans.offsetAfter();\n\n      if (laterOffset.equals(this._offset) === false) {\n        return new ZonedDateTime(this._dateTime, laterOffset, this._zone);\n      }\n    }\n\n    return this;\n  };\n\n  _proto.zone = function zone() {\n    return this._zone;\n  };\n\n  _proto.withZoneSameLocal = function withZoneSameLocal(zone) {\n    requireNonNull(zone, 'zone');\n    return this._zone.equals(zone) ? this : ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n  };\n\n  _proto.withZoneSameInstant = function withZoneSameInstant(zone) {\n    requireNonNull(zone, 'zone');\n    return this._zone.equals(zone) ? this : ZonedDateTime._create(this._dateTime.toEpochSecond(this._offset), this._dateTime.nano(), zone);\n  };\n\n  _proto.withFixedOffsetZone = function withFixedOffsetZone() {\n    return this._zone.equals(this._offset) ? this : new ZonedDateTime(this._dateTime, this._offset, this._offset);\n  };\n\n  _proto.year = function year() {\n    return this._dateTime.year();\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._dateTime.monthValue();\n  };\n\n  _proto.month = function month() {\n    return this._dateTime.month();\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._dateTime.dayOfMonth();\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this._dateTime.dayOfYear();\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    return this._dateTime.dayOfWeek();\n  };\n\n  _proto.hour = function hour() {\n    return this._dateTime.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._dateTime.minute();\n  };\n\n  _proto.second = function second() {\n    return this._dateTime.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._dateTime.nano();\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    if (adjuster instanceof LocalDate) {\n      return this._resolveLocal(LocalDateTime.of(adjuster, this._dateTime.toLocalTime()));\n    } else if (adjuster instanceof LocalTime) {\n      return this._resolveLocal(LocalDateTime.of(this._dateTime.toLocalDate(), adjuster));\n    } else if (adjuster instanceof LocalDateTime) {\n      return this._resolveLocal(adjuster);\n    } else if (adjuster instanceof Instant) {\n      var instant = adjuster;\n      return ZonedDateTime._create(instant.epochSecond(), instant.nano(), this._zone);\n    } else if (adjuster instanceof ZoneOffset) {\n      return this._resolveOffset(adjuster);\n    }\n\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          return ZonedDateTime._create(newValue, this.nano(), this._zone);\n\n        case ChronoField.OFFSET_SECONDS:\n          {\n            var offset = ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue));\n            return this._resolveOffset(offset);\n          }\n      }\n\n      return this._resolveLocal(this._dateTime.with(field, newValue));\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    return this._resolveLocal(this._dateTime.withYear(year));\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this._resolveLocal(this._dateTime.withMonth(month));\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    return this._resolveLocal(this._dateTime.withDayOfMonth(dayOfMonth));\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    return this._resolveLocal(this._dateTime.withDayOfYear(dayOfYear));\n  };\n\n  _proto.withHour = function withHour(hour) {\n    return this._resolveLocal(this._dateTime.withHour(hour));\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    return this._resolveLocal(this._dateTime.withMinute(minute));\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    return this._resolveLocal(this._dateTime.withSecond(second));\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    return this._resolveLocal(this._dateTime.withNano(nanoOfSecond));\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._resolveLocal(this._dateTime.truncatedTo(unit));\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount);\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    if (unit instanceof ChronoUnit) {\n      if (unit.isDateBased()) {\n        return this._resolveLocal(this._dateTime.plus(amountToAdd, unit));\n      } else {\n        return this._resolveInstant(this._dateTime.plus(amountToAdd, unit));\n      }\n    }\n\n    requireNonNull(unit, 'unit');\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(years) {\n    return this._resolveLocal(this._dateTime.plusYears(years));\n  };\n\n  _proto.plusMonths = function plusMonths(months) {\n    return this._resolveLocal(this._dateTime.plusMonths(months));\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeks) {\n    return this._resolveLocal(this._dateTime.plusWeeks(weeks));\n  };\n\n  _proto.plusDays = function plusDays(days) {\n    return this._resolveLocal(this._dateTime.plusDays(days));\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._resolveInstant(this._dateTime.plusHours(hours));\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._resolveInstant(this._dateTime.plusMinutes(minutes));\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._resolveInstant(this._dateTime.plusSeconds(seconds));\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._resolveInstant(this._dateTime.plusNanos(nanos));\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(years) {\n    return this.plusYears(-1 * years);\n  };\n\n  _proto.minusMonths = function minusMonths(months) {\n    return this.plusMonths(-1 * months);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeks) {\n    return this.plusWeeks(-1 * weeks);\n  };\n\n  _proto.minusDays = function minusDays(days) {\n    return this.plusDays(-1 * days);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this.plusHours(-1 * hours);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this.plusMinutes(-1 * minutes);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this.plusSeconds(-1 * seconds);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this.plusNanos(-1 * nanos);\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.localDate()) {\n      return this.toLocalDate();\n    }\n\n    requireNonNull(_query, 'query');\n    return _ChronoZonedDateTime.prototype.query.call(this, _query);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    var end = ZonedDateTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      end = end.withZoneSameInstant(this._zone);\n\n      if (unit.isDateBased()) {\n        return this._dateTime.until(end._dateTime, unit);\n      } else {\n        var difference = this._offset.totalSeconds() - end._offset.totalSeconds();\n\n        var adjustedEnd = end._dateTime.plusSeconds(difference);\n\n        return this._dateTime.until(adjustedEnd, unit);\n      }\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.toLocalDateTime = function toLocalDateTime() {\n    return this._dateTime;\n  };\n\n  _proto.toLocalDate = function toLocalDate() {\n    return this._dateTime.toLocalDate();\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._dateTime.toLocalTime();\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ZonedDateTime) {\n      return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset) && this._zone.equals(other._zone);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._dateTime.hashCode(), this._offset.hashCode(), this._zone.hashCode());\n  };\n\n  _proto.toString = function toString() {\n    var str = this._dateTime.toString() + this._offset.toString();\n\n    if (this._offset !== this._zone) {\n      str += '[' + this._zone.toString() + ']';\n    }\n\n    return str;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    return _ChronoZonedDateTime.prototype.format.call(this, formatter);\n  };\n\n  return ZonedDateTime;\n}(ChronoZonedDateTime);\nfunction _init$g() {\n  ZonedDateTime.FROM = createTemporalQuery('ZonedDateTime.FROM', function (temporal) {\n    return ZonedDateTime.from(temporal);\n  });\n}\n\nvar OffsetDateTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(OffsetDateTime, _DefaultInterfaceTemp);\n\n  OffsetDateTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof OffsetDateTime) {\n      return temporal;\n    }\n\n    try {\n      var offset = ZoneOffset.from(temporal);\n\n      try {\n        var ldt = LocalDateTime.from(temporal);\n        return OffsetDateTime.of(ldt, offset);\n      } catch (_) {\n        var instant = Instant.from(temporal);\n        return OffsetDateTime.ofInstant(instant, offset);\n      }\n    } catch (ex) {\n      throw new DateTimeException(\"Unable to obtain OffsetDateTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  OffsetDateTime.now = function now(clockOrZone) {\n    if (arguments.length === 0) {\n      return OffsetDateTime.now(Clock.systemDefaultZone());\n    } else {\n      requireNonNull(clockOrZone, 'clockOrZone');\n\n      if (clockOrZone instanceof ZoneId) {\n        return OffsetDateTime.now(Clock.system(clockOrZone));\n      } else if (clockOrZone instanceof Clock) {\n        var now = clockOrZone.instant();\n        return OffsetDateTime.ofInstant(now, clockOrZone.zone().rules().offset(now));\n      } else {\n        throw new IllegalArgumentException('clockOrZone must be an instance of ZoneId or Clock');\n      }\n    }\n  };\n\n  OffsetDateTime.of = function of() {\n    if (arguments.length <= 2) {\n      return OffsetDateTime.ofDateTime.apply(this, arguments);\n    } else if (arguments.length === 3) {\n      return OffsetDateTime.ofDateAndTime.apply(this, arguments);\n    } else {\n      return OffsetDateTime.ofNumbers.apply(this, arguments);\n    }\n  };\n\n  OffsetDateTime.ofDateTime = function ofDateTime(dateTime, offset) {\n    return new OffsetDateTime(dateTime, offset);\n  };\n\n  OffsetDateTime.ofDateAndTime = function ofDateAndTime(date, time, offset) {\n    var dt = LocalDateTime.of(date, time);\n    return new OffsetDateTime(dt, offset);\n  };\n\n  OffsetDateTime.ofNumbers = function ofNumbers(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, offset) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    var dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n    return new OffsetDateTime(dt, offset);\n  };\n\n  OffsetDateTime.ofInstant = function ofInstant(instant, zone) {\n    requireNonNull(instant, 'instant');\n    requireNonNull(zone, 'zone');\n    var rules = zone.rules();\n    var offset = rules.offset(instant);\n    var ldt = LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n    return new OffsetDateTime(ldt, offset);\n  };\n\n  OffsetDateTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, OffsetDateTime.FROM);\n  };\n\n  function OffsetDateTime(dateTime, offset) {\n    var _this;\n\n    _this = _DefaultInterfaceTemp.call(this) || this;\n    requireNonNull(dateTime, 'dateTime');\n    requireInstance(dateTime, LocalDateTime, 'dateTime');\n    requireNonNull(offset, 'offset');\n    requireInstance(offset, ZoneOffset, 'offset');\n    _this._dateTime = dateTime;\n    _this._offset = offset;\n    return _this;\n  }\n\n  var _proto = OffsetDateTime.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay()).with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay()).with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    var end = OffsetDateTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      end = end.withOffsetSameInstant(this._offset);\n      return this._dateTime.until(end._dateTime, unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atZoneSameInstant = function atZoneSameInstant(zone) {\n    return ZonedDateTime.ofInstant(this._dateTime, this._offset, zone);\n  };\n\n  _proto.atZoneSimilarLocal = function atZoneSimilarLocal(zone) {\n    return ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n      return this.offset();\n    } else if (_query === TemporalQueries.localDate()) {\n      return this.toLocalDate();\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.toLocalTime();\n    } else if (_query === TemporalQueries.zoneId()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.get = function get(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          throw new DateTimeException('Field too large for an int: ' + field);\n\n        case ChronoField.OFFSET_SECONDS:\n          return this.offset().totalSeconds();\n      }\n\n      return this._dateTime.get(field);\n    }\n\n    return _DefaultInterfaceTemp.prototype.get.call(this, field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          return this.toEpochSecond();\n\n        case ChronoField.OFFSET_SECONDS:\n          return this.offset().totalSeconds();\n      }\n\n      return this._dateTime.getLong(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.offset = function offset() {\n    return this._offset;\n  };\n\n  _proto.year = function year() {\n    return this._dateTime.year();\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._dateTime.monthValue();\n  };\n\n  _proto.month = function month() {\n    return this._dateTime.month();\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._dateTime.dayOfMonth();\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this._dateTime.dayOfYear();\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    return this._dateTime.dayOfWeek();\n  };\n\n  _proto.hour = function hour() {\n    return this._dateTime.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._dateTime.minute();\n  };\n\n  _proto.second = function second() {\n    return this._dateTime.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._dateTime.nano();\n  };\n\n  _proto.toLocalDateTime = function toLocalDateTime() {\n    return this._dateTime;\n  };\n\n  _proto.toLocalDate = function toLocalDate() {\n    return this._dateTime.toLocalDate();\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._dateTime.toLocalTime();\n  };\n\n  _proto.toOffsetTime = function toOffsetTime() {\n    return OffsetTime.of(this._dateTime.toLocalTime(), this._offset);\n  };\n\n  _proto.toZonedDateTime = function toZonedDateTime() {\n    return ZonedDateTime.of(this._dateTime, this._offset);\n  };\n\n  _proto.toInstant = function toInstant() {\n    return this._dateTime.toInstant(this._offset);\n  };\n\n  _proto.toEpochSecond = function toEpochSecond() {\n    return this._dateTime.toEpochSecond(this._offset);\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n        return field.range();\n      }\n\n      return this._dateTime.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster);\n\n    if (adjuster instanceof LocalDate || adjuster instanceof LocalTime || adjuster instanceof LocalDateTime) {\n      return this._withDateTimeOffset(this._dateTime.with(adjuster), this._offset);\n    } else if (adjuster instanceof Instant) {\n      return OffsetDateTime.ofInstant(adjuster, this._offset);\n    } else if (adjuster instanceof ZoneOffset) {\n      return this._withDateTimeOffset(this._dateTime, adjuster);\n    } else if (adjuster instanceof OffsetDateTime) {\n      return adjuster;\n    }\n\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field);\n\n    if (field instanceof ChronoField) {\n      var f = field;\n\n      switch (f) {\n        case ChronoField.INSTANT_SECONDS:\n          return OffsetDateTime.ofInstant(Instant.ofEpochSecond(newValue, this.nano()), this._offset);\n\n        case ChronoField.OFFSET_SECONDS:\n          {\n            return this._withDateTimeOffset(this._dateTime, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));\n          }\n      }\n\n      return this._withDateTimeOffset(this._dateTime.with(field, newValue), this._offset);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto._withDateTimeOffset = function _withDateTimeOffset(dateTime, offset) {\n    if (this._dateTime === dateTime && this._offset.equals(offset)) {\n      return this;\n    }\n\n    return new OffsetDateTime(dateTime, offset);\n  };\n\n  _proto.withYear = function withYear(year) {\n    return this._withDateTimeOffset(this._dateTime.withYear(year), this._offset);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this._withDateTimeOffset(this._dateTime.withMonth(month), this._offset);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    return this._withDateTimeOffset(this._dateTime.withDayOfMonth(dayOfMonth), this._offset);\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    return this._withDateTimeOffset(this._dateTime.withDayOfYear(dayOfYear), this._offset);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    return this._withDateTimeOffset(this._dateTime.withHour(hour), this._offset);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    return this._withDateTimeOffset(this._dateTime.withMinute(minute), this._offset);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    return this._withDateTimeOffset(this._dateTime.withSecond(second), this._offset);\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    return this._withDateTimeOffset(this._dateTime.withNano(nanoOfSecond), this._offset);\n  };\n\n  _proto.withOffsetSameLocal = function withOffsetSameLocal(offset) {\n    requireNonNull(offset, 'offset');\n    return this._withDateTimeOffset(this._dateTime, offset);\n  };\n\n  _proto.withOffsetSameInstant = function withOffsetSameInstant(offset) {\n    requireNonNull(offset, 'offset');\n\n    if (offset.equals(this._offset)) {\n      return this;\n    }\n\n    var difference = offset.totalSeconds() - this._offset.totalSeconds();\n\n    var adjusted = this._dateTime.plusSeconds(difference);\n\n    return new OffsetDateTime(adjusted, offset);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._withDateTimeOffset(this._dateTime.truncatedTo(unit), this._offset);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    if (unit instanceof ChronoUnit) {\n      return this._withDateTimeOffset(this._dateTime.plus(amountToAdd, unit), this._offset);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(years) {\n    return this._withDateTimeOffset(this._dateTime.plusYears(years), this._offset);\n  };\n\n  _proto.plusMonths = function plusMonths(months) {\n    return this._withDateTimeOffset(this._dateTime.plusMonths(months), this._offset);\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeks) {\n    return this._withDateTimeOffset(this._dateTime.plusWeeks(weeks), this._offset);\n  };\n\n  _proto.plusDays = function plusDays(days) {\n    return this._withDateTimeOffset(this._dateTime.plusDays(days), this._offset);\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._withDateTimeOffset(this._dateTime.plusHours(hours), this._offset);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._withDateTimeOffset(this._dateTime.plusMinutes(minutes), this._offset);\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._withDateTimeOffset(this._dateTime.plusSeconds(seconds), this._offset);\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._withDateTimeOffset(this._dateTime.plusNanos(nanos), this._offset);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount);\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plus(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(years) {\n    return this._withDateTimeOffset(this._dateTime.minusYears(years), this._offset);\n  };\n\n  _proto.minusMonths = function minusMonths(months) {\n    return this._withDateTimeOffset(this._dateTime.minusMonths(months), this._offset);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeks) {\n    return this._withDateTimeOffset(this._dateTime.minusWeeks(weeks), this._offset);\n  };\n\n  _proto.minusDays = function minusDays(days) {\n    return this._withDateTimeOffset(this._dateTime.minusDays(days), this._offset);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this._withDateTimeOffset(this._dateTime.minusHours(hours), this._offset);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this._withDateTimeOffset(this._dateTime.minusMinutes(minutes), this._offset);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this._withDateTimeOffset(this._dateTime.minusSeconds(seconds), this._offset);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this._withDateTimeOffset(this._dateTime.minusNanos(nanos), this._offset);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, OffsetDateTime, 'other');\n\n    if (this.offset().equals(other.offset())) {\n      return this.toLocalDateTime().compareTo(other.toLocalDateTime());\n    }\n\n    var cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n\n    if (cmp === 0) {\n      cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n\n      if (cmp === 0) {\n        cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec > otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano();\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec < otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano();\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    requireNonNull(other, 'other');\n    return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof OffsetDateTime) {\n      return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._dateTime.hashCode() ^ this._offset.hashCode();\n  };\n\n  _proto.toString = function toString() {\n    return this._dateTime.toString() + this._offset.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return OffsetDateTime;\n}(DefaultInterfaceTemporal);\nfunction _init$h() {\n  OffsetDateTime.MIN = LocalDateTime.MIN.atOffset(ZoneOffset.MAX);\n  OffsetDateTime.MAX = LocalDateTime.MAX.atOffset(ZoneOffset.MIN);\n  OffsetDateTime.FROM = createTemporalQuery('OffsetDateTime.FROM', function (temporal) {\n    return OffsetDateTime.from(temporal);\n  });\n}\n\nvar DAYS_PER_CYCLE = 146097;\nvar DAYS_0000_TO_1970 = DAYS_PER_CYCLE * 5 - (30 * 365 + 7);\nvar LocalDate = function (_ChronoLocalDate) {\n  _inheritsLoose(LocalDate, _ChronoLocalDate);\n\n  LocalDate.now = function now(clockOrZone) {\n    var clock;\n\n    if (clockOrZone == null) {\n      clock = Clock.systemDefaultZone();\n    } else if (clockOrZone instanceof ZoneId) {\n      clock = Clock.system(clockOrZone);\n    } else {\n      clock = clockOrZone;\n    }\n\n    return LocalDate.ofInstant(clock.instant(), clock.zone());\n  };\n\n  LocalDate.ofInstant = function ofInstant(instant, zone) {\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    requireNonNull(instant, 'instant');\n    var offset = zone.rules().offset(instant);\n    var epochSec = instant.epochSecond() + offset.totalSeconds();\n    var epochDay = MathUtil.floorDiv(epochSec, LocalTime.SECONDS_PER_DAY);\n    return LocalDate.ofEpochDay(epochDay);\n  };\n\n  LocalDate.of = function of(year, month, dayOfMonth) {\n    return new LocalDate(year, month, dayOfMonth);\n  };\n\n  LocalDate.ofYearDay = function ofYearDay(year, dayOfYear) {\n    ChronoField.YEAR.checkValidValue(year);\n    var leap = IsoChronology.isLeapYear(year);\n\n    if (dayOfYear === 366 && leap === false) {\n      assert(false, 'Invalid date \\'DayOfYear 366\\' as \\'' + year + '\\' is not a leap year', DateTimeException);\n    }\n\n    var moy = Month.of(Math.floor((dayOfYear - 1) / 31 + 1));\n    var monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n\n    if (dayOfYear > monthEnd) {\n      moy = moy.plus(1);\n    }\n\n    var dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n    return new LocalDate(year, moy.value(), dom);\n  };\n\n  LocalDate.ofEpochDay = function ofEpochDay(epochDay) {\n    if (epochDay === void 0) {\n      epochDay = 0;\n    }\n\n    var adjust, adjustCycles, doyEst, yearEst, zeroDay;\n    zeroDay = epochDay + DAYS_0000_TO_1970;\n    zeroDay -= 60;\n    adjust = 0;\n\n    if (zeroDay < 0) {\n      adjustCycles = MathUtil.intDiv(zeroDay + 1, DAYS_PER_CYCLE) - 1;\n      adjust = adjustCycles * 400;\n      zeroDay += -adjustCycles * DAYS_PER_CYCLE;\n    }\n\n    yearEst = MathUtil.intDiv(400 * zeroDay + 591, DAYS_PER_CYCLE);\n    doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n\n    if (doyEst < 0) {\n      yearEst--;\n      doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n    }\n\n    yearEst += adjust;\n    var marchDoy0 = doyEst;\n    var marchMonth0 = MathUtil.intDiv(marchDoy0 * 5 + 2, 153);\n    var month = (marchMonth0 + 2) % 12 + 1;\n    var dom = marchDoy0 - MathUtil.intDiv(marchMonth0 * 306 + 5, 10) + 1;\n    yearEst += MathUtil.intDiv(marchMonth0, 10);\n    var year = yearEst;\n    return new LocalDate(year, month, dom);\n  };\n\n  LocalDate.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    var date = temporal.query(TemporalQueries.localDate());\n\n    if (date == null) {\n      throw new DateTimeException(\"Unable to obtain LocalDate from TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n\n    return date;\n  };\n\n  LocalDate.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_LOCAL_DATE;\n    }\n\n    assert(formatter != null, 'formatter', NullPointerException);\n    return formatter.parse(text, LocalDate.FROM);\n  };\n\n  LocalDate._resolvePreviousValid = function _resolvePreviousValid(year, month, day) {\n    switch (month) {\n      case 2:\n        day = Math.min(day, IsoChronology.isLeapYear(year) ? 29 : 28);\n        break;\n\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        day = Math.min(day, 30);\n        break;\n    }\n\n    return LocalDate.of(year, month, day);\n  };\n\n  function LocalDate(year, month, dayOfMonth) {\n    var _this;\n\n    _this = _ChronoLocalDate.call(this) || this;\n    requireNonNull(year, 'year');\n    requireNonNull(month, 'month');\n    requireNonNull(dayOfMonth, 'dayOfMonth');\n\n    if (month instanceof Month) {\n      month = month.value();\n    }\n\n    _this._year = MathUtil.safeToInt(year);\n    _this._month = MathUtil.safeToInt(month);\n    _this._day = MathUtil.safeToInt(dayOfMonth);\n\n    LocalDate._validate(_this._year, _this._month, _this._day);\n\n    return _this;\n  }\n\n  LocalDate._validate = function _validate(year, month, dayOfMonth) {\n    var dom;\n    ChronoField.YEAR.checkValidValue(year);\n    ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n    ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n\n    if (dayOfMonth > 28) {\n      dom = 31;\n\n      switch (month) {\n        case 2:\n          dom = IsoChronology.isLeapYear(year) ? 29 : 28;\n          break;\n\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n          dom = 30;\n      }\n\n      if (dayOfMonth > dom) {\n        if (dayOfMonth === 29) {\n          assert(false, 'Invalid date \\'February 29\\' as \\'' + year + '\\' is not a leap year', DateTimeException);\n        } else {\n          assert(false, 'Invalid date \\'' + year + '\\' \\'' + month + '\\' \\'' + dayOfMonth + '\\'', DateTimeException);\n        }\n      }\n    }\n  };\n\n  var _proto = LocalDate.prototype;\n\n  _proto.isSupported = function isSupported(field) {\n    return _ChronoLocalDate.prototype.isSupported.call(this, field);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field.isDateBased()) {\n        switch (field) {\n          case ChronoField.DAY_OF_MONTH:\n            return ValueRange.of(1, this.lengthOfMonth());\n\n          case ChronoField.DAY_OF_YEAR:\n            return ValueRange.of(1, this.lengthOfYear());\n\n          case ChronoField.ALIGNED_WEEK_OF_MONTH:\n            return ValueRange.of(1, this.month() === Month.FEBRUARY && this.isLeapYear() === false ? 4 : 5);\n\n          case ChronoField.YEAR_OF_ERA:\n            return this._year <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE);\n        }\n\n        return field.range();\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    assert(field != null, '', NullPointerException);\n\n    if (field instanceof ChronoField) {\n      return this._get0(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto._get0 = function _get0(field) {\n    switch (field) {\n      case ChronoField.DAY_OF_WEEK:\n        return this.dayOfWeek().value();\n\n      case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH:\n        return MathUtil.intMod(this._day - 1, 7) + 1;\n\n      case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR:\n        return MathUtil.intMod(this.dayOfYear() - 1, 7) + 1;\n\n      case ChronoField.DAY_OF_MONTH:\n        return this._day;\n\n      case ChronoField.DAY_OF_YEAR:\n        return this.dayOfYear();\n\n      case ChronoField.EPOCH_DAY:\n        return this.toEpochDay();\n\n      case ChronoField.ALIGNED_WEEK_OF_MONTH:\n        return MathUtil.intDiv(this._day - 1, 7) + 1;\n\n      case ChronoField.ALIGNED_WEEK_OF_YEAR:\n        return MathUtil.intDiv(this.dayOfYear() - 1, 7) + 1;\n\n      case ChronoField.MONTH_OF_YEAR:\n        return this._month;\n\n      case ChronoField.PROLEPTIC_MONTH:\n        return this._prolepticMonth();\n\n      case ChronoField.YEAR_OF_ERA:\n        return this._year >= 1 ? this._year : 1 - this._year;\n\n      case ChronoField.YEAR:\n        return this._year;\n\n      case ChronoField.ERA:\n        return this._year >= 1 ? 1 : 0;\n    }\n\n    throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n  };\n\n  _proto._prolepticMonth = function _prolepticMonth() {\n    return this._year * 12 + (this._month - 1);\n  };\n\n  _proto.chronology = function chronology() {\n    return IsoChronology.INSTANCE;\n  };\n\n  _proto.year = function year() {\n    return this._year;\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._month;\n  };\n\n  _proto.month = function month() {\n    return Month.of(this._month);\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._day;\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this.month().firstDayOfYear(this.isLeapYear()) + this._day - 1;\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    var dow0 = MathUtil.floorMod(this.toEpochDay() + 3, 7);\n    return DayOfWeek.of(dow0 + 1);\n  };\n\n  _proto.isLeapYear = function isLeapYear() {\n    return IsoChronology.isLeapYear(this._year);\n  };\n\n  _proto.lengthOfMonth = function lengthOfMonth() {\n    switch (this._month) {\n      case 2:\n        return this.isLeapYear() ? 29 : 28;\n\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.lengthOfYear = function lengthOfYear() {\n    return this.isLeapYear() ? 366 : 365;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalDate) {\n      return adjuster;\n    }\n\n    assert(typeof adjuster.adjustInto === 'function', 'adjuster', IllegalArgumentException);\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    assert(field != null, 'field', NullPointerException);\n\n    if (field instanceof ChronoField) {\n      var f = field;\n      f.checkValidValue(newValue);\n\n      switch (f) {\n        case ChronoField.DAY_OF_WEEK:\n          return this.plusDays(newValue - this.dayOfWeek().value());\n\n        case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH:\n          return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH));\n\n        case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR:\n          return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n\n        case ChronoField.DAY_OF_MONTH:\n          return this.withDayOfMonth(newValue);\n\n        case ChronoField.DAY_OF_YEAR:\n          return this.withDayOfYear(newValue);\n\n        case ChronoField.EPOCH_DAY:\n          return LocalDate.ofEpochDay(newValue);\n\n        case ChronoField.ALIGNED_WEEK_OF_MONTH:\n          return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_MONTH));\n\n        case ChronoField.ALIGNED_WEEK_OF_YEAR:\n          return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_YEAR));\n\n        case ChronoField.MONTH_OF_YEAR:\n          return this.withMonth(newValue);\n\n        case ChronoField.PROLEPTIC_MONTH:\n          return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n\n        case ChronoField.YEAR_OF_ERA:\n          return this.withYear(this._year >= 1 ? newValue : 1 - newValue);\n\n        case ChronoField.YEAR:\n          return this.withYear(newValue);\n\n        case ChronoField.ERA:\n          return this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    if (this._year === year) {\n      return this;\n    }\n\n    ChronoField.YEAR.checkValidValue(year);\n    return LocalDate._resolvePreviousValid(year, this._month, this._day);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    var m = month instanceof Month ? month.value() : month;\n\n    if (this._month === m) {\n      return this;\n    }\n\n    ChronoField.MONTH_OF_YEAR.checkValidValue(m);\n    return LocalDate._resolvePreviousValid(this._year, m, this._day);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    if (this._day === dayOfMonth) {\n      return this;\n    }\n\n    return LocalDate.of(this._year, this._month, dayOfMonth);\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    if (this.dayOfYear() === dayOfYear) {\n      return this;\n    }\n\n    return LocalDate.ofYearDay(this._year, dayOfYear);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.DAYS:\n          return this.plusDays(amountToAdd);\n\n        case ChronoUnit.WEEKS:\n          return this.plusWeeks(amountToAdd);\n\n        case ChronoUnit.MONTHS:\n          return this.plusMonths(amountToAdd);\n\n        case ChronoUnit.YEARS:\n          return this.plusYears(amountToAdd);\n\n        case ChronoUnit.DECADES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n\n        case ChronoUnit.CENTURIES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n\n        case ChronoUnit.MILLENNIA:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n\n        case ChronoUnit.ERAS:\n          return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    var newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);\n    return LocalDate._resolvePreviousValid(newYear, this._month, this._day);\n  };\n\n  _proto.plusMonths = function plusMonths(monthsToAdd) {\n    if (monthsToAdd === 0) {\n      return this;\n    }\n\n    var monthCount = this._year * 12 + (this._month - 1);\n    var calcMonths = monthCount + monthsToAdd;\n    var newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n    var newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n    return LocalDate._resolvePreviousValid(newYear, newMonth, this._day);\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeksToAdd) {\n    return this.plusDays(MathUtil.safeMultiply(weeksToAdd, 7));\n  };\n\n  _proto.plusDays = function plusDays(daysToAdd) {\n    if (daysToAdd === 0) {\n      return this;\n    }\n\n    var mjDay = MathUtil.safeAdd(this.toEpochDay(), daysToAdd);\n    return LocalDate.ofEpochDay(mjDay);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return this.plusYears(yearsToSubtract * -1);\n  };\n\n  _proto.minusMonths = function minusMonths(monthsToSubtract) {\n    return this.plusMonths(monthsToSubtract * -1);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeksToSubtract) {\n    return this.plusWeeks(weeksToSubtract * -1);\n  };\n\n  _proto.minusDays = function minusDays(daysToSubtract) {\n    return this.plusDays(daysToSubtract * -1);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.localDate()) {\n      return this;\n    }\n\n    return _ChronoLocalDate.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return _ChronoLocalDate.prototype.adjustInto.call(this, temporal);\n  };\n\n  _proto.until = function until(p1, p2) {\n    if (arguments.length < 2) {\n      return this.until1(p1);\n    } else {\n      return this.until2(p1, p2);\n    }\n  };\n\n  _proto.until2 = function until2(endExclusive, unit) {\n    var end = LocalDate.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.DAYS:\n          return this.daysUntil(end);\n\n        case ChronoUnit.WEEKS:\n          return MathUtil.intDiv(this.daysUntil(end), 7);\n\n        case ChronoUnit.MONTHS:\n          return this._monthsUntil(end);\n\n        case ChronoUnit.YEARS:\n          return MathUtil.intDiv(this._monthsUntil(end), 12);\n\n        case ChronoUnit.DECADES:\n          return MathUtil.intDiv(this._monthsUntil(end), 120);\n\n        case ChronoUnit.CENTURIES:\n          return MathUtil.intDiv(this._monthsUntil(end), 1200);\n\n        case ChronoUnit.MILLENNIA:\n          return MathUtil.intDiv(this._monthsUntil(end), 12000);\n\n        case ChronoUnit.ERAS:\n          return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.daysUntil = function daysUntil(end) {\n    return end.toEpochDay() - this.toEpochDay();\n  };\n\n  _proto._monthsUntil = function _monthsUntil(end) {\n    var packed1 = this._prolepticMonth() * 32 + this.dayOfMonth();\n    var packed2 = end._prolepticMonth() * 32 + end.dayOfMonth();\n    return MathUtil.intDiv(packed2 - packed1, 32);\n  };\n\n  _proto.until1 = function until1(endDate) {\n    var end = LocalDate.from(endDate);\n\n    var totalMonths = end._prolepticMonth() - this._prolepticMonth();\n\n    var days = end._day - this._day;\n\n    if (totalMonths > 0 && days < 0) {\n      totalMonths--;\n      var calcDate = this.plusMonths(totalMonths);\n      days = end.toEpochDay() - calcDate.toEpochDay();\n    } else if (totalMonths < 0 && days > 0) {\n      totalMonths++;\n      days -= end.lengthOfMonth();\n    }\n\n    var years = MathUtil.intDiv(totalMonths, 12);\n    var months = MathUtil.intMod(totalMonths, 12);\n    return Period.of(years, months, days);\n  };\n\n  _proto.atTime = function atTime() {\n    if (arguments.length === 1) {\n      return this.atTime1.apply(this, arguments);\n    } else {\n      return this.atTime4.apply(this, arguments);\n    }\n  };\n\n  _proto.atTime1 = function atTime1(time) {\n    requireNonNull(time, 'time');\n\n    if (time instanceof LocalTime) {\n      return LocalDateTime.of(this, time);\n    } else if (time instanceof OffsetTime) {\n      return this._atTimeOffsetTime(time);\n    } else {\n      throw new IllegalArgumentException('time must be an instance of LocalTime or OffsetTime' + (time && time.constructor && time.constructor.name ? ', but is ' + time.constructor.name : ''));\n    }\n  };\n\n  _proto.atTime4 = function atTime4(hour, minute, second, nanoOfSecond) {\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    return this.atTime1(LocalTime.of(hour, minute, second, nanoOfSecond));\n  };\n\n  _proto._atTimeOffsetTime = function _atTimeOffsetTime(time) {\n    return OffsetDateTime.of(LocalDateTime.of(this, time.toLocalTime()), time.offset());\n  };\n\n  _proto.atStartOfDay = function atStartOfDay(zone) {\n    if (zone != null) {\n      return this.atStartOfDayWithZone(zone);\n    } else {\n      return LocalDateTime.of(this, LocalTime.MIDNIGHT);\n    }\n  };\n\n  _proto.atStartOfDayWithZone = function atStartOfDayWithZone(zone) {\n    requireNonNull(zone, 'zone');\n    var ldt = this.atTime(LocalTime.MIDNIGHT);\n\n    if (zone instanceof ZoneOffset === false) {\n      var trans = zone.rules().transition(ldt);\n\n      if (trans != null && trans.isGap()) {\n        ldt = trans.dateTimeAfter();\n      }\n    }\n\n    return ZonedDateTime.of(ldt, zone);\n  };\n\n  _proto.toEpochDay = function toEpochDay() {\n    var y = this._year;\n    var m = this._month;\n    var total = 0;\n    total += 365 * y;\n\n    if (y >= 0) {\n      total += MathUtil.intDiv(y + 3, 4) - MathUtil.intDiv(y + 99, 100) + MathUtil.intDiv(y + 399, 400);\n    } else {\n      total -= MathUtil.intDiv(y, -4) - MathUtil.intDiv(y, -100) + MathUtil.intDiv(y, -400);\n    }\n\n    total += MathUtil.intDiv(367 * m - 362, 12);\n    total += this.dayOfMonth() - 1;\n\n    if (m > 2) {\n      total--;\n\n      if (!IsoChronology.isLeapYear(y)) {\n        total--;\n      }\n    }\n\n    return total - DAYS_0000_TO_1970;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, LocalDate, 'other');\n    return this._compareTo0(other);\n  };\n\n  _proto._compareTo0 = function _compareTo0(otherDate) {\n    var cmp = this._year - otherDate._year;\n\n    if (cmp === 0) {\n      cmp = this._month - otherDate._month;\n\n      if (cmp === 0) {\n        cmp = this._day - otherDate._day;\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    return this.compareTo(other) === 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof LocalDate) {\n      return this._compareTo0(other) === 0;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    var yearValue = this._year;\n    var monthValue = this._month;\n    var dayValue = this._day;\n    return MathUtil.hash(yearValue & 0xFFFFF800 ^ (yearValue << 11) + (monthValue << 6) + dayValue);\n  };\n\n  _proto.toString = function toString() {\n    var dayString, monthString, yearString;\n    var yearValue = this._year;\n    var monthValue = this._month;\n    var dayValue = this._day;\n    var absYear = Math.abs(yearValue);\n\n    if (absYear < 1000) {\n      if (yearValue < 0) {\n        yearString = '-' + ('' + (yearValue - 10000)).slice(-4);\n      } else {\n        yearString = ('' + (yearValue + 10000)).slice(-4);\n      }\n    } else {\n      if (yearValue > 9999) {\n        yearString = '+' + yearValue;\n      } else {\n        yearString = '' + yearValue;\n      }\n    }\n\n    if (monthValue < 10) {\n      monthString = '-0' + monthValue;\n    } else {\n      monthString = '-' + monthValue;\n    }\n\n    if (dayValue < 10) {\n      dayString = '-0' + dayValue;\n    } else {\n      dayString = '-' + dayValue;\n    }\n\n    return yearString + monthString + dayString;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return _ChronoLocalDate.prototype.format.call(this, formatter);\n  };\n\n  return LocalDate;\n}(ChronoLocalDate);\nfunction _init$i() {\n  LocalDate.MIN = LocalDate.of(YearConstants.MIN_VALUE, 1, 1);\n  LocalDate.MAX = LocalDate.of(YearConstants.MAX_VALUE, 12, 31);\n  LocalDate.EPOCH_0 = LocalDate.ofEpochDay(0);\n  LocalDate.FROM = createTemporalQuery('LocalDate.FROM', function (temporal) {\n    return LocalDate.from(temporal);\n  });\n}\n\nvar ChronoLocalDateTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(ChronoLocalDateTime, _DefaultInterfaceTemp);\n\n  function ChronoLocalDateTime() {\n    return _DefaultInterfaceTemp.apply(this, arguments) || this;\n  }\n\n  var _proto = ChronoLocalDateTime.prototype;\n\n  _proto.chronology = function chronology() {\n    return this.toLocalDate().chronology();\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.chronology()) {\n      return this.chronology();\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.toLocalTime();\n    } else if (_query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay()).with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay());\n  };\n\n  _proto.toInstant = function toInstant(offset) {\n    requireInstance(offset, ZoneOffset, 'zoneId');\n    return Instant.ofEpochSecond(this.toEpochSecond(offset), this.toLocalTime().nano());\n  };\n\n  _proto.toEpochSecond = function toEpochSecond(offset) {\n    requireNonNull(offset, 'offset');\n    var epochDay = this.toLocalDate().toEpochDay();\n    var secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n    secs -= offset.totalSeconds();\n    return MathUtil.safeToInt(secs);\n  };\n\n  return ChronoLocalDateTime;\n}(DefaultInterfaceTemporal);\n\nvar LocalDateTime = function (_ChronoLocalDateTime) {\n  _inheritsLoose(LocalDateTime, _ChronoLocalDateTime);\n\n  LocalDateTime.now = function now(clockOrZone) {\n    if (clockOrZone == null) {\n      return LocalDateTime._now(Clock.systemDefaultZone());\n    } else if (clockOrZone instanceof Clock) {\n      return LocalDateTime._now(clockOrZone);\n    } else {\n      return LocalDateTime._now(Clock.system(clockOrZone));\n    }\n  };\n\n  LocalDateTime._now = function _now(clock) {\n    requireNonNull(clock, 'clock');\n    return LocalDateTime.ofInstant(clock.instant(), clock.zone());\n  };\n\n  LocalDateTime._ofEpochMillis = function _ofEpochMillis(epochMilli, offset) {\n    var localSecond = MathUtil.floorDiv(epochMilli, 1000) + offset.totalSeconds();\n    var localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n    var secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n    var nanoOfSecond = MathUtil.floorMod(epochMilli, 1000) * 1000000;\n    var date = LocalDate.ofEpochDay(localEpochDay);\n    var time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.of = function of() {\n    if (arguments.length <= 2) {\n      return LocalDateTime.ofDateAndTime.apply(this, arguments);\n    } else {\n      return LocalDateTime.ofNumbers.apply(this, arguments);\n    }\n  };\n\n  LocalDateTime.ofNumbers = function ofNumbers(year, month, dayOfMonth, hour, minute, second, nanoOfSecond) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    var date = LocalDate.of(year, month, dayOfMonth);\n    var time = LocalTime.of(hour, minute, second, nanoOfSecond);\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.ofDateAndTime = function ofDateAndTime(date, time) {\n    requireNonNull(date, 'date');\n    requireNonNull(time, 'time');\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.ofInstant = function ofInstant(instant, zone) {\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    requireNonNull(instant, 'instant');\n    requireInstance(instant, Instant, 'instant');\n    requireNonNull(zone, 'zone');\n    var offset = zone.rules().offset(instant);\n    return LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n  };\n\n  LocalDateTime.ofEpochSecond = function ofEpochSecond(epochSecond, nanoOfSecond, offset) {\n    if (epochSecond === void 0) {\n      epochSecond = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    if (arguments.length === 2 && nanoOfSecond instanceof ZoneOffset) {\n      offset = nanoOfSecond;\n      nanoOfSecond = 0;\n    }\n\n    requireNonNull(offset, 'offset');\n    var localSecond = epochSecond + offset.totalSeconds();\n    var localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n    var secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n    var date = LocalDate.ofEpochDay(localEpochDay);\n    var time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof LocalDateTime) {\n      return temporal;\n    } else if (temporal instanceof ZonedDateTime) {\n      return temporal.toLocalDateTime();\n    }\n\n    try {\n      var date = LocalDate.from(temporal);\n      var time = LocalTime.from(temporal);\n      return new LocalDateTime(date, time);\n    } catch (ex) {\n      throw new DateTimeException(\"Unable to obtain LocalDateTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  LocalDateTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, LocalDateTime.FROM);\n  };\n\n  function LocalDateTime(date, time) {\n    var _this;\n\n    _this = _ChronoLocalDateTime.call(this) || this;\n    requireInstance(date, LocalDate, 'date');\n    requireInstance(time, LocalTime, 'time');\n    _this._date = date;\n    _this._time = time;\n    return _this;\n  }\n\n  var _proto = LocalDateTime.prototype;\n\n  _proto._withDateTime = function _withDateTime(newDate, newTime) {\n    if (this._date.equals(newDate) && this._time.equals(newTime)) {\n      return this;\n    }\n\n    return new LocalDateTime(newDate, newTime);\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      return field.isTimeBased() ? this._time.range(field) : this._date.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    if (field instanceof ChronoField) {\n      return field.isTimeBased() ? this._time.get(field) : this._date.get(field);\n    }\n\n    return _ChronoLocalDateTime.prototype.get.call(this, field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      return field.isTimeBased() ? this._time.getLong(field) : this._date.getLong(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.year = function year() {\n    return this._date.year();\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._date.monthValue();\n  };\n\n  _proto.month = function month() {\n    return this._date.month();\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._date.dayOfMonth();\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this._date.dayOfYear();\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    return this._date.dayOfWeek();\n  };\n\n  _proto.hour = function hour() {\n    return this._time.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._time.minute();\n  };\n\n  _proto.second = function second() {\n    return this._time.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._time.nano();\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalDate) {\n      return this._withDateTime(adjuster, this._time);\n    } else if (adjuster instanceof LocalTime) {\n      return this._withDateTime(this._date, adjuster);\n    } else if (adjuster instanceof LocalDateTime) {\n      return adjuster;\n    }\n\n    assert(typeof adjuster.adjustInto === 'function', 'adjuster', IllegalArgumentException);\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      if (field.isTimeBased()) {\n        return this._withDateTime(this._date, this._time.with(field, newValue));\n      } else {\n        return this._withDateTime(this._date.with(field, newValue), this._time);\n      }\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    return this._withDateTime(this._date.withYear(year), this._time);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this._withDateTime(this._date.withMonth(month), this._time);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    return this._withDateTime(this._date.withDayOfMonth(dayOfMonth), this._time);\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    return this._withDateTime(this._date.withDayOfYear(dayOfYear), this._time);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    var newTime = this._time.withHour(hour);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    var newTime = this._time.withMinute(minute);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    var newTime = this._time.withSecond(second);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    var newTime = this._time.withNano(nanoOfSecond);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._withDateTime(this._date, this._time.truncatedTo(unit));\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MICROS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MILLIS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n\n        case ChronoUnit.MINUTES:\n          return this.plusMinutes(amountToAdd);\n\n        case ChronoUnit.HOURS:\n          return this.plusHours(amountToAdd);\n\n        case ChronoUnit.HALF_DAYS:\n          return this.plusDays(MathUtil.intDiv(amountToAdd, 256)).plusHours(MathUtil.intMod(amountToAdd, 256) * 12);\n      }\n\n      return this._withDateTime(this._date.plus(amountToAdd, unit), this._time);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(years) {\n    var newDate = this._date.plusYears(years);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusMonths = function plusMonths(months) {\n    var newDate = this._date.plusMonths(months);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeks) {\n    var newDate = this._date.plusWeeks(weeks);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusDays = function plusDays(days) {\n    var newDate = this._date.plusDays(days);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._plusWithOverflow(this._date, hours, 0, 0, 0, 1);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._plusWithOverflow(this._date, 0, minutes, 0, 0, 1);\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._plusWithOverflow(this._date, 0, 0, seconds, 0, 1);\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._plusWithOverflow(this._date, 0, 0, 0, nanos, 1);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(unit, 'unit');\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(years) {\n    return this.plusYears(-1 * years);\n  };\n\n  _proto.minusMonths = function minusMonths(months) {\n    return this.plusMonths(-1 * months);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeks) {\n    return this.plusWeeks(-1 * weeks);\n  };\n\n  _proto.minusDays = function minusDays(days) {\n    return this.plusDays(-1 * days);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this._plusWithOverflow(this._date, hours, 0, 0, 0, -1);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this._plusWithOverflow(this._date, 0, minutes, 0, 0, -1);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this._plusWithOverflow(this._date, 0, 0, seconds, 0, -1);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this._plusWithOverflow(this._date, 0, 0, 0, nanos, -1);\n  };\n\n  _proto._plusWithOverflow = function _plusWithOverflow(newDate, hours, minutes, seconds, nanos, sign) {\n    if (hours === 0 && minutes === 0 && seconds === 0 && nanos === 0) {\n      return this._withDateTime(newDate, this._time);\n    }\n\n    var totDays = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_DAY) + MathUtil.intDiv(seconds, LocalTime.SECONDS_PER_DAY) + MathUtil.intDiv(minutes, LocalTime.MINUTES_PER_DAY) + MathUtil.intDiv(hours, LocalTime.HOURS_PER_DAY);\n    totDays *= sign;\n    var totNanos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_DAY) + MathUtil.intMod(seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + MathUtil.intMod(minutes, LocalTime.MINUTES_PER_DAY) * LocalTime.NANOS_PER_MINUTE + MathUtil.intMod(hours, LocalTime.HOURS_PER_DAY) * LocalTime.NANOS_PER_HOUR;\n\n    var curNoD = this._time.toNanoOfDay();\n\n    totNanos = totNanos * sign + curNoD;\n    totDays += MathUtil.floorDiv(totNanos, LocalTime.NANOS_PER_DAY);\n    var newNoD = MathUtil.floorMod(totNanos, LocalTime.NANOS_PER_DAY);\n    var newTime = newNoD === curNoD ? this._time : LocalTime.ofNanoOfDay(newNoD);\n    return this._withDateTime(newDate.plusDays(totDays), newTime);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.localDate()) {\n      return this.toLocalDate();\n    }\n\n    return _ChronoLocalDateTime.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return _ChronoLocalDateTime.prototype.adjustInto.call(this, temporal);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = LocalDateTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      if (unit.isTimeBased()) {\n        var daysUntil = this._date.daysUntil(end._date);\n\n        var timeUntil = end._time.toNanoOfDay() - this._time.toNanoOfDay();\n\n        if (daysUntil > 0 && timeUntil < 0) {\n          daysUntil--;\n          timeUntil += LocalTime.NANOS_PER_DAY;\n        } else if (daysUntil < 0 && timeUntil > 0) {\n          daysUntil++;\n          timeUntil -= LocalTime.NANOS_PER_DAY;\n        }\n\n        var amount = daysUntil;\n\n        switch (unit) {\n          case ChronoUnit.NANOS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.NANOS_PER_DAY);\n            return MathUtil.safeAdd(amount, timeUntil);\n\n          case ChronoUnit.MICROS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.MICROS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000));\n\n          case ChronoUnit.MILLIS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.MILLIS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000000));\n\n          case ChronoUnit.SECONDS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.SECONDS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_SECOND));\n\n          case ChronoUnit.MINUTES:\n            amount = MathUtil.safeMultiply(amount, LocalTime.MINUTES_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_MINUTE));\n\n          case ChronoUnit.HOURS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.HOURS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR));\n\n          case ChronoUnit.HALF_DAYS:\n            amount = MathUtil.safeMultiply(amount, 2);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR * 12));\n        }\n\n        throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n      }\n\n      var endDate = end._date;\n      var endTime = end._time;\n\n      if (endDate.isAfter(this._date) && endTime.isBefore(this._time)) {\n        endDate = endDate.minusDays(1);\n      } else if (endDate.isBefore(this._date) && endTime.isAfter(this._time)) {\n        endDate = endDate.plusDays(1);\n      }\n\n      return this._date.until(endDate, unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atOffset = function atOffset(offset) {\n    return OffsetDateTime.of(this, offset);\n  };\n\n  _proto.atZone = function atZone(zone) {\n    return ZonedDateTime.of(this, zone);\n  };\n\n  _proto.toLocalDate = function toLocalDate() {\n    return this._date;\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._time;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, LocalDateTime, 'other');\n    return this._compareTo0(other);\n  };\n\n  _proto._compareTo0 = function _compareTo0(other) {\n    var cmp = this._date.compareTo(other.toLocalDate());\n\n    if (cmp === 0) {\n      cmp = this._time.compareTo(other.toLocalTime());\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    return this.compareTo(other) === 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof LocalDateTime) {\n      return this._date.equals(other._date) && this._time.equals(other._time);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._date.hashCode() ^ this._time.hashCode();\n  };\n\n  _proto.toString = function toString() {\n    return this._date.toString() + 'T' + this._time.toString();\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return LocalDateTime;\n}(ChronoLocalDateTime);\nfunction _init$j() {\n  LocalDateTime.MIN = LocalDateTime.of(LocalDate.MIN, LocalTime.MIN);\n  LocalDateTime.MAX = LocalDateTime.of(LocalDate.MAX, LocalTime.MAX);\n  LocalDateTime.FROM = createTemporalQuery('LocalDateTime.FROM', function (temporal) {\n    return LocalDateTime.from(temporal);\n  });\n}\n\nvar LocalTime = function (_Temporal) {\n  _inheritsLoose(LocalTime, _Temporal);\n\n  LocalTime.now = function now(clockOrZone) {\n    if (clockOrZone == null) {\n      return LocalTime._now(Clock.systemDefaultZone());\n    } else if (clockOrZone instanceof Clock) {\n      return LocalTime._now(clockOrZone);\n    } else {\n      return LocalTime._now(Clock.system(clockOrZone));\n    }\n  };\n\n  LocalTime._now = function _now(clock) {\n    if (clock === void 0) {\n      clock = Clock.systemDefaultZone();\n    }\n\n    requireNonNull(clock, 'clock');\n    return LocalTime.ofInstant(clock.instant(), clock.zone());\n  };\n\n  LocalTime.ofInstant = function ofInstant(instant, zone) {\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    var offset = zone.rules().offset(instant);\n    var secsOfDay = MathUtil.intMod(instant.epochSecond(), LocalTime.SECONDS_PER_DAY);\n    secsOfDay = MathUtil.intMod(secsOfDay + offset.totalSeconds(), LocalTime.SECONDS_PER_DAY);\n\n    if (secsOfDay < 0) {\n      secsOfDay += LocalTime.SECONDS_PER_DAY;\n    }\n\n    return LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n  };\n\n  LocalTime.of = function of(hour, minute, second, nanoOfSecond) {\n    return new LocalTime(hour, minute, second, nanoOfSecond);\n  };\n\n  LocalTime.ofSecondOfDay = function ofSecondOfDay(secondOfDay, nanoOfSecond) {\n    if (secondOfDay === void 0) {\n      secondOfDay = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    ChronoField.SECOND_OF_DAY.checkValidValue(secondOfDay);\n    ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n    var hours = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_HOUR);\n    secondOfDay -= hours * LocalTime.SECONDS_PER_HOUR;\n    var minutes = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_MINUTE);\n    secondOfDay -= minutes * LocalTime.SECONDS_PER_MINUTE;\n    return new LocalTime(hours, minutes, secondOfDay, nanoOfSecond);\n  };\n\n  LocalTime.ofNanoOfDay = function ofNanoOfDay(nanoOfDay) {\n    if (nanoOfDay === void 0) {\n      nanoOfDay = 0;\n    }\n\n    ChronoField.NANO_OF_DAY.checkValidValue(nanoOfDay);\n    var hours = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_HOUR);\n    nanoOfDay -= hours * LocalTime.NANOS_PER_HOUR;\n    var minutes = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_MINUTE);\n    nanoOfDay -= minutes * LocalTime.NANOS_PER_MINUTE;\n    var seconds = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_SECOND);\n    nanoOfDay -= seconds * LocalTime.NANOS_PER_SECOND;\n    return new LocalTime(hours, minutes, seconds, nanoOfDay);\n  };\n\n  LocalTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    var time = temporal.query(TemporalQueries.localTime());\n\n    if (time == null) {\n      throw new DateTimeException(\"Unable to obtain LocalTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n\n    return time;\n  };\n\n  LocalTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_LOCAL_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, LocalTime.FROM);\n  };\n\n  function LocalTime(hour, minute, second, nanoOfSecond) {\n    var _this;\n\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    _this = _Temporal.call(this) || this;\n\n    var _hour = MathUtil.safeToInt(hour);\n\n    var _minute = MathUtil.safeToInt(minute);\n\n    var _second = MathUtil.safeToInt(second);\n\n    var _nanoOfSecond = MathUtil.safeToInt(nanoOfSecond);\n\n    LocalTime._validate(_hour, _minute, _second, _nanoOfSecond);\n\n    if (_minute === 0 && _second === 0 && _nanoOfSecond === 0) {\n      if (!LocalTime.HOURS[_hour]) {\n        _this._hour = _hour;\n        _this._minute = _minute;\n        _this._second = _second;\n        _this._nano = _nanoOfSecond;\n        LocalTime.HOURS[_hour] = _assertThisInitialized(_this);\n      }\n\n      return LocalTime.HOURS[_hour] || _assertThisInitialized(_this);\n    }\n\n    _this._hour = _hour;\n    _this._minute = _minute;\n    _this._second = _second;\n    _this._nano = _nanoOfSecond;\n    return _this;\n  }\n\n  LocalTime._validate = function _validate(hour, minute, second, nanoOfSecond) {\n    ChronoField.HOUR_OF_DAY.checkValidValue(hour);\n    ChronoField.MINUTE_OF_HOUR.checkValidValue(minute);\n    ChronoField.SECOND_OF_MINUTE.checkValidValue(second);\n    ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n  };\n\n  var _proto = LocalTime.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isTimeBased();\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    requireNonNull(field);\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      return this._get0(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto._get0 = function _get0(field) {\n    switch (field) {\n      case ChronoField.NANO_OF_SECOND:\n        return this._nano;\n\n      case ChronoField.NANO_OF_DAY:\n        return this.toNanoOfDay();\n\n      case ChronoField.MICRO_OF_SECOND:\n        return MathUtil.intDiv(this._nano, 1000);\n\n      case ChronoField.MICRO_OF_DAY:\n        return MathUtil.intDiv(this.toNanoOfDay(), 1000);\n\n      case ChronoField.MILLI_OF_SECOND:\n        return MathUtil.intDiv(this._nano, 1000000);\n\n      case ChronoField.MILLI_OF_DAY:\n        return MathUtil.intDiv(this.toNanoOfDay(), 1000000);\n\n      case ChronoField.SECOND_OF_MINUTE:\n        return this._second;\n\n      case ChronoField.SECOND_OF_DAY:\n        return this.toSecondOfDay();\n\n      case ChronoField.MINUTE_OF_HOUR:\n        return this._minute;\n\n      case ChronoField.MINUTE_OF_DAY:\n        return this._hour * 60 + this._minute;\n\n      case ChronoField.HOUR_OF_AMPM:\n        return MathUtil.intMod(this._hour, 12);\n\n      case ChronoField.CLOCK_HOUR_OF_AMPM:\n        {\n          var ham = MathUtil.intMod(this._hour, 12);\n          return ham % 12 === 0 ? 12 : ham;\n        }\n\n      case ChronoField.HOUR_OF_DAY:\n        return this._hour;\n\n      case ChronoField.CLOCK_HOUR_OF_DAY:\n        return this._hour === 0 ? 24 : this._hour;\n\n      case ChronoField.AMPM_OF_DAY:\n        return MathUtil.intDiv(this._hour, 12);\n    }\n\n    throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n  };\n\n  _proto.hour = function hour() {\n    return this._hour;\n  };\n\n  _proto.minute = function minute() {\n    return this._minute;\n  };\n\n  _proto.second = function second() {\n    return this._second;\n  };\n\n  _proto.nano = function nano() {\n    return this._nano;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalTime) {\n      return adjuster;\n    }\n\n    assert(typeof adjuster.adjustInto === 'function', 'adjuster', IllegalArgumentException);\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      field.checkValidValue(newValue);\n\n      switch (field) {\n        case ChronoField.NANO_OF_SECOND:\n          return this.withNano(newValue);\n\n        case ChronoField.NANO_OF_DAY:\n          return LocalTime.ofNanoOfDay(newValue);\n\n        case ChronoField.MICRO_OF_SECOND:\n          return this.withNano(newValue * 1000);\n\n        case ChronoField.MICRO_OF_DAY:\n          return LocalTime.ofNanoOfDay(newValue * 1000);\n\n        case ChronoField.MILLI_OF_SECOND:\n          return this.withNano(newValue * 1000000);\n\n        case ChronoField.MILLI_OF_DAY:\n          return LocalTime.ofNanoOfDay(newValue * 1000000);\n\n        case ChronoField.SECOND_OF_MINUTE:\n          return this.withSecond(newValue);\n\n        case ChronoField.SECOND_OF_DAY:\n          return this.plusSeconds(newValue - this.toSecondOfDay());\n\n        case ChronoField.MINUTE_OF_HOUR:\n          return this.withMinute(newValue);\n\n        case ChronoField.MINUTE_OF_DAY:\n          return this.plusMinutes(newValue - (this._hour * 60 + this._minute));\n\n        case ChronoField.HOUR_OF_AMPM:\n          return this.plusHours(newValue - MathUtil.intMod(this._hour, 12));\n\n        case ChronoField.CLOCK_HOUR_OF_AMPM:\n          return this.plusHours((newValue === 12 ? 0 : newValue) - MathUtil.intMod(this._hour, 12));\n\n        case ChronoField.HOUR_OF_DAY:\n          return this.withHour(newValue);\n\n        case ChronoField.CLOCK_HOUR_OF_DAY:\n          return this.withHour(newValue === 24 ? 0 : newValue);\n\n        case ChronoField.AMPM_OF_DAY:\n          return this.plusHours((newValue - MathUtil.intDiv(this._hour, 12)) * 12);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (this._hour === hour) {\n      return this;\n    }\n\n    return new LocalTime(hour, this._minute, this._second, this._nano);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (this._minute === minute) {\n      return this;\n    }\n\n    return new LocalTime(this._hour, minute, this._second, this._nano);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (this._second === second) {\n      return this;\n    }\n\n    return new LocalTime(this._hour, this._minute, second, this._nano);\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    if (this._nano === nanoOfSecond) {\n      return this;\n    }\n\n    return new LocalTime(this._hour, this._minute, this._second, nanoOfSecond);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit === ChronoUnit.NANOS) {\n      return this;\n    }\n\n    var unitDur = unit.duration();\n\n    if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n      throw new DateTimeException('Unit is too large to be used for truncation');\n    }\n\n    var dur = unitDur.toNanos();\n\n    if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n      throw new DateTimeException('Unit must divide into a standard day without remainder');\n    }\n\n    var nod = this.toNanoOfDay();\n    return LocalTime.ofNanoOfDay(MathUtil.intDiv(nod, dur) * dur);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n\n        case ChronoUnit.MINUTES:\n          return this.plusMinutes(amountToAdd);\n\n        case ChronoUnit.HOURS:\n          return this.plusHours(amountToAdd);\n\n        case ChronoUnit.HALF_DAYS:\n          return this.plusHours(MathUtil.intMod(amountToAdd, 2) * 12);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusHours = function plusHours(hoursToAdd) {\n    if (hoursToAdd === 0) {\n      return this;\n    }\n\n    var newHour = MathUtil.intMod(MathUtil.intMod(hoursToAdd, LocalTime.HOURS_PER_DAY) + this._hour + LocalTime.HOURS_PER_DAY, LocalTime.HOURS_PER_DAY);\n    return new LocalTime(newHour, this._minute, this._second, this._nano);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutesToAdd) {\n    if (minutesToAdd === 0) {\n      return this;\n    }\n\n    var mofd = this._hour * LocalTime.MINUTES_PER_HOUR + this._minute;\n    var newMofd = MathUtil.intMod(MathUtil.intMod(minutesToAdd, LocalTime.MINUTES_PER_DAY) + mofd + LocalTime.MINUTES_PER_DAY, LocalTime.MINUTES_PER_DAY);\n\n    if (mofd === newMofd) {\n      return this;\n    }\n\n    var newHour = MathUtil.intDiv(newMofd, LocalTime.MINUTES_PER_HOUR);\n    var newMinute = MathUtil.intMod(newMofd, LocalTime.MINUTES_PER_HOUR);\n    return new LocalTime(newHour, newMinute, this._second, this._nano);\n  };\n\n  _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n    if (secondsToAdd === 0) {\n      return this;\n    }\n\n    var sofd = this._hour * LocalTime.SECONDS_PER_HOUR + this._minute * LocalTime.SECONDS_PER_MINUTE + this._second;\n    var newSofd = MathUtil.intMod(MathUtil.intMod(secondsToAdd, LocalTime.SECONDS_PER_DAY) + sofd + LocalTime.SECONDS_PER_DAY, LocalTime.SECONDS_PER_DAY);\n\n    if (sofd === newSofd) {\n      return this;\n    }\n\n    var newHour = MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_HOUR);\n    var newMinute = MathUtil.intMod(MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n    var newSecond = MathUtil.intMod(newSofd, LocalTime.SECONDS_PER_MINUTE);\n    return new LocalTime(newHour, newMinute, newSecond, this._nano);\n  };\n\n  _proto.plusNanos = function plusNanos(nanosToAdd) {\n    if (nanosToAdd === 0) {\n      return this;\n    }\n\n    var nofd = this.toNanoOfDay();\n    var newNofd = MathUtil.intMod(MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_DAY) + nofd + LocalTime.NANOS_PER_DAY, LocalTime.NANOS_PER_DAY);\n\n    if (nofd === newNofd) {\n      return this;\n    }\n\n    var newHour = MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_HOUR);\n    var newMinute = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n    var newSecond = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_SECOND), LocalTime.SECONDS_PER_MINUTE);\n    var newNano = MathUtil.intMod(newNofd, LocalTime.NANOS_PER_SECOND);\n    return new LocalTime(newHour, newMinute, newSecond, newNano);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(unit, 'unit');\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusHours = function minusHours(hoursToSubtract) {\n    return this.plusHours(-1 * MathUtil.intMod(hoursToSubtract, LocalTime.HOURS_PER_DAY));\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutesToSubtract) {\n    return this.plusMinutes(-1 * MathUtil.intMod(minutesToSubtract, LocalTime.MINUTES_PER_DAY));\n  };\n\n  _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n    return this.plusSeconds(-1 * MathUtil.intMod(secondsToSubtract, LocalTime.SECONDS_PER_DAY));\n  };\n\n  _proto.minusNanos = function minusNanos(nanosToSubtract) {\n    return this.plusNanos(-1 * MathUtil.intMod(nanosToSubtract, LocalTime.NANOS_PER_DAY));\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.localTime()) {\n      return this;\n    }\n\n    if (_query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.zone() || _query === TemporalQueries.offset() || _query === TemporalQueries.localDate()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(LocalTime.NANO_OF_DAY, this.toNanoOfDay());\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = LocalTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var nanosUntil = end.toNanoOfDay() - this.toNanoOfDay();\n\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return nanosUntil;\n\n        case ChronoUnit.MICROS:\n          return MathUtil.intDiv(nanosUntil, 1000);\n\n        case ChronoUnit.MILLIS:\n          return MathUtil.intDiv(nanosUntil, 1000000);\n\n        case ChronoUnit.SECONDS:\n          return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_SECOND);\n\n        case ChronoUnit.MINUTES:\n          return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_MINUTE);\n\n        case ChronoUnit.HOURS:\n          return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_HOUR);\n\n        case ChronoUnit.HALF_DAYS:\n          return MathUtil.intDiv(nanosUntil, 12 * LocalTime.NANOS_PER_HOUR);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atDate = function atDate(date) {\n    return LocalDateTime.of(date, this);\n  };\n\n  _proto.toSecondOfDay = function toSecondOfDay() {\n    var total = this._hour * LocalTime.SECONDS_PER_HOUR;\n    total += this._minute * LocalTime.SECONDS_PER_MINUTE;\n    total += this._second;\n    return total;\n  };\n\n  _proto.toNanoOfDay = function toNanoOfDay() {\n    var total = this._hour * LocalTime.NANOS_PER_HOUR;\n    total += this._minute * LocalTime.NANOS_PER_MINUTE;\n    total += this._second * LocalTime.NANOS_PER_SECOND;\n    total += this._nano;\n    return total;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, LocalTime, 'other');\n    var cmp = MathUtil.compareNumbers(this._hour, other._hour);\n\n    if (cmp === 0) {\n      cmp = MathUtil.compareNumbers(this._minute, other._minute);\n\n      if (cmp === 0) {\n        cmp = MathUtil.compareNumbers(this._second, other._second);\n\n        if (cmp === 0) {\n          cmp = MathUtil.compareNumbers(this._nano, other._nano);\n        }\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof LocalTime) {\n      return this._hour === other._hour && this._minute === other._minute && this._second === other._second && this._nano === other._nano;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    var nod = this.toNanoOfDay();\n    return MathUtil.hash(nod);\n  };\n\n  _proto.toString = function toString() {\n    var buf = '';\n    var hourValue = this._hour;\n    var minuteValue = this._minute;\n    var secondValue = this._second;\n    var nanoValue = this._nano;\n    buf += hourValue < 10 ? '0' : '';\n    buf += hourValue;\n    buf += minuteValue < 10 ? ':0' : ':';\n    buf += minuteValue;\n\n    if (secondValue > 0 || nanoValue > 0) {\n      buf += secondValue < 10 ? ':0' : ':';\n      buf += secondValue;\n\n      if (nanoValue > 0) {\n        buf += '.';\n\n        if (MathUtil.intMod(nanoValue, 1000000) === 0) {\n          buf += ('' + (MathUtil.intDiv(nanoValue, 1000000) + 1000)).substring(1);\n        } else if (MathUtil.intMod(nanoValue, 1000) === 0) {\n          buf += ('' + (MathUtil.intDiv(nanoValue, 1000) + 1000000)).substring(1);\n        } else {\n          buf += ('' + (nanoValue + 1000000000)).substring(1);\n        }\n      }\n    }\n\n    return buf;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return LocalTime;\n}(Temporal);\nfunction _init$k() {\n  LocalTime.HOURS = [];\n\n  for (var hour = 0; hour < 24; hour++) {\n    LocalTime.of(hour, 0, 0, 0);\n  }\n\n  LocalTime.MIN = LocalTime.HOURS[0];\n  LocalTime.MAX = new LocalTime(23, 59, 59, 999999999);\n  LocalTime.MIDNIGHT = LocalTime.HOURS[0];\n  LocalTime.NOON = LocalTime.HOURS[12];\n  LocalTime.FROM = createTemporalQuery('LocalTime.FROM', function (temporal) {\n    return LocalTime.from(temporal);\n  });\n}\nLocalTime.HOURS_PER_DAY = 24;\nLocalTime.MINUTES_PER_HOUR = 60;\nLocalTime.MINUTES_PER_DAY = LocalTime.MINUTES_PER_HOUR * LocalTime.HOURS_PER_DAY;\nLocalTime.SECONDS_PER_MINUTE = 60;\nLocalTime.SECONDS_PER_HOUR = LocalTime.SECONDS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.SECONDS_PER_DAY = LocalTime.SECONDS_PER_HOUR * LocalTime.HOURS_PER_DAY;\nLocalTime.MILLIS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000;\nLocalTime.MICROS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000000;\nLocalTime.NANOS_PER_SECOND = 1000000000;\nLocalTime.NANOS_PER_MINUTE = LocalTime.NANOS_PER_SECOND * LocalTime.SECONDS_PER_MINUTE;\nLocalTime.NANOS_PER_HOUR = LocalTime.NANOS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.NANOS_PER_DAY = LocalTime.NANOS_PER_HOUR * LocalTime.HOURS_PER_DAY;\n\nvar NANOS_PER_MILLI = 1000000;\nvar Instant = function (_Temporal) {\n  _inheritsLoose(Instant, _Temporal);\n\n  Instant.now = function now(clock) {\n    if (clock === void 0) {\n      clock = Clock.systemUTC();\n    }\n\n    return clock.instant();\n  };\n\n  Instant.ofEpochSecond = function ofEpochSecond(epochSecond, nanoAdjustment) {\n    if (nanoAdjustment === void 0) {\n      nanoAdjustment = 0;\n    }\n\n    var secs = epochSecond + MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n    var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n    return Instant._create(secs, nos);\n  };\n\n  Instant.ofEpochMilli = function ofEpochMilli(epochMilli) {\n    var secs = MathUtil.floorDiv(epochMilli, 1000);\n    var mos = MathUtil.floorMod(epochMilli, 1000);\n    return Instant._create(secs, mos * 1000000);\n  };\n\n  Instant.from = function from(temporal) {\n    try {\n      var instantSecs = temporal.getLong(ChronoField.INSTANT_SECONDS);\n      var nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n      return Instant.ofEpochSecond(instantSecs, nanoOfSecond);\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain Instant from TemporalAccessor: ' + temporal + ', type ' + typeof temporal, ex);\n    }\n  };\n\n  Instant.parse = function parse(text) {\n    return DateTimeFormatter.ISO_INSTANT.parse(text, Instant.FROM);\n  };\n\n  Instant._create = function _create(seconds, nanoOfSecond) {\n    if (seconds === 0 && nanoOfSecond === 0) {\n      return Instant.EPOCH;\n    }\n\n    return new Instant(seconds, nanoOfSecond);\n  };\n\n  Instant._validate = function _validate(seconds, nanoOfSecond) {\n    if (seconds < Instant.MIN_SECONDS || seconds > Instant.MAX_SECONDS) {\n      throw new DateTimeException('Instant exceeds minimum or maximum instant');\n    }\n\n    if (nanoOfSecond < 0 || nanoOfSecond > LocalTime.NANOS_PER_SECOND) {\n      throw new DateTimeException('Instant exceeds minimum or maximum instant');\n    }\n  };\n\n  function Instant(seconds, nanoOfSecond) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n\n    Instant._validate(seconds, nanoOfSecond);\n\n    _this._seconds = MathUtil.safeToInt(seconds);\n    _this._nanos = MathUtil.safeToInt(nanoOfSecond);\n    return _this;\n  }\n\n  var _proto = Instant.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit === ChronoField.INSTANT_SECONDS || fieldOrUnit === ChronoField.NANO_OF_SECOND || fieldOrUnit === ChronoField.MICRO_OF_SECOND || fieldOrUnit === ChronoField.MILLI_OF_SECOND;\n    }\n\n    if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoUnit.DAYS;\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.NANO_OF_SECOND:\n          return this._nanos;\n\n        case ChronoField.MICRO_OF_SECOND:\n          return MathUtil.intDiv(this._nanos, 1000);\n\n        case ChronoField.MILLI_OF_SECOND:\n          return MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n\n        case ChronoField.INSTANT_SECONDS:\n          return this._seconds;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.epochSecond = function epochSecond() {\n    return this._seconds;\n  };\n\n  _proto.nano = function nano() {\n    return this._nanos;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      field.checkValidValue(newValue);\n\n      switch (field) {\n        case ChronoField.MILLI_OF_SECOND:\n          {\n            var nval = newValue * NANOS_PER_MILLI;\n            return nval !== this._nanos ? Instant._create(this._seconds, nval) : this;\n          }\n\n        case ChronoField.MICRO_OF_SECOND:\n          {\n            var _nval = newValue * 1000;\n\n            return _nval !== this._nanos ? Instant._create(this._seconds, _nval) : this;\n          }\n\n        case ChronoField.NANO_OF_SECOND:\n          return newValue !== this._nanos ? Instant._create(this._seconds, newValue) : this;\n\n        case ChronoField.INSTANT_SECONDS:\n          return newValue !== this._seconds ? Instant._create(newValue, this._nanos) : this;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit === ChronoUnit.NANOS) {\n      return this;\n    }\n\n    var unitDur = unit.duration();\n\n    if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n      throw new DateTimeException('Unit is too large to be used for truncation');\n    }\n\n    var dur = unitDur.toNanos();\n\n    if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n      throw new DateTimeException('Unit must divide into a standard day without remainder');\n    }\n\n    var nod = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + this._nanos;\n\n    var result = MathUtil.intDiv(nod, dur) * dur;\n    return this.plusNanos(result - nod);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit);\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this._plus(MathUtil.intDiv(amountToAdd, 1000000), MathUtil.intMod(amountToAdd, 1000000) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusMillis(amountToAdd);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n\n        case ChronoUnit.MINUTES:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_MINUTE));\n\n        case ChronoUnit.HOURS:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_HOUR));\n\n        case ChronoUnit.HALF_DAYS:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY / 2));\n\n        case ChronoUnit.DAYS:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n    return this._plus(secondsToAdd, 0);\n  };\n\n  _proto.plusMillis = function plusMillis(millisToAdd) {\n    return this._plus(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * NANOS_PER_MILLI);\n  };\n\n  _proto.plusNanos = function plusNanos(nanosToAdd) {\n    return this._plus(0, nanosToAdd);\n  };\n\n  _proto._plus = function _plus(secondsToAdd, nanosToAdd) {\n    if (secondsToAdd === 0 && nanosToAdd === 0) {\n      return this;\n    }\n\n    var epochSec = this._seconds + secondsToAdd;\n    epochSec = epochSec + MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n    var nanoAdjustment = this._nanos + nanosToAdd % LocalTime.NANOS_PER_SECOND;\n    return Instant.ofEpochSecond(epochSec, nanoAdjustment);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n    return this.plusSeconds(secondsToSubtract * -1);\n  };\n\n  _proto.minusMillis = function minusMillis(millisToSubtract) {\n    return this.plusMillis(-1 * millisToSubtract);\n  };\n\n  _proto.minusNanos = function minusNanos(nanosToSubtract) {\n    return this.plusNanos(-1 * nanosToSubtract);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    }\n\n    if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.zone() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    return temporal.with(ChronoField.INSTANT_SECONDS, this._seconds).with(ChronoField.NANO_OF_SECOND, this._nanos);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = Instant.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this._nanosUntil(end);\n\n        case ChronoUnit.MICROS:\n          return MathUtil.intDiv(this._nanosUntil(end), 1000);\n\n        case ChronoUnit.MILLIS:\n          return MathUtil.safeSubtract(end.toEpochMilli(), this.toEpochMilli());\n\n        case ChronoUnit.SECONDS:\n          return this._secondsUntil(end);\n\n        case ChronoUnit.MINUTES:\n          return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_MINUTE);\n\n        case ChronoUnit.HOURS:\n          return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_HOUR);\n\n        case ChronoUnit.HALF_DAYS:\n          return MathUtil.intDiv(this._secondsUntil(end), 12 * LocalTime.SECONDS_PER_HOUR);\n\n        case ChronoUnit.DAYS:\n          return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_DAY);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto._nanosUntil = function _nanosUntil(end) {\n    var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n    var totalNanos = MathUtil.safeMultiply(secsDiff, LocalTime.NANOS_PER_SECOND);\n    return MathUtil.safeAdd(totalNanos, end.nano() - this.nano());\n  };\n\n  _proto._secondsUntil = function _secondsUntil(end) {\n    var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n    var nanosDiff = end.nano() - this.nano();\n\n    if (secsDiff > 0 && nanosDiff < 0) {\n      secsDiff--;\n    } else if (secsDiff < 0 && nanosDiff > 0) {\n      secsDiff++;\n    }\n\n    return secsDiff;\n  };\n\n  _proto.atOffset = function atOffset(offset) {\n    return OffsetDateTime.ofInstant(this, offset);\n  };\n\n  _proto.atZone = function atZone(zone) {\n    return ZonedDateTime.ofInstant(this, zone);\n  };\n\n  _proto.toEpochMilli = function toEpochMilli() {\n    var millis = MathUtil.safeMultiply(this._seconds, 1000);\n    return millis + MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n  };\n\n  _proto.compareTo = function compareTo(otherInstant) {\n    requireNonNull(otherInstant, 'otherInstant');\n    requireInstance(otherInstant, Instant, 'otherInstant');\n    var cmp = MathUtil.compareNumbers(this._seconds, otherInstant._seconds);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return this._nanos - otherInstant._nanos;\n  };\n\n  _proto.isAfter = function isAfter(otherInstant) {\n    return this.compareTo(otherInstant) > 0;\n  };\n\n  _proto.isBefore = function isBefore(otherInstant) {\n    return this.compareTo(otherInstant) < 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof Instant) {\n      return this.epochSecond() === other.epochSecond() && this.nano() === other.nano();\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._seconds, this._nanos);\n  };\n\n  _proto.toString = function toString() {\n    return DateTimeFormatter.ISO_INSTANT.format(this);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Instant;\n}(Temporal);\nfunction _init$l() {\n  Instant.MIN_SECONDS = -31619119219200;\n  Instant.MAX_SECONDS = 31494816403199;\n  Instant.EPOCH = new Instant(0, 0);\n  Instant.MIN = Instant.ofEpochSecond(Instant.MIN_SECONDS, 0);\n  Instant.MAX = Instant.ofEpochSecond(Instant.MAX_SECONDS, 999999999);\n  Instant.FROM = createTemporalQuery('Instant.FROM', function (temporal) {\n    return Instant.from(temporal);\n  });\n}\n\nvar Clock = function () {\n  function Clock() {}\n\n  Clock.systemUTC = function systemUTC() {\n    return new SystemClock(ZoneOffset.UTC);\n  };\n\n  Clock.systemDefaultZone = function systemDefaultZone() {\n    return new SystemClock(ZoneId.systemDefault());\n  };\n\n  Clock.system = function system(zone) {\n    return new SystemClock(zone);\n  };\n\n  Clock.fixed = function fixed(fixedInstant, zoneId) {\n    return new FixedClock(fixedInstant, zoneId);\n  };\n\n  Clock.offset = function offset(baseClock, duration) {\n    return new OffsetClock(baseClock, duration);\n  };\n\n  var _proto = Clock.prototype;\n\n  _proto.millis = function millis() {\n    abstractMethodFail('Clock.millis');\n  };\n\n  _proto.instant = function instant() {\n    abstractMethodFail('Clock.instant');\n  };\n\n  _proto.zone = function zone() {\n    abstractMethodFail('Clock.zone');\n  };\n\n  _proto.withZone = function withZone() {\n    abstractMethodFail('Clock.withZone');\n  };\n\n  return Clock;\n}();\n\nvar SystemClock = function (_Clock) {\n  _inheritsLoose(SystemClock, _Clock);\n\n  function SystemClock(zone) {\n    var _this;\n\n    requireNonNull(zone, 'zone');\n    _this = _Clock.call(this) || this;\n    _this._zone = zone;\n    return _this;\n  }\n\n  var _proto2 = SystemClock.prototype;\n\n  _proto2.zone = function zone() {\n    return this._zone;\n  };\n\n  _proto2.millis = function millis() {\n    return new Date().getTime();\n  };\n\n  _proto2.instant = function instant() {\n    return Instant.ofEpochMilli(this.millis());\n  };\n\n  _proto2.equals = function equals(obj) {\n    if (obj instanceof SystemClock) {\n      return this._zone.equals(obj._zone);\n    }\n\n    return false;\n  };\n\n  _proto2.withZone = function withZone(zone) {\n    if (zone.equals(this._zone)) {\n      return this;\n    }\n\n    return new SystemClock(zone);\n  };\n\n  _proto2.toString = function toString() {\n    return 'SystemClock[' + this._zone.toString() + ']';\n  };\n\n  return SystemClock;\n}(Clock);\n\nvar FixedClock = function (_Clock2) {\n  _inheritsLoose(FixedClock, _Clock2);\n\n  function FixedClock(fixedInstant, zoneId) {\n    var _this2;\n\n    _this2 = _Clock2.call(this) || this;\n    _this2._instant = fixedInstant;\n    _this2._zoneId = zoneId;\n    return _this2;\n  }\n\n  var _proto3 = FixedClock.prototype;\n\n  _proto3.instant = function instant() {\n    return this._instant;\n  };\n\n  _proto3.millis = function millis() {\n    return this._instant.toEpochMilli();\n  };\n\n  _proto3.zone = function zone() {\n    return this._zoneId;\n  };\n\n  _proto3.toString = function toString() {\n    return 'FixedClock[]';\n  };\n\n  _proto3.equals = function equals(obj) {\n    if (obj instanceof FixedClock) {\n      return this._instant.equals(obj._instant) && this._zoneId.equals(obj._zoneId);\n    }\n\n    return false;\n  };\n\n  _proto3.withZone = function withZone(zone) {\n    if (zone.equals(this._zoneId)) {\n      return this;\n    }\n\n    return new FixedClock(this._instant, zone);\n  };\n\n  return FixedClock;\n}(Clock);\n\nvar OffsetClock = function (_Clock3) {\n  _inheritsLoose(OffsetClock, _Clock3);\n\n  function OffsetClock(baseClock, offset) {\n    var _this3;\n\n    _this3 = _Clock3.call(this) || this;\n    _this3._baseClock = baseClock;\n    _this3._offset = offset;\n    return _this3;\n  }\n\n  var _proto4 = OffsetClock.prototype;\n\n  _proto4.zone = function zone() {\n    return this._baseClock.zone();\n  };\n\n  _proto4.withZone = function withZone(zone) {\n    if (zone.equals(this._baseClock.zone())) {\n      return this;\n    }\n\n    return new OffsetClock(this._baseClock.withZone(zone), this._offset);\n  };\n\n  _proto4.millis = function millis() {\n    return this._baseClock.millis() + this._offset.toMillis();\n  };\n\n  _proto4.instant = function instant() {\n    return this._baseClock.instant().plus(this._offset);\n  };\n\n  _proto4.equals = function equals(obj) {\n    if (obj instanceof OffsetClock) {\n      return this._baseClock.equals(obj._baseClock) && this._offset.equals(obj._offset);\n    }\n\n    return false;\n  };\n\n  _proto4.toString = function toString() {\n    return 'OffsetClock[' + this._baseClock + ',' + this._offset + ']';\n  };\n\n  return OffsetClock;\n}(Clock);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneOffsetTransition = function () {\n  ZoneOffsetTransition.of = function of(transition, offsetBefore, offsetAfter) {\n    return new ZoneOffsetTransition(transition, offsetBefore, offsetAfter);\n  };\n\n  function ZoneOffsetTransition(transition, offsetBefore, offsetAfter) {\n    requireNonNull(transition, 'transition');\n    requireNonNull(offsetBefore, 'offsetBefore');\n    requireNonNull(offsetAfter, 'offsetAfter');\n\n    if (offsetBefore.equals(offsetAfter)) {\n      throw new IllegalArgumentException('Offsets must not be equal');\n    }\n\n    if (transition.nano() !== 0) {\n      throw new IllegalArgumentException('Nano-of-second must be zero');\n    }\n\n    if (transition instanceof LocalDateTime) {\n      this._transition = transition;\n    } else {\n      this._transition = LocalDateTime.ofEpochSecond(transition, 0, offsetBefore);\n    }\n\n    this._offsetBefore = offsetBefore;\n    this._offsetAfter = offsetAfter;\n  }\n\n  var _proto = ZoneOffsetTransition.prototype;\n\n  _proto.instant = function instant() {\n    return this._transition.toInstant(this._offsetBefore);\n  };\n\n  _proto.toEpochSecond = function toEpochSecond() {\n    return this._transition.toEpochSecond(this._offsetBefore);\n  };\n\n  _proto.dateTimeBefore = function dateTimeBefore() {\n    return this._transition;\n  };\n\n  _proto.dateTimeAfter = function dateTimeAfter() {\n    return this._transition.plusSeconds(this.durationSeconds());\n  };\n\n  _proto.offsetBefore = function offsetBefore() {\n    return this._offsetBefore;\n  };\n\n  _proto.offsetAfter = function offsetAfter() {\n    return this._offsetAfter;\n  };\n\n  _proto.duration = function duration() {\n    return Duration.ofSeconds(this.durationSeconds());\n  };\n\n  _proto.durationSeconds = function durationSeconds() {\n    return this._offsetAfter.totalSeconds() - this._offsetBefore.totalSeconds();\n  };\n\n  _proto.isGap = function isGap() {\n    return this._offsetAfter.totalSeconds() > this._offsetBefore.totalSeconds();\n  };\n\n  _proto.isOverlap = function isOverlap() {\n    return this._offsetAfter.totalSeconds() < this._offsetBefore.totalSeconds();\n  };\n\n  _proto.isValidOffset = function isValidOffset(offset) {\n    return this.isGap() ? false : this._offsetBefore.equals(offset) || this._offsetAfter.equals(offset);\n  };\n\n  _proto.validOffsets = function validOffsets() {\n    if (this.isGap()) {\n      return [];\n    } else {\n      return [this._offsetBefore, this._offsetAfter];\n    }\n  };\n\n  _proto.compareTo = function compareTo(transition) {\n    return this.instant().compareTo(transition.instant());\n  };\n\n  _proto.equals = function equals(other) {\n    if (other === this) {\n      return true;\n    }\n\n    if (other instanceof ZoneOffsetTransition) {\n      var d = other;\n      return this._transition.equals(d._transition) && this._offsetBefore.equals(d.offsetBefore()) && this._offsetAfter.equals(d.offsetAfter());\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._transition.hashCode() ^ this._offsetBefore.hashCode() ^ this._offsetAfter.hashCode() >>> 16;\n  };\n\n  _proto.toString = function toString() {\n    return 'Transition[' + (this.isGap() ? 'Gap' : 'Overlap') + ' at ' + this._transition.toString() + this._offsetBefore.toString() + ' to ' + this._offsetAfter + ']';\n  };\n\n  return ZoneOffsetTransition;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nfunction _init$m() {\n  TemporalQueries.ZONE_ID = createTemporalQuery('ZONE_ID', function (temporal) {\n    return temporal.query(TemporalQueries.ZONE_ID);\n  });\n  TemporalQueries.CHRONO = createTemporalQuery('CHRONO', function (temporal) {\n    return temporal.query(TemporalQueries.CHRONO);\n  });\n  TemporalQueries.PRECISION = createTemporalQuery('PRECISION', function (temporal) {\n    return temporal.query(TemporalQueries.PRECISION);\n  });\n  TemporalQueries.OFFSET = createTemporalQuery('OFFSET', function (temporal) {\n    if (temporal.isSupported(ChronoField.OFFSET_SECONDS)) {\n      return ZoneOffset.ofTotalSeconds(temporal.get(ChronoField.OFFSET_SECONDS));\n    }\n\n    return null;\n  });\n  TemporalQueries.ZONE = createTemporalQuery('ZONE', function (temporal) {\n    var zone = temporal.query(TemporalQueries.ZONE_ID);\n    return zone != null ? zone : temporal.query(TemporalQueries.OFFSET);\n  });\n  TemporalQueries.LOCAL_DATE = createTemporalQuery('LOCAL_DATE', function (temporal) {\n    if (temporal.isSupported(ChronoField.EPOCH_DAY)) {\n      return LocalDate.ofEpochDay(temporal.getLong(ChronoField.EPOCH_DAY));\n    }\n\n    return null;\n  });\n  TemporalQueries.LOCAL_TIME = createTemporalQuery('LOCAL_TIME', function (temporal) {\n    if (temporal.isSupported(ChronoField.NANO_OF_DAY)) {\n      return LocalTime.ofNanoOfDay(temporal.getLong(ChronoField.NANO_OF_DAY));\n    }\n\n    return null;\n  });\n}\n\nvar SystemDefaultZoneRules = function (_ZoneRules) {\n  _inheritsLoose(SystemDefaultZoneRules, _ZoneRules);\n\n  function SystemDefaultZoneRules() {\n    return _ZoneRules.apply(this, arguments) || this;\n  }\n\n  var _proto = SystemDefaultZoneRules.prototype;\n\n  _proto.isFixedOffset = function isFixedOffset() {\n    return false;\n  };\n\n  _proto.offsetOfInstant = function offsetOfInstant(instant) {\n    var offsetInMinutes = new Date(instant.toEpochMilli()).getTimezoneOffset();\n    return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n  };\n\n  _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {\n    var offsetInMinutes = new Date(epochMilli).getTimezoneOffset();\n    return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n  };\n\n  _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {\n    var epochMilli = localDateTime.toEpochSecond(ZoneOffset.UTC) * 1000;\n    var offsetInMinutesBeforePossibleTransition = new Date(epochMilli).getTimezoneOffset();\n    var epochMilliSystemZone = epochMilli + offsetInMinutesBeforePossibleTransition * 60000;\n    var offsetInMinutesAfterPossibleTransition = new Date(epochMilliSystemZone).getTimezoneOffset();\n    return ZoneOffset.ofTotalMinutes(offsetInMinutesAfterPossibleTransition * -1);\n  };\n\n  _proto.validOffsets = function validOffsets(localDateTime) {\n    return [this.offsetOfLocalDateTime(localDateTime)];\n  };\n\n  _proto.transition = function transition() {\n    return null;\n  };\n\n  _proto.standardOffset = function standardOffset(instant) {\n    return this.offsetOfInstant(instant);\n  };\n\n  _proto.daylightSavings = function daylightSavings() {\n    this._throwNotSupported();\n  };\n\n  _proto.isDaylightSavings = function isDaylightSavings() {\n    this._throwNotSupported();\n  };\n\n  _proto.isValidOffset = function isValidOffset(dateTime, offset) {\n    return this.offsetOfLocalDateTime(dateTime).equals(offset);\n  };\n\n  _proto.nextTransition = function nextTransition() {\n    this._throwNotSupported();\n  };\n\n  _proto.previousTransition = function previousTransition() {\n    this._throwNotSupported();\n  };\n\n  _proto.transitions = function transitions() {\n    this._throwNotSupported();\n  };\n\n  _proto.transitionRules = function transitionRules() {\n    this._throwNotSupported();\n  };\n\n  _proto._throwNotSupported = function _throwNotSupported() {\n    throw new DateTimeException('not supported operation');\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other || other instanceof SystemDefaultZoneRules) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.toString = function toString() {\n    return 'SYSTEM';\n  };\n\n  return SystemDefaultZoneRules;\n}(ZoneRules);\n\nvar SystemDefaultZoneId = function (_ZoneId) {\n  _inheritsLoose(SystemDefaultZoneId, _ZoneId);\n\n  function SystemDefaultZoneId() {\n    var _this;\n\n    _this = _ZoneId.call(this) || this;\n    _this._rules = new SystemDefaultZoneRules();\n    return _this;\n  }\n\n  var _proto = SystemDefaultZoneId.prototype;\n\n  _proto.rules = function rules() {\n    return this._rules;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.id = function id() {\n    return 'SYSTEM';\n  };\n\n  return SystemDefaultZoneId;\n}(ZoneId);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneIdFactory = function () {\n  function ZoneIdFactory() {}\n\n  ZoneIdFactory.systemDefault = function systemDefault() {\n    return SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n  };\n\n  ZoneIdFactory.getAvailableZoneIds = function getAvailableZoneIds() {\n    return ZoneRulesProvider.getAvailableZoneIds();\n  };\n\n  ZoneIdFactory.of = function of(zoneId) {\n    requireNonNull(zoneId, 'zoneId');\n\n    if (zoneId === 'Z') {\n      return ZoneOffset.UTC;\n    }\n\n    if (zoneId.length === 1) {\n      throw new DateTimeException('Invalid zone: ' + zoneId);\n    }\n\n    if (StringUtil.startsWith(zoneId, '+') || StringUtil.startsWith(zoneId, '-')) {\n      return ZoneOffset.of(zoneId);\n    }\n\n    if (zoneId === 'UTC' || zoneId === 'GMT' || zoneId === 'GMT0' || zoneId === 'UT') {\n      return new ZoneRegion(zoneId, ZoneOffset.UTC.rules());\n    }\n\n    if (StringUtil.startsWith(zoneId, 'UTC+') || StringUtil.startsWith(zoneId, 'GMT+') || StringUtil.startsWith(zoneId, 'UTC-') || StringUtil.startsWith(zoneId, 'GMT-')) {\n      var offset = ZoneOffset.of(zoneId.substring(3));\n\n      if (offset.totalSeconds() === 0) {\n        return new ZoneRegion(zoneId.substring(0, 3), offset.rules());\n      }\n\n      return new ZoneRegion(zoneId.substring(0, 3) + offset.id(), offset.rules());\n    }\n\n    if (StringUtil.startsWith(zoneId, 'UT+') || StringUtil.startsWith(zoneId, 'UT-')) {\n      var _offset = ZoneOffset.of(zoneId.substring(2));\n\n      if (_offset.totalSeconds() === 0) {\n        return new ZoneRegion('UT', _offset.rules());\n      }\n\n      return new ZoneRegion('UT' + _offset.id(), _offset.rules());\n    }\n\n    if (zoneId === 'SYSTEM') {\n      return ZoneId.systemDefault();\n    }\n\n    return ZoneRegion.ofId(zoneId);\n  };\n\n  ZoneIdFactory.ofOffset = function ofOffset(prefix, offset) {\n    requireNonNull(prefix, 'prefix');\n    requireNonNull(offset, 'offset');\n\n    if (prefix.length === 0) {\n      return offset;\n    }\n\n    if (prefix === 'GMT' || prefix === 'UTC' || prefix === 'UT') {\n      if (offset.totalSeconds() === 0) {\n        return new ZoneRegion(prefix, offset.rules());\n      }\n\n      return new ZoneRegion(prefix + offset.id(), offset.rules());\n    }\n\n    throw new IllegalArgumentException('Invalid prefix, must be GMT, UTC or UT: ' + prefix);\n  };\n\n  ZoneIdFactory.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    var obj = temporal.query(TemporalQueries.zone());\n\n    if (obj == null) {\n      throw new DateTimeException('Unable to obtain ZoneId from TemporalAccessor: ' + temporal + ', type ' + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n\n    return obj;\n  };\n\n  return ZoneIdFactory;\n}();\nvar SYSTEM_DEFAULT_ZONE_ID_INSTANCE = null;\nfunction _init$n() {\n  SYSTEM_DEFAULT_ZONE_ID_INSTANCE = new SystemDefaultZoneId();\n  ZoneId.systemDefault = ZoneIdFactory.systemDefault;\n  ZoneId.getAvailableZoneIds = ZoneIdFactory.getAvailableZoneIds;\n  ZoneId.of = ZoneIdFactory.of;\n  ZoneId.ofOffset = ZoneIdFactory.ofOffset;\n  ZoneId.from = ZoneIdFactory.from;\n  ZoneOffset.from = ZoneIdFactory.from;\n  ZoneId.SYSTEM = SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n  ZoneId.UTC = ZoneOffset.ofTotalSeconds(0);\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar isInit = false;\n\nfunction init() {\n  if (isInit) {\n    return;\n  }\n\n  isInit = true;\n  _init$1();\n  _init();\n  _init$2();\n  _init$3();\n  _init$k();\n  _init$8();\n  _init$m();\n  _init$4();\n  _init$l();\n  _init$i();\n  _init$j();\n  _init$d();\n  _init$5();\n  _init$c();\n  _init$b();\n  _init$6();\n  _init$7();\n  _init$g();\n  _init$n();\n  _init$e();\n  _init$a();\n  _init$9();\n  _init$h();\n  _init$f();\n}\n\ninit();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nvar ToNativeJsConverter = function () {\n  function ToNativeJsConverter(temporal, zone) {\n    var zonedDateTime;\n\n    if (temporal instanceof LocalDate) {\n      zone = zone == null ? ZoneId.systemDefault() : zone;\n      zonedDateTime = temporal.atStartOfDay(zone);\n    } else if (temporal instanceof LocalDateTime) {\n      zone = zone == null ? ZoneId.systemDefault() : zone;\n      zonedDateTime = temporal.atZone(zone);\n    } else if (temporal instanceof ZonedDateTime) {\n      if (zone == null) {\n        zonedDateTime = temporal;\n      } else {\n        zonedDateTime = temporal.withZoneSameInstant(zone);\n      }\n    } else {\n      throw new IllegalArgumentException('unsupported instance for convert operation:' + temporal);\n    }\n\n    this.instant = zonedDateTime.toInstant();\n  }\n\n  var _proto = ToNativeJsConverter.prototype;\n\n  _proto.toDate = function toDate() {\n    return new Date(this.instant.toEpochMilli());\n  };\n\n  _proto.toEpochMilli = function toEpochMilli() {\n    return this.instant.toEpochMilli();\n  };\n\n  return ToNativeJsConverter;\n}();\n\nfunction convert(temporal, zone) {\n  return new ToNativeJsConverter(temporal, zone);\n}\n\nvar NativeJsTemporal = function (_TemporalAccessor) {\n  _inheritsLoose(NativeJsTemporal, _TemporalAccessor);\n\n  function NativeJsTemporal(date, zone) {\n    var _this;\n\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._zone = zone;\n\n    if (date instanceof Date) {\n      _this._epochMilli = date.getTime();\n      return _assertThisInitialized(_this);\n    } else if (typeof date.toDate === 'function' && date.toDate() instanceof Date) {\n      _this._epochMilli = date.toDate().getTime();\n      return _assertThisInitialized(_this);\n    }\n\n    assert(false, 'date must be either a javascript date or a moment');\n    return _this;\n  }\n\n  var _proto = NativeJsTemporal.prototype;\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofInstant(Instant.ofEpochMilli(this._epochMilli), this._zone);\n    } else if (_query === TemporalQueries.localTime()) {\n      return LocalTime.ofInstant(Instant.ofEpochMilli(this._epochMilli), this._zone);\n    } else if (_query === TemporalQueries.zone()) {\n      return this._zone;\n    }\n\n    return _TemporalAccessor.prototype.query.call(this, _query);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.NANO_OF_SECOND:\n          return MathUtil.floorMod(this._epochMilli, 1000) * 1000000;\n\n        case ChronoField.INSTANT_SECONDS:\n          return MathUtil.floorDiv(this._epochMilli, 1000);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    return field === ChronoField.INSTANT_SECONDS || field === ChronoField.NANO_OF_SECOND;\n  };\n\n  return NativeJsTemporal;\n}(TemporalAccessor);\n\nfunction nativeJs(date, zone) {\n  return new NativeJsTemporal(date, zone);\n}\n\nfunction bindUse(jsJoda) {\n  var used = [];\n  return function use(fn) {\n    if (!~used.indexOf(fn)) {\n      fn(jsJoda);\n      used.push(fn);\n    }\n\n    return jsJoda;\n  };\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar _ = {\n  assert: assert$1,\n  DateTimeBuilder: DateTimeBuilder,\n  DateTimeParseContext: DateTimeParseContext,\n  DateTimePrintContext: DateTimePrintContext,\n  MathUtil: MathUtil,\n  StringUtil: StringUtil,\n  StringBuilder: StringBuilder\n};\nvar jsJodaExports = {\n  _: _,\n  convert: convert,\n  nativeJs: nativeJs,\n  ArithmeticException: ArithmeticException,\n  DateTimeException: DateTimeException,\n  DateTimeParseException: DateTimeParseException,\n  IllegalArgumentException: IllegalArgumentException,\n  IllegalStateException: IllegalStateException,\n  UnsupportedTemporalTypeException: UnsupportedTemporalTypeException,\n  NullPointerException: NullPointerException,\n  Clock: Clock,\n  DayOfWeek: DayOfWeek,\n  Duration: Duration,\n  Instant: Instant,\n  LocalDate: LocalDate,\n  LocalTime: LocalTime,\n  LocalDateTime: LocalDateTime,\n  OffsetTime: OffsetTime,\n  OffsetDateTime: OffsetDateTime,\n  Month: Month,\n  MonthDay: MonthDay,\n  Period: Period,\n  Year: Year,\n  YearConstants: YearConstants,\n  YearMonth: YearMonth,\n  ZonedDateTime: ZonedDateTime,\n  ZoneOffset: ZoneOffset,\n  ZoneId: ZoneId,\n  ZoneRegion: ZoneRegion,\n  ZoneOffsetTransition: ZoneOffsetTransition,\n  ZoneRules: ZoneRules,\n  ZoneRulesProvider: ZoneRulesProvider,\n  ChronoLocalDate: ChronoLocalDate,\n  ChronoLocalDateTime: ChronoLocalDateTime,\n  ChronoZonedDateTime: ChronoZonedDateTime,\n  IsoChronology: IsoChronology,\n  ChronoField: ChronoField,\n  ChronoUnit: ChronoUnit,\n  IsoFields: IsoFields,\n  Temporal: Temporal,\n  TemporalAccessor: TemporalAccessor,\n  TemporalAdjuster: TemporalAdjuster,\n  TemporalAdjusters: TemporalAdjusters,\n  TemporalAmount: TemporalAmount,\n  TemporalField: TemporalField,\n  TemporalQueries: TemporalQueries,\n  TemporalQuery: TemporalQuery,\n  TemporalUnit: TemporalUnit,\n  ValueRange: ValueRange,\n  DateTimeFormatter: DateTimeFormatter,\n  DateTimeFormatterBuilder: DateTimeFormatterBuilder,\n  DecimalStyle: DecimalStyle,\n  ResolverStyle: ResolverStyle,\n  SignStyle: SignStyle,\n  TextStyle: TextStyle\n};\nvar use = bindUse(jsJodaExports);\njsJodaExports.use = use;\n\nexport { ArithmeticException, ChronoField, ChronoLocalDate, ChronoLocalDateTime, ChronoUnit, ChronoZonedDateTime, Clock, DateTimeException, DateTimeFormatter, DateTimeFormatterBuilder, DateTimeParseException, DayOfWeek, DecimalStyle, Duration, IllegalArgumentException, IllegalStateException, Instant, IsoChronology, IsoFields, LocalDate, LocalDateTime, LocalTime, Month, MonthDay, NullPointerException, OffsetDateTime, OffsetTime, Period, ResolverStyle, SignStyle, Temporal, TemporalAccessor, TemporalAdjuster, TemporalAdjusters, TemporalAmount, TemporalField, TemporalQueries, TemporalQuery, TemporalUnit, TextStyle, UnsupportedTemporalTypeException, ValueRange, Year, YearConstants, YearMonth, ZoneId, ZoneOffset, ZoneOffsetTransition, ZoneRegion, ZoneRules, ZoneRulesProvider, ZonedDateTime, _, convert, nativeJs, use };\n","package featurea.text.reader\n\nimport featurea.Bundle\nimport featurea.System\nimport featurea.content.Resource\nimport featurea.content.ResourceReader\nimport featurea.content.textExtensions\nimport featurea.utils.hasExtension\nimport featurea.runtime.Container\n\nclass TextReader(container: Container) : ResourceReader {\n\n    private val system: System = container.import()\n\n    override suspend fun readOrNull(resourcePath: String, bundle: Bundle?): Resource? {\n        if (resourcePath.hasExtension(system.textExtensions)) {\n            return Resource(resourcePath)\n        }\n        return null\n    }\n\n}\n","package featurea.text.reader\n\nimport featurea.runtime.Artifact\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.text.reader\") {\n    include(featurea.content.artifact)\n\n    \"TextReader\" to TextReader::class\n\n    static {\n        provideComponent(TextReader(container = this)) // todo refactor to `provideComponent(TextReader())` with Kotlin 1.6.2 feature \"multiple context receivers\"\n    }\n}\n","@file:Suppress(\"UNCHECKED_CAST\")\n\npackage featurea.formula\n\nclass Formula<T>(val value: String) {\n\n    val variables: Variables = Variables()\n\n    private val operand: FormulaOperand<T> = FormulaExpression(value).operand as FormulaOperand<T>\n\n    fun calculate(): T {\n        val formula: Formula<T> = this\n        return operand.calculate(formula)\n    }\n\n    fun variables(block: Formula<T>.() -> Unit): Formula<T> {\n        block()\n        return this\n    }\n\n    infix fun String.to(value: Any) {\n        variables[this] = value\n    }\n\n    fun setVariable(name: String, value: Any) {\n        variables[name] = when (value) {\n            is Number -> value.toDouble()\n            is Boolean -> value\n            else -> error(\"value: $value\")\n        }\n    }\n\n    inner class Variables {\n\n        private val map = mutableMapOf<String, Any>()\n\n        operator fun set(name: String, value: Any) {\n            map[name] = when (value) {\n                is Number -> value.toDouble()\n                is Boolean -> value\n                else -> throw IllegalArgumentException(\"value: $value\")\n            }\n        }\n\n        operator fun get(name: String): Any? {\n            return map[name]\n        }\n\n    }\n\n}\n\n/*convenience*/\n\nfun <T> String.toFormulaOrNull(): Formula<T>? = if (isNotBlank()) Formula(this) else null\n","@file:Suppress(\"UNCHECKED_CAST\")\n\npackage featurea.formula\n\nclass FormulaExpression(val value: String) {\n\n    private val operators = ArrayList<FormulaOperator<Any, Any, Any>>()\n    lateinit var operand: FormulaOperand<Any>\n\n    init {\n        parseOperators()\n        orderOperators()\n    }\n\n    private fun parseOperators() {\n        val chars: CharArray = value.toCharArray()\n        var operatorToken: String = \"\"\n        var currentOperator: FormulaOperator<Any, Any, Any>? = null\n        var operandToken: String = \"\"\n        var currentOperand: FormulaOperand<Any>? = null\n        var index: Int = 0\n        while (index < chars.size) {\n            val ch = chars[index]\n            if (ch == ' ') {\n                index++\n                continue\n            }\n            if (ch.isOperatorSymbol()) {\n                // 1. operand\n                if (!operandToken.isEmpty()) {\n                    currentOperand = operandToken.toOperand()\n                    if (currentOperator != null) {\n                        currentOperator.rightOperand = currentOperand\n                    }\n                    operandToken = \"\"\n                }\n                // 2. operator\n                operatorToken += ch\n            } else {\n                // 1. operator\n                if (!operatorToken.isEmpty()) {\n                    currentOperator = operatorMap[operatorToken]?.invoke() as FormulaOperator<Any, Any, Any>\n                    operators.add(currentOperator)\n                    currentOperator.leftOperand = currentOperand ?: error(\"value:\\n$value\")\n                    operatorToken = \"\"\n                }\n                if (ch == '(') {\n                    index++\n                    var exprIndex: Int = index\n                    var counter: Int = 1\n                    while (counter != 0) {\n                        if (value[exprIndex] == ')') {\n                            counter--\n                        } else if (value[exprIndex] == '(') {\n                            counter++\n                        }\n                        exprIndex++\n                    }\n                    exprIndex--\n                    val expression: FormulaExpression = FormulaExpression(value.substring(index, exprIndex))\n                    index = exprIndex\n                    val expressionOperand = expression.operand\n                    if (currentOperator != null) {\n                        currentOperator.rightOperand = expressionOperand\n                    }\n                    currentOperand = expressionOperand\n                } else {\n                    // 2. operand\n                    operandToken += ch\n                    if (index == chars.size - 1) {\n                        currentOperand = operandToken.toOperand()\n                        if (currentOperator != null) {\n                            currentOperator.rightOperand = currentOperand\n                        }\n                    }\n                }\n            }\n            index++\n        }\n        if (operators.isEmpty()) {\n            operand = currentOperand as FormulaOperand<Any>\n        }\n    }\n\n    private fun orderOperators() {\n        if (operators.isEmpty()) {\n            return\n        }\n        operators.sortOperators()\n        val markers: Markers = mutableMapOf<FormulaOperand<Any>, FormulaOperator<Any, Any, Any>>()\n        for (operator in operators) {\n            run /*1. left operand*/{\n                val leftOperand: FormulaOperand<Any> = operator.leftOperand\n                val marker: FormulaOperator<Any, Any, Any>? = markers[leftOperand]\n                if (marker != null) {\n                    operator.leftOperand = marker\n                    markers.updateMarkers(marker, operator)\n                } else {\n                    markers[leftOperand] = operator\n                }\n            }\n            run /*2. right operand*/{\n                val rightOperand: FormulaOperand<Any> = operator.rightOperand\n                val marker: FormulaOperator<Any, Any, Any>? = markers[rightOperand]\n                if (marker != null) {\n                    operator.rightOperand = marker\n                    markers.updateMarkers(marker, operator)\n                } else {\n                    markers[rightOperand] = operator\n                }\n            }\n        }\n        operand = operators.last()\n    }\n\n}\n\n/*internals*/\n\nprivate fun Markers.updateMarkers(from: FormulaOperator<Any, Any, Any>, to: FormulaOperator<Any, Any, Any>) {\n    val markers: Markers = this\n    for ((operand, operator) in this) {\n        if (operator == from) {\n            markers[operand] = to\n        }\n    }\n}\n\nprivate typealias Markers = MutableMap<FormulaOperand<Any>, FormulaOperator<Any, Any, Any>>\n","package featurea.formula\n\nimport featurea.utils.isBoolean\nimport featurea.utils.isDouble\nimport featurea.utils.isInteger\n\ninterface FormulaOperand<T> {\n    fun calculate(formula: Formula<*>): T\n}\n\nclass ValueOperand<T>(val value: T) : FormulaOperand<T> {\n    override fun calculate(formula: Formula<*>) = value\n}\n\n@Suppress(\"UNCHECKED_CAST\")\nclass VariableOperand<T>(val name: String) : FormulaOperand<T> {\n    override fun calculate(formula: Formula<*>): T = formula.variables[name] as T\n}\n\n@Suppress(\"UNCHECKED_CAST\")\nfun <T> String.toOperand(): FormulaOperand<T> {\n    if (isDouble() || isInteger()) {\n        return ValueOperand(toDouble() as T)\n    } else if (isBoolean()) {\n        return ValueOperand(toBoolean() as T)\n    } else {\n        return VariableOperand(this)\n    }\n}\n","package featurea.formula\n\nsealed class FormulaOperator<L, R, T> : FormulaOperand<T> {\n\n    lateinit var leftOperand: FormulaOperand<L>\n    lateinit var rightOperand: FormulaOperand<R>\n\n    abstract fun function(leftValue: L, rightValue: R): T\n\n    override fun calculate(formula: Formula<*>): T {\n        val leftHandValue = leftOperand.calculate(formula)\n        val rightHandValue = rightOperand.calculate(formula)\n        return function(leftHandValue, rightHandValue)\n    }\n\n}\n\nclass Plus : FormulaOperator<Double, Double, Double>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue + rightValue\n}\n\nclass Minus : FormulaOperator<Double, Double, Double>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue - rightValue\n}\n\nclass Multiply : FormulaOperator<Double, Double, Double>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue * rightValue\n}\n\nclass Divide : FormulaOperator<Double, Double, Double>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue / rightValue\n}\n\nclass Equal : FormulaOperator<Any, Any, Boolean>() {\n    override fun function(leftValue: Any, rightValue: Any): Boolean {\n        if (leftValue is Double && rightValue is Double) {\n            return leftValue == rightValue\n        } else if (leftValue is Boolean && rightValue is Boolean) {\n            return leftValue == rightValue\n        } else {\n            throw IllegalArgumentException(\"leftValue: $leftValue, rightValue: $rightValue\")\n        }\n    }\n}\n\nclass Greater : FormulaOperator<Double, Double, Boolean>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue > rightValue\n}\n\nclass GreaterOrEqual : FormulaOperator<Double, Double, Boolean>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue >= rightValue\n}\n\nclass Less : FormulaOperator<Double, Double, Boolean>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue < rightValue\n}\n\nclass LessOrEqual : FormulaOperator<Double, Double, Boolean>() {\n    override fun function(leftValue: Double, rightValue: Double) = leftValue <= rightValue\n}\n","package featurea.formula\n\nprivate const val operatorSymbols = \"+-*/<=>\"\n\nfun Char.isOperatorSymbol() = operatorSymbols.contains(this)\n\nval operatorMap = mapOf<String, () -> FormulaOperator<*, *, *>>(\n    \"+\" to { Plus() },\n    \"-\" to { Minus() },\n    \"*\" to { Multiply() },\n    \"/\" to { Divide() },\n    \"==\" to { Equal() },\n    \">\" to { Greater() },\n    \">=\" to { GreaterOrEqual() },\n    \"<\" to { Less() },\n    \"<=\" to { LessOrEqual() }\n)\n\nprivate val operatorPriorityComparator = Comparator<FormulaOperator<*, *, *>> { operator1, operator2 ->\n    when {\n        (operator1::class == operator2::class) -> 0\n        operator1.isBoolean -> 1\n        operator1.isNonLinear -> -1\n        operator1.isLinear -> if (operator2.isBoolean) -1 else 1\n        else -> error(\"$operator1, $operator2\")\n    }\n}\n\nfun ArrayList<FormulaOperator<Any, Any, Any>>.sortOperators() {\n    val sortedOperators = sortedWith(operatorPriorityComparator)\n    clear()\n    addAll(sortedOperators)\n}\n\nprivate val FormulaOperator<*, *, *>.isBoolean\n    get() = this is Equal || this is Less || this is LessOrEqual || this is Greater || this is GreaterOrEqual\n\nprivate val FormulaOperator<*, *, *>.isLinear\n    get() = this is Plus || this is Minus\n\nprivate val FormulaOperator<*, *, *>.isNonLinear\n    get() = this is Multiply || this is Divide\n","package featurea.config\n\nimport featurea.content.ResourceSchema\nimport featurea.runtime.Component\nimport featurea.runtime.Container\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.utils.toSimpleName\nimport featurea.utils.runBlocking\n\nclass Config(val name: String) {\n\n    val files = mutableListOf<ConfigFile>()\n    val properties = linkedMapOf<String, String>()\n    internal var rmlSchema: ResourceSchema? = null\n\n    fun initProperties() {\n        for (file in files.asReversed()) {\n            properties.putAll(file.properties)\n        }\n    }\n\n    operator fun get(key: String?, defaultValue: String): String {\n        return get(key) ?: defaultValue\n    }\n\n    operator fun get(key: String?): String? {\n        val rmlSchema: ResourceSchema = checkNotNull(rmlSchema)\n        if (key == null) {\n            return null\n        }\n        val value: String? = findValueOrNull(key)\n        if (value != null) {\n            return value\n        }\n        val superKey = rmlSchema.findSuperKeyForKeyOrNull(key)\n        return get(superKey) // IMPORTANT recursion by design\n    }\n\n    fun propertiesOf(canonicalName: String): Map<String, String> {\n        val rmlSchema: ResourceSchema = checkNotNull(rmlSchema)\n        val result = mutableMapOf<String, String>()\n        var currentCanonicalName: String = canonicalName\n        while (currentCanonicalName != \"kotlin.Any\") {\n            val simpleName: String = currentCanonicalName.toSimpleName()\n            for ((key, value) in properties) {\n                if (key.startsWith(\"${simpleName}.\")) {\n                    if (result[key.toSimpleName()] == null) {\n                        result[key.toSimpleName()] = value\n                    }\n                }\n            }\n            currentCanonicalName = rmlSchema.superCanonicalClassNameByKey[simpleName] ?: \"kotlin.Any\"\n        }\n        return result\n    }\n\n    fun exists(): Boolean {\n        return files.isNotEmpty()\n    }\n\n    /*internals*/\n\n    private fun findValueOrNull(key: String): String? {\n        for (file in files) {\n            val value: String? = file.properties[key]\n            if (value != null) {\n                return value\n            }\n        }\n        return null\n    }\n\n}\n\n/*convenience*/\n\nfun Component.Config(name: String): Config = runBlocking {\n    val configContent: ConfigContent = import()\n    configContent.findConfig(name)\n}\n\nfun Module.importConfig(name: String): Config = runBlocking {\n    val configContent: ConfigContent = importComponent()\n    configContent.findConfig(name)\n}\n\nfun Container.importConfig(name: String): Config = runBlocking {\n    val configContent: ConfigContent = import()\n    configContent.findConfig(name)\n}\n","package featurea.config\n\nimport featurea.content.ResourceSchema\nimport featurea.rml.reader.RmlContent\nimport featurea.utils.toConfigPath\nimport featurea.utils.toFilePath\nimport featurea.utils.toIdPath\n\nclass ConfigContent(val rmlContent: RmlContent) {\n\n    private val configs = mutableMapOf<String, Config>()\n    private val configFiles = mutableMapOf<String, ConfigFile?>()\n\n    suspend fun findValueOrNull(configPath: String): String? {\n        val name: String = configPath.toFilePath()\n        val key: String? = configPath.toIdPath()\n        val config: Config = findConfig(name)\n        return config[key]\n    }\n\n    suspend fun findConfig(name: String): Config {\n        var config: Config? = configs[name]\n        if (config == null) {\n            config = Config(name).apply {\n                for (configPackage in rmlContent.configPackages) {\n                    val configPath = configPackage.toConfigPath()\n                    val configFilePath = \"${configPath}/${name}.properties\"\n                    val configFile: ConfigFile? = findConfigFileOrNull(configFilePath)\n                    if (configFile != null) {\n                        files.add(configFile)\n                        if (rmlSchema == null) {\n                            rmlSchema = rmlContent.findRmlSchema(configPackage)\n                        }\n                    }\n                }\n                if (rmlSchema == null) {\n                    rmlSchema = ResourceSchema()\n                }\n                initProperties()\n            }\n            configs[name] = config\n        }\n        return config\n    }\n\n    suspend fun findConfigFileOrNull(filePath: String): ConfigFile? {\n        if (!configFiles.containsKey(filePath)) {\n            val text: String? = rmlContent.textContent.findTextOrNull(filePath)\n            if (text != null) {\n                configFiles[filePath] = ConfigFile(text, filePath)\n            }\n        }\n        return configFiles[filePath]\n    }\n\n    fun clearCache() {\n        configs.clear()\n        configFiles.clear()\n    }\n\n}\n\n/*convenience*/\n\nsuspend fun ConfigContent.importsOf(name: String): Map<String, String> {\n    for (configPackage in rmlContent.configPackages) {\n        val configPath = configPackage.toConfigPath()\n        val configFilePath = \"$configPath/$name.properties\"\n        val configFile = findConfigFileOrNull(configFilePath)\n        if (configFile != null) return configFile.imports\n    }\n    error(\"name: $name\")\n}\n","package featurea.config\n\nimport featurea.content.ContentType\nimport featurea.content.Resource\nimport featurea.utils.pathWithoutExtension\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\n\nclass ConfigContentType(override val module: Module) : Component, ContentType {\n\n    private val configContent: ConfigContent = import()\n\n    override suspend fun load(resource: Resource, loadingQueue: ArrayList<String>) {\n        val name: String = resource.configPath.pathWithoutExtension\n        configContent.findConfig(name)\n        loadingQueue.add(resource.path)\n    }\n\n    override suspend fun release(resource: Resource, releaseQueue: ArrayList<String>) {\n        // todo\n        releaseQueue.add(resource.path)\n    }\n\n}\n","package featurea.config\n\nimport featurea.utils.parseProperties\n\nclass ConfigFile(val source: String, val path: String) {\n\n    val imports = mutableMapOf<String, String>()\n    val properties: Map<String, String> = parseProperties(source)\n\n    init {\n        for ((key, value) in properties) {\n            if (key.startsWith(\"import.\")) {\n                val importId: String = key.removePrefix(\"import.\")\n                imports[importId] = value\n            }\n        }\n    }\n\n    override fun toString(): String = \"ConfigFile(path='$path')\"\n\n}\n","package featurea.config\n\nimport featurea.*\nimport featurea.content.Resource\nimport featurea.content.ResourcePropertyDelegate\nimport featurea.content.ResourceReader\nimport featurea.content.propertiesExtension\nimport featurea.utils.*\nimport kotlin.text.endsWith\n\nclass ConfigReader(val configContent: ConfigContent) : ResourceReader {\n\n    override suspend fun readOrNull(resourcePath: String, bundle: Bundle?): Resource? {\n        if (resourcePath.extension == propertiesExtension) {\n            val configPath: String = findConfigPath(resourcePath) ?: return null\n            val name: String = configPath.pathWithoutExtension\n            val config: Config = configContent.findConfig(name)\n            val files: List<String> = config.files.map { it.path }\n            return Resource(files) {\n                Properties(\"configPath\" to configPath)\n            }\n        }\n        return null\n    }\n\n    /*internals*/\n\n    private fun findConfigPath(value: String): String? {\n        if (value.endsWith(\"-desktop.properties\")) {\n            if (System.target != SystemTarget.DESKTOP) {\n                return null\n            }\n            val result: String = value.replaceSuffix(\"-desktop.properties\", \".properties\")\n            return result\n        }\n        return value\n    }\n\n}\n\n/*properties*/\n\nval Resource.configPath: String by ResourcePropertyDelegate(\"configPath\") { error(\"configPath\") }\n","package featurea.config\n\nimport featurea.content.contentTypes\nimport featurea.rml.reader.RmlContent\nimport featurea.runtime.Artifact\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.config\") {\n    \"ConfigContent\" to ConfigContent::class\n    \"ConfigReader\" to ConfigReader::class\n\n    static {\n        val rmlContent: RmlContent = import()\n        val configContent: ConfigContent = ConfigContent(rmlContent)\n        provideComponent(configContent)\n        provideComponent(ConfigReader(configContent))\n    }\n\n    contentTypes {\n        \"ConfigContentType\" to ::ConfigContentType\n    }\n}\n","package featurea.input\n\nimport featurea.app.ApplicationController\nimport featurea.utils.BufferedList\nimport featurea.runtime.Module\n\nclass Input(module: Module) : ApplicationController(module) {\n\n    private val events = BufferedList<InputEvent>()\n    private val listeners = mutableListOf<InputListener>()\n\n    fun addListener(inputListener: InputListener) {\n        listeners.add(inputListener)\n    }\n\n    fun addListener(update: (event: InputEvent) -> Unit) {\n        listeners.add(InputListener(update))\n    }\n\n    fun removeListener(inputListener: InputListener) {\n        listeners.remove(inputListener)\n    }\n\n    fun addEvent(event: InputEvent) {\n        events.add(event)\n        for (listener in listeners) {\n            listener.happen(event)\n        }\n    }\n\n    override suspend fun update() {\n        val eventsFrontBuffer = events.swap()\n        if (isEnable) {\n            for (inputEvent in eventsFrontBuffer) {\n                for (listener in listeners) {\n                    if (listener.acceptEvent()) {\n                        listener.update(inputEvent)\n                    }\n                }\n            }\n        }\n        eventsFrontBuffer.clear()\n    }\n\n}\n","package featurea.input\n\nimport featurea.layout.Camera\nimport featurea.math.Vector2\nimport featurea.window.Window\nimport featurea.window.toLocalCoordinates\n\ndata class InputEvent(\n    val source: InputEventSource,\n    val type: InputEventType,\n    val x1: Float,\n    val y1: Float,\n    val x2: Float,\n    val y2: Float,\n    val scrollX: Float = 0f, // quickfix todo avoid default value\n    val scrollY: Float = 0f, // quickfix todo avoid default value\n    val preventDefaultBlock: (() -> Unit)? = null // works on js target only\n)\n\nenum class InputEventSource {\n    LEFT,         // works on all targets\n    RIGHT, MIDDLE // works on desktop targets only\n}\n\nenum class InputEventType {\n    DOWN, DRAG, UP, DOUBLE_CLICK, // works on all targets\n    LONG_TOUCH,                   // works on mobile targets only\n    MOVE,                         // works on desktop targets only\n    WHEEL,                        // works on desktop targets only\n}\n\nfun InputEvent.preventDefault() {\n    preventDefaultBlock?.invoke()\n}\n\nval InputEvent.isDoubleClick: Boolean get() = type == InputEventType.DOUBLE_CLICK\nval InputEvent.isDown: Boolean get() = type == InputEventType.DOWN\nval InputEvent.isDrag: Boolean get() = type == InputEventType.DRAG\nval InputEvent.isLongTouch: Boolean get() = type == InputEventType.LONG_TOUCH\nval InputEvent.isMove: Boolean get() = type == InputEventType.MOVE\nval InputEvent.isUp: Boolean get() = type == InputEventType.UP\n\nfun Window.toLocalEvent(camera: Camera, event: InputEvent, vr: Vector2.Result = Vector2().Result()): InputEvent {\n    val (x1, y1) = toLocalCoordinates(camera, event.x1, event.y1, vr)\n    val (x2, y2) = toLocalCoordinates(camera, event.x2, event.y2, vr)\n    val localEvent: InputEvent = InputEvent(event.source, event.type, x1, y1, x2, y2, event.scrollX, event.scrollY)\n    return localEvent\n}\n\nfun InputEvent.withType(type: InputEventType): InputEvent =\n    InputEvent(source, type, x1, y1, x2, y2, scrollX, scrollY, preventDefaultBlock)\n\nfun InputEvent.withMove(vector: Vector2?): InputEvent {\n    if (vector == null) return this\n    val x1: Float = x1 + vector.x\n    val y1: Float = y1 + vector.y\n    val x2: Float = x2 + vector.x\n    val y2: Float = y2 + vector.y\n    return InputEvent(source, type, x1, y1, x2, y2, scrollX, scrollY, preventDefaultBlock)\n}\n","package featurea.input\n\nimport featurea.utils.EventListener\n\ninterface InputListener : EventListener {\n    fun happen(event: InputEvent) {} // todo rename to `accept`\n    fun update(event: InputEvent)\n}\n\nfun InputListener(update: (event: InputEvent) -> Unit): InputListener = object : InputListener {\n    override fun update(event: InputEvent) = update(event)\n}\n","package featurea.input\n\nimport featurea.runtime.*\n\n/*dependencies*/\n\nexpect fun DependencyBuilder.includeExternals()\n\nval artifact = Artifact(\"featurea.input\") {\n    includeExternals()\n    include(featurea.window.artifact)\n\n    \"Input\" to ::Input\n}\n\nfun DependencyBuilder.InputPlugin(plugin: Plugin<Input>) = install(plugin)\n\n/*preferences*/\n\nconst val DEFAULT_DOUBLE_CLICK_DELAY: Double = 215.0\n","package featurea.input\n\nimport featurea.input.InputEventSource.LEFT\nimport featurea.input.InputEventSource.MIDDLE\nimport featurea.input.InputEventType.*\nimport featurea.js.HtmlElementProxy\nimport featurea.math.Point\nimport featurea.math.Vector2\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.events.WheelEvent\nimport kotlinx.browser.window as jsWindow\nimport org.w3c.dom.events.EventListener as JsEventListener\n\nclass MouseEventProducer(override val module: Module) : Component, JsEventListener {\n\n    private val htmlElement: HTMLElement = import(HtmlElementProxy)\n    private val input: Input = import()\n\n    private var lastDragX: Float? = null\n    private var lastDragY: Float? = null\n    private var isDown = false\n\n    override fun onCreateComponent() {\n        htmlElement.addEventListener(\"mouseup\", this, false)\n        htmlElement.addEventListener(\"mousedown\", this, false)\n        htmlElement.addEventListener(\"mousemove\", this, false)\n        htmlElement.addEventListener(\"dblclick\", this, false)\n        htmlElement.addEventListener(\"wheel\", this, false)\n    }\n\n    override fun onDeleteComponent() {\n        htmlElement.removeEventListener(\"mousedown\", this)\n        htmlElement.removeEventListener(\"mouseup\", this)\n        htmlElement.removeEventListener(\"mousemove\", this)\n        htmlElement.removeEventListener(\"dblclick\", this)\n        htmlElement.removeEventListener(\"wheel\", this)\n    }\n\n    override fun handleEvent(event: Event) {\n        event as MouseEvent\n        when (event.type) {\n            \"mousedown\" -> {\n                reset()\n                val (x, y) = event.findMousePosition()\n                isDown = true\n                input.addEvent(InputEvent(LEFT, DOWN, x, y, x2 = x, y2 = y))\n            }\n            \"mouseup\" -> {\n                reset()\n                val (x, y) = event.findMousePosition()\n                isDown = false\n                input.addEvent(InputEvent(LEFT, UP, x, y, x2 = x, y2 = y))\n            }\n            \"mousemove\" -> {\n                if (isDown) {\n                    val (x, y) = event.findMousePosition()\n                    input.addEvent(InputEvent(LEFT, DRAG, lastDragX ?: x, lastDragY ?: y, x2 = x, y2 = y))\n                    lastDragX = x\n                    lastDragY = y\n                } else {\n                    reset()\n                    val (x, y) = event.findMousePosition()\n                    input.addEvent(InputEvent(LEFT, MOVE, x, y, x2 = x, y2 = y))\n                }\n            }\n            \"dblclick\" -> {\n                reset()\n                val (x, y) = event.findMousePosition()\n                input.addEvent(InputEvent(LEFT, DOUBLE_CLICK, x, y, x2 = x, y2 = y))\n            }\n            \"wheel\" -> {\n                event as WheelEvent\n                reset()\n                val (x, y) = event.findMousePosition()\n                val scrollX: Float = event.deltaX.toFloat()\n                val scrollY: Float = event.deltaY.toFloat()\n                input.addEvent(InputEvent(MIDDLE, WHEEL, x, y, x2 = x, y2 = y, scrollX, scrollY, event::preventDefault))\n            }\n        }\n    }\n\n    /*internals*/\n\n    private fun reset() {\n        lastDragX = null\n        lastDragY = null\n    }\n\n    // https://www.khronos.org/webgl/wiki/HandlingHighDPI\n    private fun MouseEvent.findMousePosition(): Vector2.Result {\n        val rectangle = htmlElement.getBoundingClientRect()\n        val x = (clientX - rectangle.left) * jsWindow.devicePixelRatio\n        val y = (clientY - rectangle.top) * jsWindow.devicePixelRatio\n        return Point().Result().apply(x.toFloat(), y.toFloat())\n    }\n\n}\n","package featurea.input\n\nimport featurea.utils.getTimeMillis\nimport featurea.input.InputEventSource.LEFT\nimport featurea.input.InputEventType.*\nimport featurea.js.HTMLCanvasElementProxy\nimport featurea.js.HtmlElementProxy\nimport featurea.js.applyCssAttribute\nimport featurea.math.Point\nimport featurea.math.Vector2\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport kotlinx.browser.window as jsWindow\nimport org.w3c.dom.events.EventListener as JsEventListener\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\nclass TouchEventProducer(override val module: Module) : Component, JsEventListener {\n\n    private val htmlElement: HTMLElement = import(HtmlElementProxy)\n    private val input: Input = import()\n    private val mainCanvas: HTMLCanvasElement = import(HTMLCanvasElementProxy)\n\n    private var lastDragX: Float? = null\n    private var lastDragY: Float? = null\n    private var isDown: Boolean = false\n    private var isDoubleClick: Boolean = false\n    private var firstClickTime: Double = -1.0;\n\n    init {\n        mainCanvas.style.applyCssAttribute(\"touch-action\" to \"none\")\n    }\n\n    override fun onCreateComponent() {\n        htmlElement.addEventListener(\"touchstart\", this, false)\n        htmlElement.addEventListener(\"touchend\", this, false)\n        htmlElement.addEventListener(\"touchcancel\", this, false)\n        htmlElement.addEventListener(\"touchmove\", this, false)\n    }\n\n    override fun onDeleteComponent() {\n        htmlElement.removeEventListener(\"touchstart\", this)\n        htmlElement.removeEventListener(\"touchend\", this)\n        htmlElement.removeEventListener(\"touchcancel\", this)\n        htmlElement.removeEventListener(\"touchmove\", this)\n    }\n\n    override fun handleEvent(event: Event) {\n        event as TouchEvent\n        when (event.type) {\n            \"touchstart\" -> {\n                val now = getTimeMillis()\n                isDoubleClick = now - firstClickTime < DEFAULT_DOUBLE_CLICK_DELAY\n                firstClickTime = if (isDoubleClick) -1.0 else now\n\n                reset()\n                val (x, y) = event.findTouchPosition()\n                isDown = true\n                input.addEvent(InputEvent(LEFT, DOWN, x, y, x2 = x, y2 = y))\n\n                // >> quickfix for `libraries/keyboard/src/js/KeyboardDelegate.kt` todo improve on Safari\n                GlobalScope.launch {\n                    input.update()\n                }\n                // <<\n            }\n            \"touchcancel\", \"touchend\" -> {\n                reset()\n                val (x, y) = event.findTouchPosition()\n                isDown = false\n                input.addEvent(InputEvent(LEFT, UP, x, y, x2 = x, y2 = y))\n                if (isDoubleClick) {\n                    input.addEvent(InputEvent(LEFT, DOUBLE_CLICK, x, y, x2 = x, y2 = y))\n                }\n            }\n            \"touchmove\" -> {\n                if (isDown) {\n                    val (x, y) = event.findTouchPosition()\n                    input.addEvent(InputEvent(LEFT, DRAG, lastDragX ?: x, lastDragY ?: y, x2 = x, y2 = y, preventDefaultBlock = event::preventDefault))\n                    lastDragX = x\n                    lastDragY = y\n                }\n            }\n        }\n    }\n\n    /*internals*/\n\n    private fun reset() {\n        lastDragX = null\n        lastDragY = null\n    }\n\n    // https://www.khronos.org/webgl/wiki/HandlingHighDPI\n    private fun TouchEvent.findTouchPosition(): Vector2.Result {\n        val rectangle: DOMRect = htmlElement.getBoundingClientRect()\n        val touch: Touch = changedTouches[0] ?: error(\"changedTouches: $changedTouches\")\n        val x: Double = (touch.clientX - rectangle.left) * jsWindow.devicePixelRatio\n        val y: Double = (touch.clientY - rectangle.top) * jsWindow.devicePixelRatio\n        return Point().Result().apply(x.toFloat(), y.toFloat())\n    }\n\n}\n","package featurea.input\n\nimport featurea.js.isUserAgentMobile\nimport featurea.runtime.DependencyBuilder\n\nactual fun DependencyBuilder.includeExternals() {\n    InputPlugin {\n        if (isUserAgentMobile) {\n            \"TouchEventProducer\" to ::TouchEventProducer\n        } else {\n            \"MouseEventProducer\" to ::MouseEventProducer\n        }\n    }\n}\n","package featurea.shader\n\nimport featurea.content.ResourceNotFoundException\nimport featurea.utils.exitProcess\nimport featurea.utils.isInstrumentationEnabled\nimport featurea.opengl.Program\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.shader.reader.ShaderSource\nimport featurea.shader.reader.transpileShaderSource\nimport featurea.text.TextContent\n\nclass ShaderContent(override val module: Module) : Component {\n\n    private val textContent: TextContent = import()\n\n    private val programs = mutableMapOf<String, Program>()\n\n    fun findProgram(shaderPath: String): Program {\n        val program: Program? = programs[shaderPath]\n        if (program == null && isInstrumentationEnabled) {\n            exitProcess(1)\n        }\n        return program ?: throw ResourceNotFoundException(shaderPath)\n    }\n\n    operator fun get(shaderPath: String): Program? {\n        return programs[shaderPath]\n    }\n\n    operator fun set(shaderPath: String, shaderProgram: Program) {\n        programs[shaderPath] = shaderProgram\n    }\n\n    suspend fun readShaderSource(shaderPath: String): ShaderSource {\n        val text: String = textContent.findTextOrNull(shaderPath) ?: throw ResourceNotFoundException(shaderPath)\n        val source: ShaderSource = transpileShaderSource(text)\n        return source\n    }\n\n}\n","package featurea.shader\n\nimport featurea.content.ContentType\nimport featurea.content.Resource\nimport featurea.opengl.Opengl\nimport featurea.opengl.OpenglProxy\nimport featurea.opengl.Program\nimport featurea.runtime.Component\nimport featurea.runtime.Module\nimport featurea.runtime.import\nimport featurea.shader.reader.ShaderSource\n\nclass ShaderContentType(override val module: Module) : Component, ContentType {\n\n    private val gl: Opengl = import(OpenglProxy)\n    private val shaderContent: ShaderContent = import()\n\n    override suspend fun load(resource: Resource, loadingQueue: ArrayList<String>) {\n        if (shaderContent[resource.path] == null) {\n            val program: Program = gl.createProgram()\n            program.compile(resource.path)\n            shaderContent[resource.path] = program\n        }\n        loadingQueue.add(resource.path)\n    }\n\n    override suspend fun release(resource: Resource, releaseQueue: ArrayList<String>) {\n        // todo\n        releaseQueue.add(resource.path)\n    }\n\n}\n\nsuspend fun Program.compile(shaderPath: String) {\n    val shaderContent: ShaderContent = module.import()\n    val source: ShaderSource = shaderContent.readShaderSource(shaderPath)\n    compile(shaderPath, source)\n}\n","package featurea.shader\n\nimport featurea.content.contentTypes\nimport featurea.utils.featureaDir\nimport featurea.runtime.Artifact\n\n/*dependencies*/\n\nval artifact = Artifact(\"featurea.shader\") {\n    include(featurea.opengl.artifact)\n    include(featurea.shader.reader.artifact)\n\n    \"ShaderContent\" to ::ShaderContent\n\n    contentTypes {\n        \"ShaderContentType\" to ::ShaderContentType\n    }\n}\n"],"sourceRoot":""}