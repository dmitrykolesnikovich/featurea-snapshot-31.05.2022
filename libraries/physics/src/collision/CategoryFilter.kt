/*
 * Copyright (c) 2010-2016 William Bittle  http://www.dyn4j.org/
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted 
 * provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice, this list of conditions 
 *     and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
 *     and the following disclaimer in the documentation and/or other materials provided with the 
 *     distribution.
 *   * Neither the name of dyn4j nor the names of its contributors may be used to endorse or 
 *     promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.dyn4j.collision

/**
 * A [Filter] for categorized fixtures.
 *
 *
 * Constructing a [CategoryFilter] requires supplying
 * two integers: a category integer and a mask integer.
 *
 *
 * The usage of this class can be explained as follows:
 * <pre> CategoryFilter f1 = new CategoryFilter(1, 1);
 * CategoryFilter f2 = new CategoryFilter(2, 2);
 * CategoryFilter f3 = new CategoryFitler(3, 3);
 *
 * f1.isAllowed(f2); // returns false
 * f2.isAllowed(f3); // returns true?!</pre>
 * This is because the integers passed in are being used via their binary representation.
 * If we examine the binary representation of these numbers:
 * <pre> 1 = 0...0001
 * 2 = 0...0010
 * 3 = 0...0011</pre>
 * We see that 3 is actually a combination of 1 and 2.  Because of this `f3`
 * will actually be part of category 1 and 2, not its own category.
 *
 *
 * Because of this representation, there are a maximum of 64 categories that can be
 * represented:
 * <pre> category  1 =  1 = 2^0
 * category  2 =  2 = 2^1
 * category  3 =  4 = 2^2
 * category  4 =  8 = 2^3
 * category  5 = 16 = 2^4
 * ...
 * category 64 = Long.MAX_VALUE = 2^64</pre>
 * In addition, the mask integer is handled in a similar way.  `f3` will be able to
 * collide with both category 1 and 2 because of the binary representation of 3.
 *
 *
 * In general, the mask or category can be generated by OR-ing the categories.
 * For example:
 * <pre> final long CATEGORY_0 = 1;
 * final long CATEGORY_1 = 2;
 * final long CATEGORY_2 = 4;
 * final long MASK_ALL = Long.MAX_VALUE;
 *
 * // make f1 part of category 0, and allow collisions with category 0 and 1
 * CategoryFilter f1 = new CategoryFilter(CATEGORY_0, CATEGORY_0 | CATEGORY_1);
 *
 * // make f2 part of category 1 and 2, and allow collisions with category 0 and 2
 * CategoryFilter f2 = new CategoryFilter(CATEGORY_1 | CATEGORY_2, CATEGORY_0 | CATEGORY_2);
 *
 * // make f3 part of category 2, and allow collision with every category
 * CategoryFilter f3 = new CategoryFilter(CATEGORY_2, MASK_ALL);
 *
 * f1.isAllowed(f2); // returns true since f1 can collide with 0 or 1 and f2 is part of 1
 * // and because f2 can collide with 0 or 2 and f1 is part of 0
 *
 * f1.isAllowed(f3); // returns false since f1 can collide with 0 or 1 but f3 is part of 2 only
 * // even though f3 is allowed to collide with all categories (both must work)
 *
 * f2.isAllowed(f3); // returns true since f2 can collide with 0 or 2 and f3 is part of 2
 * // and because f3 can collide with all categories</pre>
 * As its apparent from the code above, both f1.isAllowed(f2) and f2.isAllowed(f1) must return true
 * if the entire result is to be deemed true.
 *
 *
 * By default the [CategoryFilter] will be set to category 1 and
 * have a mask of all category bits.
 * @author William Bittle
 * @version 3.2.0
 * @since 1.0.0
 */
class CategoryFilter : Filter {
    /**
     * Returns the category bits.
     * @return long the category bits
     */
    /** The category this object is in  */
    val category: Long

    /**
     * Returns the mask bits.
     * @return long the mask bits
     */
    /** The categories this object can collide with  */
    val mask: Long

    /**
     * Default constructor.
     *
     *
     * By default the category is 1 and the mask is all categories.
     */
    constructor() {
        category = 1
        mask = Long.MAX_VALUE
    }

    /**
     * Full constructor.
     * @param category the category bits
     * @param mask the mask bits
     */
    constructor(category: Long, mask: Long) : super() {
        this.category = category
        this.mask = mask
    }

    /**
     * Returns true if the given [Filter] and this [Filter]
     * allow the objects to interact.
     *
     *
     * If the given [Filter] is not the same type as this [Filter]
     * then a value of true is returned.
     *
     *
     * If the given [Filter] is null, a value of true is returned.
     * @param filter the other [Filter]
     * @return boolean
     */
    override fun isAllowed(filter: Filter?): Boolean {
        // make sure the given filter is not null
        if (filter == null) return true
        // check the type
        if (filter is CategoryFilter) {
            // cast the filter
            val cf = filter as CategoryFilter
            // perform the check
            return category and cf.mask > 0 && cf.category and mask > 0
        }
        // if its not of right type always return true
        return true
    }

    /* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
    override fun equals(obj: Any?): Boolean {
        if (obj == null) return false
        if (obj === this) return true
        if (obj is CategoryFilter) {
            val filter = obj
            return filter.category == category && filter.mask == mask
        }
        return false
    }

    /* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
    override fun hashCode(): Int {
        var hash = 17
        hash = hash * 31 + (category ushr 32 xor category).toInt()
        hash = hash * 31 + (mask ushr 32 xor mask).toInt()
        return hash
    }

    /* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
    override fun toString(): String {
        val sb: StringBuilder = StringBuilder()
        sb.append("CategoryFilter[Category=").append(category)
            .append("|Mask=").append(mask)
            .append("]")
        return sb.toString()
    }

}