subprojects {

    ext.source = { Closure closure ->
        if (!enableIosTarget && project.artifactId == "featurea:ios") return // quickfix todo improve
        closure.delegate = new DependenciesDelegate(project)
        closure()
    }

}

class DependenciesDelegate {

    private final Project project
    private Object configureSourceSet

    DependenciesDelegate(Project project) {
        this.project = project
    }

    void common(Closure configure) {
        if (project.isExamplesProject()) return
        configureSourceSet(configure, project.kotlin.sourceSets.commonMain)
    }

    void android(Closure configure) {
        if (project.isExamplesProject()) return
        configureSourceSet(configure, project.kotlin.sourceSets.androidMain)
    }

    void desktop(Closure configure) {
        if (project.isExamplesProject()) return
        configureSourceSet(configure, project.kotlin.sourceSets.desktopMain)
    }

    void ios(Closure configure) {
        if (project.isExamplesProject()) return
        if (project.enableIosTarget) {
            configureSourceSet(configure, project.kotlin.sourceSets.iosMain)
        }
    }

    void js(Closure configure) {
        if (project.isExamplesProject()) return
        configureSourceSet(configure, project.kotlin.sourceSets.jsMain)
    }

    void jvm(Closure configure) {
        if (project.isExamplesProject()) return
        if (project.jvmExists()) {
            configureSourceSet(configure, project.kotlin.sourceSets.jvmMain)
        } else {
            configureSourceSet(configure, project.kotlin.sourceSets.androidMain)
            configureSourceSet(configure, project.kotlin.sourceSets.desktopMain)
        }
    }

    void include(String dependency) {
        project.with {
            // 1. resolve
            Object resolvedDependency
            boolean isLocalProject = dependency.startsWith(":") // quickfix todo improve
            if (isLocalProject) {
                resolvedDependency = project(dependency)
            } else {
                resolvedDependency = dependency
            }

            // 2. include
            if (isDesktopProject() || isExamplesProject()) {
                dependencies {
                    api resolvedDependency
                }
            } else {
                Object configureSourceSet = configureSourceSet ?: kotlin.sourceSets.commonMain
                configureSourceSet.dependencies {
                    api resolvedDependency
                }
            }
        }
    }

    void include(Project dependency) {
        if (project.isDesktopProject()) {
            project.dependencies {
                api dependency
            }
        } else {
            Object configureSourceSet = configureSourceSet ?: project.kotlin.sourceSets.commonMain
            configureSourceSet.dependencies {
                api dependency
            }
        }
    }

    String artifact(String string) {
        return ":$string" // quickfix todo improve
    }

    private void configureSourceSet(Closure configure, Object sourceSet) {
        configureSourceSet = sourceSet
        configure.delegate = this
        configure()
        configureSourceSet = null
    }

}
