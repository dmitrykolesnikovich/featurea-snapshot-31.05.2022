subprojects {

    ext.android_launcher = {
        project.with {
            apply plugin: "com.android.application"
            apply plugin: "kotlin-android"
            apply plugin: "kotlin-android-extensions"
            apply plugin: "kotlin-kapt"

            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
                api "com.android.support:multidex:1.0.3"
            }

            android {
                ndkVersion "22.1.7171670"
                compileOptions {
                    sourceCompatibility = JavaVersion.VERSION_1_8
                    targetCompatibility = JavaVersion.VERSION_1_8
                }
                kotlinOptions {
                    jvmTarget = JavaVersion.VERSION_1_8
                }
                compileSdkVersion 30
                buildToolsVersion "29.0.3"
                defaultConfig {
                    applicationId project.packageId.replace(".android", "")
                    minSdkVersion 19
                    targetSdkVersion 30
                    versionCode 1
                    versionName "1.0"
                    multiDexEnabled true
                }
                buildTypes {
                    release {
                        minifyEnabled true
                    }
                }
                packagingOptions {
                    exclude "META-INF/*"
                }
                lintOptions {
                    tasks.lint.enabled = false
                }
                dataBinding {
                    enabled = true
                }
                sourceSets.main {
                    manifest.srcFile "${projectDir}/AndroidManifest.xml"
                    res.srcDirs = ["res"]
                    java.srcDirs = ["src", bootstrapDir]
                }
            }

            ext.assemble = { Project mainProject ->
                dependencies {
                    api mainProject
                }
            }

            ext.onLaunch = { String mainCall ->
                generate {
                    BootstrapKtFile().text = """\
                        |package ${project.packageId}
                        |
                        |import android.os.Bundle
                        |import featurea.android.MainActivityProxy
                        |import featurea.android.FeatureaActivity
                        |import featurea.runtime.buildRuntime
                        |import featurea.runtime.provide
                        |
                        |class FeatureaMainActivity : FeatureaActivity() {
                        |
                        |    private val mainActivity: FeatureaActivity = this
                        |
                        |    override fun onCreate(savedInstanceState: Bundle?) {
                        |        super.onCreate(savedInstanceState)
                        |        val mainActivityProxy = MainActivityProxy(mainActivity)
                        |        launch(mainActivityProxy) {
                        |            onInitContainer {
                        |                provide(mainActivityProxy)
                        |            }
                        |            initModule { module ->
                        |                mainActivity.module = module
                        |            }
                        |            $mainCall
                        |        }
                        |    }
                        |
                        |}
                        |""".stripMargin("|")
                }
            }

        }
    }

    ext.desktop_launcher = {
        if (project.isTestProject) {
            project.ext.desktopLauncherMainClassName = "${project.packageId}.TestBootstrap"
        } else {
            project.ext.desktopLauncherMainClassName = "${project.packageId}.Bootstrap"
        }

        project.with {
            apply plugin: "application"
            apply plugin: "kotlin"

            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinx_coroutines_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$kotlinx_coroutines_version"
                api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            }

            if (project.isTestProject) {
                // no op
            } else {
                sourceSets.main {
                    resources.srcDirs = ["res"]
                    java.srcDirs += ["src"] // IMPORTANT `+=` instead of `=`
                }
            }

            application {
                mainClassName = project.desktopLauncherMainClassName
                applicationName = project.name.replaceFirst("-cli", "")
            }

            run {
                standardInput = System.in
            }

            ext.assemble = { Project mainProject ->
                dependencies {
                    api mainProject
                }
            }

            ext.mainCall = { String main, Closure closure = null ->
                if (closure != null) {
                    registerRunner(main, closure, false)
                } else {
                    if (project.isExamplesProject()) return // quickfix todo improve
                    boolean isFunctionCall = main.contains("(")

                    if (project.isTestProject) {
                        // no op
                    } else {
                        sourceSets.main {
                            java.srcDirs += [bootstrapDir] // IMPORTANT `+=` instead of `=`
                        }
                    }

                    if (isFunctionCall) {
                        if (project.isTestProject) {
                            generate {
                                TestBootstrapKtFile().text = """\
                            |@file:JvmName("TestBootstrap")
                            |
                            |package ${project.packageId}
                            |
                            |import kotlinx.coroutines.runBlocking
                            |
                            |object TestBootstrap {
                            |
                            |   @JvmStatic
                            |   fun main(args: Array<String>) {
                            |       runBlocking {
                            |           $main
                            |       }
                            |   }
                            |
                            |}
                            |""".stripMargin("|")
                            }
                        } else {
                            generate {
                                BootstrapKtFile().text = """\
                            |@file:JvmName("Bootstrap")
                            |
                            |package ${project.packageId}
                            |
                            |import kotlinx.coroutines.runBlocking
                            |
                            |object Bootstrap {
                            |
                            |   @JvmStatic
                            |   fun main(args: Array<String>) {
                            |       runBlocking {
                            |           $main
                            |       }
                            |   }
                            |
                            |}
                            |""".stripMargin("|")
                            }
                        }
                    } else {
                        project.ext.desktopLauncherMainClassName = main // quickfix todo improve
                        application {
                            mainClassName = main
                        }
                    }
                }
            }

            ext.onLaunch = { String task, Closure closure = null ->
                if (closure != null) {
                    registerRunner(task, closure, true)

                    project.tasks.register("${task}Jar") {
                        String bootstrapName = "${task}Bootstrap"
                        application {
                            mainClassName = "${project.packageId}.${bootstrapName}"
                            applicationName = project.name
                        }
                        project.with {
                            shadowJar {
                                archiveBaseName.set(task)
                                archiveClassifier.set("")
                                archiveVersion.set("")
                            }

                            Task shadowJarTask = tasks.getByPath("shadowJar")
                            finalizedBy(shadowJarTask)
                        }
                    }
                } else {
                    mainCall "featurea.runtime.buildRuntime { $task }"
                }
            }

            ext.registerRunner = { String task, Closure closure, Boolean withProxyScope ->
                String function
                if (closure != null) {
                    function = closure()
                } else {
                    function = "${project.packageId.replace(".desktop", "")}.${task}"
                }

                project.tasks.register(task) {
                    Task runExamplesProjectTask = tasks.getByPath("run")
                    finalizedBy(runExamplesProjectTask)

                    doLast {
                        String bootstrapName = "${task}Bootstrap"
                        project.with {
                            generate {
                                GeneratedKtFile(bootstrapName).text = """\
                                |@file:JvmName("$bootstrapName")
                                |
                                |package ${project.packageId}
                                |
                                |import featurea.runtime.buildRuntime
                                |import kotlinx.coroutines.runBlocking
                                |
                                |@Suppress("ClassName")
                                |object $bootstrapName {
                                |
                                |   @JvmStatic
                                |   fun main(args: Array<String>) {
                                |       // featurea.configureHotReload(function = "$function")
                                |       runBlocking {
                                |           ${withProxyScope ? "buildRuntime { $function() }" : "$function()"}
                                |       }
                                |   }
                                |
                                |}
                                |""".stripMargin("|")
                            }

                            sourceSets.main {
                                kotlin.srcDirs += [bootstrapDir]
                            }
                            application {
                                mainClassName = "${project.packageId}.${bootstrapName}"
                                applicationName = project.name
                            }
                        }
                    }
                }
            }
        }
    }

    ext.ios_launcher = {
        project.with {
            apply plugin: "org.jetbrains.kotlin.multiplatform"

            kotlin.sourceSets {
                iosMain {
                    kotlin.srcDirs = ["src", bootstrapDir]
                }
            }

            ext.assemble = { Project mainProject ->
                project.ext.frameworkBaseName = mainProject.name.replace("-", "_") + "_main"
                kotlin {
                    if (project != mainProject) {
                        sourceSets {
                            commonMain.dependencies {
                                api mainProject
                            }
                        }
                    }
                    if (enableIosTarget) {
                        targets {
                            fromPreset(presets.iosArm64, "ios") {
                                binaries {
                                    framework {
                                        baseName = frameworkBaseName
                                        if (project != mainProject) {
                                            export mainProject
                                            transitiveExport = true
                                        }
                                    }
                                }
                            }
                        }
                        tasks["linkReleaseFrameworkIos"].onlyIf { false } // quickfix disable link release todo improve
                    }
                }
            }

            ext.onLaunch = { String mainCall ->
                generate {
                    BootstrapKtFile().text = """\
                        |/*
                        |import UIKit
                        |import $frameworkBaseName
                        |UIApplicationMain(CommandLine.argc, CommandLine.unsafeArgv, nil, BootstrapKt.delegateClassName)
                        |*/
                        |
                        |import featurea.ios.UIApplicationDelegate
                        |import featurea.ios.UIApplicationProxy
                        |import featurea.ios.MainWindowProxy
                        |import featurea.runtime.buildRuntime
                        |import featurea.utils.log
                        |import platform.Foundation.NSStringFromClass
                        |import platform.UIKit.*
                        |
                        |val delegateClassName = NSStringFromClass(Bootstrap)
                        |
                        |private class Bootstrap : UIResponder, UIApplicationDelegateProtocol {
                        |
                        |    companion object : UIResponderMeta(), UIApplicationDelegateProtocolMeta
                        |
                        |    @OverrideInit
                        |    constructor() : super()
                        |
                        |    private val appDelegate = UIApplicationDelegate()
                        |    private val mainWindow: UIWindow = UIWindow(UIScreen.mainScreen.bounds)
                        |
                        |    override fun window(): UIWindow { log("ApplicationDelegate.window: \$mainWindow"); return mainWindow }
                        |                         
                        |    override fun application(application: UIApplication, didFinishLaunchingWithOptions: Map<Any?, *>?): Boolean {
                        |        val appDelegateProxy = UIApplicationProxy(appDelegate)
                        |        buildRuntime {
                        |            onInitContainer {
                        |                provide(appDelegateProxy)
                        |                provide(MainWindowProxy(mainWindow))
                        |            }
                        |            $mainCall
                        |        }
                        |        return true
                        |    }
                        |                        
                        |    override fun application(application: UIApplication, supportedInterfaceOrientationsForWindow: UIWindow?): UIInterfaceOrientationMask {
                        |        return appDelegate.interfaceOrientationMask
                        |    }
                        |
                        |}
                        |""".stripMargin("|")
                }
            }
        }
    }

    ext.js_launcher = {
        project.ext.js_launcher_artifact = true
        project.with {
            apply plugin: "org.jetbrains.kotlin.js"

            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlinx_coroutines_version"
                api "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
            }

            // https://github.com/wiyarmir/kotlin-multiplatform-template/blob/e82a8db80952e860979fe5c7f6f49d49683db602/web/build.gradle
            kotlin {
                sourceSets.main {
                    kotlin.srcDirs = ["src", bootstrapDir]
                }
                js {
                    browser {
                        webpackTask {
                            outputFileName = "${project.name}.js"
                            destinationDirectory = file("${buildDir}/bundle")
                            sourceMaps = true
                            // output.libraryTarget = "commonjs"
                        }
                    }
                    binaries.executable()
                }
            }

            compileKotlinJs {
                kotlinOptions {
                    sourceMap = true
                    sourceMapEmbedSources = "always"
                    outputFile = "$project.buildDir.path/js/${project.name}.js"
                    suppressWarnings = true
                    verbose = true
                    metaInfo = true
                    moduleKind = "commonjs"
                    main = "call"
                }
            }

            ext.assemble = { Project mainProject ->
                dependencies {
                    compile mainProject
                }

                generate { WebpackConfigDir() }
            }

            ext.onLaunchBody = { String main ->
                if (main.endsWith("main()")) error("Rename $main to ${main.replace("main()", "launch()")}")

                generate {
                    BootstrapKtFile().text = """\
                            |package ${project.packageId}
                            |
                            |fun main() { 
                            |    featurea.js.loadRootElementAsBody {
                            |        $main 
                            |    } 
                            |}
                            |""".stripMargin("|")
                }

                if (!file("${projectDir}/assemble").exists()) {
                    IndexHtmlFile().text = """\
                        |<html>
                        |<head>
                        |  <title>${project.name.replaceAll("-js", "").replaceAll("-", " ")}</title>
                        |  <script src="${project.name}.js"></script>
                        |</head>
                        |<body style="margin: 0">
                        |
                        |</body>
                        |</html>
                        |""".stripMargin("|")
                }
            }

            // >> quickfix todo improve
            ext.onLaunchDialog = { String main ->
                if (main.endsWith("main()")) error("Rename $main to ${main.replace("main()", "launch()")}")

                generate {
                    BootstrapKtFile().text = """\
                            |package ${project.packageId}
                            |
                            |fun main() { 
                            |    featurea.js.loadRootElementAsDialog {
                            |        $main
                            |    } 
                            |}
                            |""".stripMargin("|")
                }

                if (!file("${projectDir}/assemble").exists()) {
                    IndexHtmlFile().text = """\
                        |<html>
                        |<head>
                        |  <title>${project.name.replaceAll("-js", "").replaceAll("-", " ")}</title>
                        |  <script src="${project.name}.js"></script>
                        |</head>
                        |<body style="margin: 0">
                        |
                        |</body>
                        |</html>
                        |""".stripMargin("|")
                }
            }
            // <<

            ext.onCreate = { String mainCall, Map<String, String> globalFunctions = null ->
                generate {
                    String globalFunctionDeclarations = ""
                    String globalFunctionBodies = ""
                    if (globalFunctions != null) {
                        for (String globalFunctionName : globalFunctions.keySet()) {
                            globalFunctionDeclarations += "\n    window.asDynamic()[\"${globalFunctionName}\"] = ::${globalFunctionName}"
                        }
                        for (String globalFunctionBody : globalFunctions.values()) {
                            globalFunctionBodies += "$globalFunctionBody \n"
                        }
                    }

                    BootstrapKtFile().text = """\
                        |package ${project.packageId} $globalFunctionBodies
                        |
                        |fun main() {
                        |    featurea.js.exportLaunchers { args -> $mainCall } $globalFunctionDeclarations
                        |}
                        |""".stripMargin("|")
                }
            }

            task deleteBeforeBuild {
                File deleteBeforeBuildTxt = new File(project.projectDir, ".jsmodules")
                if (deleteBeforeBuildTxt.exists()) {
                    new File(project.buildDir, "bundle").deleteDir()
                    for (String shortcut : deleteBeforeBuildTxt.readLines()) {
                        new File(rootProject.projectDir, "build/js/node_modules/${shortcut}").delete()
                        new File(rootProject.projectDir, "build/js/packages/${shortcut}").deleteDir()
                    }
                }
            }

            build.dependsOn(deleteBeforeBuild)

            /*
            task launch {
                exec {
                    workingDir new File(project.projectDir, "assemble")
                    if (isWindows) error("Windows not supported yet")
                    if (isMacOs) commandLine "python3", "-m", "http.server", "9000"
                }
            }

            launch.dependsOn(build)
            */
        }
    }

}
