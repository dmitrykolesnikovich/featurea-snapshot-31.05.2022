// https://featurea.myjetbrains.com/youtrack/issue/ENGINE-46

subprojects {

    ext.examples = { Closure closure ->
        if (project.isExamplesProject()) {
            String mainPath = project.path.replace("-examples", "")
            Project mainProject = project.findProject(mainPath)

            project.with {
                sourceSets.main {
                    kotlin.srcDirs = ["examples", examplesBootstrapDir]
                    kotlin.exclude("examples/res")
                    resources.srcDirs = ["examples/res"]
                }
                dependencies {
                    api mainProject
                    api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
                    api "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinx_coroutines_version"
                    api "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$kotlinx_coroutines_version"
                    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
                }
            }
        } else {
            String examplesPath = project.path + "-examples"
            Project examplesProject = project.findProject(examplesPath)
            if (examplesProject != null) {
                closure.delegate = new ExamplesDelegate(project, examplesProject)
                closure()
            }
        }
    }

}

class ExamplesDelegate {

    private final Project mainProject
    private final Project examplesProject

    ExamplesDelegate(Project mainProject, Project examplesProject) {
        this.mainProject = mainProject
        this.examplesProject = examplesProject
    }

    void mainCall(String task, Closure closure = null) {
        String function
        if (closure != null) {
            function = closure()
        } else {
            function = "${mainProject.packageId.replace(".desktop", "")}.examples.${task}"
        }

        registerBootstrapTask(mainProject, task, function, false, true)
        registerBootstrapTask(examplesProject, task, function, false, false)

        examplesProject.tasks.register("${task}Jar") {
            examplesProject.with {
                Task onLaunchTask = tasks.getByPath(task)
                dependsOn(onLaunchTask)

                shadowJar {
                    archiveBaseName.set(task)
                    archiveClassifier.set("")
                    archiveVersion.set("")
                }

                Task shadowJarTask = tasks.getByPath("shadowJar")
                finalizedBy(shadowJarTask)
            }
        }
    }

    void onLaunch(String task, Closure closure = null) {
        String function
        if (closure != null) {
            function = closure()
        } else {
            function = "${mainProject.packageId.replace(".desktop", "")}.examples.${task}"
        }

        registerBootstrapTask(mainProject, task, function, true, true)
        registerBootstrapTask(examplesProject, task, function, true, false)

        examplesProject.tasks.register("${task}Jar") {
            examplesProject.with {
                Task onLaunchTask = tasks.getByPath(task)
                dependsOn(onLaunchTask)

                shadowJar {
                    archiveBaseName.set(task)
                    archiveClassifier.set("")
                    archiveVersion.set("")
                }

                Task shadowJarTask = tasks.getByPath("shadowJar")
                finalizedBy(shadowJarTask)
            }
        }
    }

    private void registerBootstrapTask(Project project, String task, String function, Boolean withLaunch, boolean withRun) {
        project.tasks.register(task) {
            if (withRun) {
                Task runExamplesProjectTask = examplesProject.tasks.getByPath("run")
                finalizedBy(runExamplesProjectTask)
            }

            doLast {
                String bootstrapName = "${task}Bootstrap"
                project.with {
                    generate {
                        ExamplesBootstrapKtFile(bootstrapName).text = """\
                            |@file:JvmName("$bootstrapName")
                            |
                            |package ${project.packageId}
                            |
                            |import kotlinx.coroutines.runBlocking
                            |
                            |@Suppress("ClassName")
                            |object $bootstrapName {
                            |
                            |   @JvmStatic
                            |   fun main(args: Array<String>) {
                            |       // featurea.configureHotReload(function = "$function")
                            |       runBlocking {
                            |           ${withLaunch ? "featurea.runtime.proxyScope { $function() }" : "$function()"}
                            |       }
                            |   }
                            |
                            |}
                            |""".stripMargin("|")
                    }
                }
                examplesProject.with {
                    application {
                        mainClassName = "${project.packageId}.${bootstrapName}"
                        applicationName = project.name
                    }
                }
            }
        }
    }

}
